   Compiling client v0.1.0 (/home/me/Projects/bansheelong2/client)
warning: unused import: `Column`
 --> client/src/weather/component.rs:2:57
  |
2 |     widget::{column, component, container, row, svg, text, Column, Component},
  |                                                            ^^^^^^
  |
  = note: `#[warn(unused_imports)]` on by default

warning: unused import: `center`
 --> client/src/window.rs:3:20
  |
3 | use iced::widget::{center, container, row, text};
  |                    ^^^^^^

warning: unused variable: `state`
  --> client/src/weather/component.rs:52:23
   |
52 |     fn update(&mut self, state: &mut Self::State, event: Self::Event) -> Option<Message> {
   |                          ^^^^^ help: if this is intentional, prefix it with an underscore: `_state`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `event`
  --> client/src/weather/component.rs:52:48
   |
52 |     fn update(&mut self, state: &mut Self::State, event: Self::Event) -> Option<Message> {
   |                                                   ^^^^^ help: if this is intentional, prefix it with an underscore: `_event`

warning: unused variable: `state`
  --> client/src/weather/component.rs:56:17
   |
56 |     fn view(&self, state: &Self::State) -> Element<Self::Event> {
   |                    ^^^^^ help: if this is intentional, prefix it with an underscore: `_state`

warning: unused variable: `message`
  --> client/src/window.rs:18:27
   |
18 |     pub fn update(&mut self, message: Message) {}
   |                              ^^^^^^^ help: if this is intentional, prefix it with an underscore: `_message`

warning: `client` (bin "client") generated 6 warnings (run `cargo fix --bin "client"` to apply 2 suggestions)
    Finished `release` profile [optimized] target(s) in 2.50s
     Running `target/release/client`
[2024-07-27T06:21:52Z DEBUG wgpu_core::instance] Instance::new: failed to create Vulkan backend: InstanceError { message: "missing Vulkan entry points", source: Some(LibraryLoadFailure(DlOpen { desc: "libvulkan.so.1: cannot open shared object file: No such file or directory" })) }
[2024-07-27T06:21:52Z DEBUG wgpu_hal::gles::egl] Client extensions: [
        "EGL_EXT_device_base",
        "EGL_EXT_device_enumeration",
        "EGL_EXT_device_query",
        "EGL_EXT_platform_base",
        "EGL_KHR_client_get_all_proc_addresses",
        "EGL_EXT_client_extensions",
        "EGL_KHR_debug",
        "EGL_EXT_platform_device",
        "EGL_EXT_explicit_device",
        "EGL_EXT_platform_wayland",
        "EGL_KHR_platform_wayland",
        "EGL_EXT_platform_x11",
        "EGL_KHR_platform_x11",
        "EGL_EXT_platform_xcb",
        "EGL_MESA_platform_gbm",
        "EGL_KHR_platform_gbm",
        "EGL_MESA_platform_surfaceless",
    ]
[2024-07-27T06:21:52Z DEBUG wgpu_hal::gles::egl] Loading Wayland library to get the current display
[2024-07-27T06:21:52Z DEBUG wgpu_hal::gles::egl] Loading X11 library to get the current display
[2024-07-27T06:21:52Z INFO  wgpu_hal::gles::egl] Using X11 platform
[2024-07-27T06:21:52Z DEBUG wgpu_hal::gles::egl] Display vendor "Mesa Project", version (1, 5)
[2024-07-27T06:21:52Z DEBUG wgpu_hal::gles::egl] Display extensions: [
        "EGL_ANDROID_blob_cache",
        "EGL_ANDROID_native_fence_sync",
        "EGL_CHROMIUM_sync_control",
        "EGL_ANGLE_sync_control_rate",
        "EGL_EXT_buffer_age",
        "EGL_EXT_create_context_robustness",
        "EGL_EXT_image_dma_buf_import",
        "EGL_EXT_image_dma_buf_import_modifiers",
        "EGL_EXT_protected_surface",
        "EGL_EXT_query_reset_notification_strategy",
        "EGL_EXT_swap_buffers_with_damage",
        "EGL_IMG_context_priority",
        "EGL_KHR_cl_event2",
        "EGL_KHR_config_attribs",
        "EGL_KHR_context_flush_control",
        "EGL_KHR_create_context",
        "EGL_KHR_create_context_no_error",
        "EGL_KHR_fence_sync",
        "EGL_KHR_get_all_proc_addresses",
        "EGL_KHR_gl_colorspace",
        "EGL_KHR_gl_renderbuffer_image",
        "EGL_KHR_gl_texture_2D_image",
        "EGL_KHR_gl_texture_3D_image",
        "EGL_KHR_gl_texture_cubemap_image",
        "EGL_KHR_image",
        "EGL_KHR_image_base",
        "EGL_KHR_image_pixmap",
        "EGL_KHR_no_config_context",
        "EGL_KHR_reusable_sync",
        "EGL_KHR_surfaceless_context",
        "EGL_KHR_swap_buffers_with_damage",
        "EGL_EXT_pixel_format_float",
        "EGL_KHR_wait_sync",
        "EGL_MESA_configless_context",
        "EGL_MESA_drm_image",
        "EGL_MESA_gl_interop",
        "EGL_MESA_image_dma_buf_export",
        "EGL_MESA_query_driver",
        "EGL_NOK_texture_from_pixmap",
        "EGL_WL_bind_wayland_display",
    ]
[2024-07-27T06:21:52Z DEBUG wgpu_hal::gles::egl] 	EGL surface: +srgb
[2024-07-27T06:21:52Z DEBUG wgpu_hal::gles::egl] 	Trying native-render
[2024-07-27T06:21:52Z DEBUG wgpu_hal::gles::egl] 	EGL context: +robust access EXT
[2024-07-27T06:21:52Z DEBUG wgpu_hal::gles::egl] 	EGL context: +surfaceless
[2024-07-27T06:21:52Z DEBUG wgpu_core::instance] Instance::new: created Gl backend
[2024-07-27T06:21:52Z INFO  iced_wgpu::window::compositor] Settings {
        present_mode: AutoVsync,
        backends: Backends(
            VULKAN | GL | METAL | DX12 | BROWSER_WEBGPU,
        ),
        default_font: Font {
            family: Name(
                "Noto Sans",
            ),
            weight: Medium,
            stretch: Normal,
            style: Normal,
        },
        default_text_size: Pixels(
            16.0,
        ),
        antialiasing: None,
    }
[2024-07-27T06:21:52Z DEBUG wgpu_hal::gles::adapter] Vendor: AMD
[2024-07-27T06:21:52Z DEBUG wgpu_hal::gles::adapter] Renderer: AMD Radeon Graphics (radeonsi, gfx1103_r1, LLVM 17.0.6, DRM 3.54, 6.6.34)
[2024-07-27T06:21:52Z DEBUG wgpu_hal::gles::adapter] Version: OpenGL ES 3.2 Mesa 24.0.7
[2024-07-27T06:21:52Z DEBUG wgpu_hal::gles::adapter] SL version: OpenGL ES GLSL ES 3.20
[2024-07-27T06:21:52Z DEBUG wgpu_hal::gles::adapter] Supported GL Extensions: {
        "GL_OES_sample_shading",
        "GL_EXT_EGL_image_storage",
        "GL_OES_surfaceless_context",
        "GL_KHR_context_flush_control",
        "GL_OES_depth_texture_cube_map",
        "GL_EXT_shader_integer_mix",
        "GL_NV_draw_buffers",
        "GL_OES_gpu_shader5",
        "GL_MESA_bgra",
        "GL_EXT_color_buffer_half_float",
        "GL_OES_standard_derivatives",
        "GL_EXT_geometry_shader",
        "GL_EXT_texture_format_BGRA8888",
        "GL_EXT_texture_buffer",
        "GL_EXT_depth_clamp",
        "GL_EXT_draw_buffers_indexed",
        "GL_KHR_texture_compression_astc_ldr",
        "GL_OES_geometry_shader",
        "GL_OES_shader_io_blocks",
        "GL_EXT_disjoint_timer_query",
        "GL_EXT_semaphore_fd",
        "GL_OES_texture_storage_multisample_2d_array",
        "GL_OES_fbo_render_mipmap",
        "GL_EXT_frag_depth",
        "GL_OES_EGL_image",
        "GL_EXT_texture_norm16",
        "GL_OES_texture_cube_map_array",
        "GL_OES_get_program_binary",
        "GL_OES_viewport_array",
        "GL_KHR_robustness",
        "GL_NV_alpha_to_coverage_dither_control",
        "GL_EXT_unpack_subimage",
        "GL_EXT_copy_image",
        "GL_EXT_buffer_storage",
        "GL_NV_compute_shader_derivatives",
        "GL_NV_read_buffer",
        "GL_OES_copy_image",
        "GL_OES_vertex_array_object",
        "GL_EXT_texture_cube_map_array",
        "GL_NV_pack_subimage",
        "GL_EXT_polygon_offset_clamp",
        "GL_OES_vertex_half_float",
        "GL_EXT_instanced_arrays",
        "GL_EXT_texture_view",
        "GL_EXT_texture_sRGB_RG8",
        "GL_INTEL_blackhole_render",
        "GL_EXT_compressed_ETC1_RGB8_sub_texture",
        "GL_EXT_shader_implicit_conversions",
        "GL_NV_read_stencil",
        "GL_NV_shader_noperspective_interpolation",
        "GL_KHR_parallel_shader_compile",
        "GL_MESA_texture_const_bandwidth",
        "GL_ANGLE_pack_reverse_row_order",
        "GL_EXT_texture_mirror_clamp_to_edge",
        "GL_EXT_gpu_shader5",
        "GL_EXT_texture_border_clamp",
        "GL_EXT_window_rectangles",
        "GL_OES_tessellation_shader",
        "GL_EXT_draw_buffers",
        "GL_EXT_texture_shadow_lod",
        "GL_KHR_no_error",
        "GL_EXT_texture_compression_s3tc",
        "GL_EXT_texture_sRGB_decode",
        "GL_OES_geometry_point_size",
        "GL_NV_texture_barrier",
        "GL_NV_generate_mipmap_sRGB",
        "GL_OES_compressed_ETC1_RGB8_texture",
        "GL_OES_packed_depth_stencil",
        "GL_EXT_texture_compression_bptc",
        "GL_MESA_sampler_objects",
        "GL_OES_required_internalformat",
        "GL_OES_texture_half_float",
        "GL_EXT_clear_texture",
        "GL_OES_stencil8",
        "GL_EXT_clip_control",
        "GL_EXT_color_buffer_float",
        "GL_EXT_texture_filter_anisotropic",
        "GL_OES_EGL_sync",
        "GL_OES_texture_border_clamp",
        "GL_EXT_tessellation_shader",
        "GL_EXT_texture_sRGB_R8",
        "GL_OES_EGL_image_external",
        "GL_APPLE_texture_max_level",
        "GL_OES_texture_stencil8",
        "GL_EXT_base_instance",
        "GL_EXT_geometry_point_size",
        "GL_EXT_occlusion_query_boolean",
        "GL_NV_fbo_color_attachments",
        "GL_EXT_multi_draw_arrays",
        "GL_KHR_texture_compression_astc_sliced_3d",
        "GL_EXT_shader_group_vote",
        "GL_NV_pixel_buffer_object",
        "GL_OES_sample_variables",
        "GL_OES_shader_multisample_interpolation",
        "GL_EXT_map_buffer_range",
        "GL_ANGLE_texture_compression_dxt5",
        "GL_NV_read_depth_stencil",
        "GL_OES_draw_buffers_indexed",
        "GL_EXT_memory_object_fd",
        "GL_EXT_sRGB_write_control",
        "GL_KHR_debug",
        "GL_EXT_demote_to_helper_invocation",
        "GL_EXT_render_snorm",
        "GL_NV_conditional_render",
        "GL_EXT_texture_rg",
        "GL_EXT_clip_cull_distance",
        "GL_OES_depth_texture",
        "GL_OES_depth24",
        "GL_OES_mapbuffer",
        "GL_OES_tessellation_point_size",
        "GL_OES_texture_npot",
        "GL_OES_shader_image_atomic",
        "GL_EXT_blend_func_extended",
        "GL_EXT_draw_elements_base_vertex",
        "GL_EXT_texture_compression_rgtc",
        "GL_EXT_shader_io_blocks",
        "GL_OES_texture_3D",
        "GL_OES_texture_buffer",
        "GL_OES_draw_elements_base_vertex",
        "GL_EXT_primitive_bounding_box",
        "GL_OES_rgb8_rgba8",
        "GL_EXT_draw_instanced",
        "GL_EXT_read_format_bgra",
        "GL_KHR_robust_buffer_access_behavior",
        "GL_OES_element_index_uint",
        "GL_ANGLE_texture_compression_dxt3",
        "GL_EXT_texture_query_lod",
        "GL_OES_texture_view",
        "GL_KHR_blend_equation_advanced",
        "GL_MESA_framebuffer_flip_y",
        "GL_EXT_texture_compression_s3tc_srgb",
        "GL_EXT_robustness",
        "GL_NV_image_formats",
        "GL_OES_texture_float",
        "GL_EXT_debug_label",
        "GL_OES_texture_float_linear",
        "GL_EXT_texture_compression_dxt1",
        "GL_EXT_memory_object",
        "GL_EXT_semaphore",
        "GL_ANDROID_extension_pack_es31a",
        "GL_EXT_discard_framebuffer",
        "GL_EXT_float_blend",
        "GL_MESA_shader_integer_functions",
        "GL_NV_read_depth",
        "GL_OES_primitive_bounding_box",
        "GL_OES_texture_half_float_linear",
        "GL_EXT_tessellation_point_size",
        "GL_EXT_separate_shader_objects",
        "GL_OES_EGL_image_external_essl3",
        "GL_EXT_blend_minmax",
        "GL_EXT_texture_type_2_10_10_10_REV",
        "GL_APPLE_sync",
    }
[2024-07-27T06:21:52Z INFO  wgpu_core::instance] Adapter Gl AdapterInfo { name: "AMD Radeon Graphics (radeonsi, gfx1103_r1, LLVM 17.0.6, DRM 3.54, 6.6.34)", vendor: 4098, device: 0, device_type: Other, driver: "", driver_info: "", backend: Gl }
[2024-07-27T06:21:52Z INFO  iced_wgpu::window::compositor] Available adapters: [
        AdapterInfo {
            name: "AMD Radeon Graphics (radeonsi, gfx1103_r1, LLVM 17.0.6, DRM 3.54, 6.6.34)",
            vendor: 4098,
            device: 0,
            device_type: Other,
            driver: "",
            driver_info: "",
            backend: Gl,
        },
    ]
[2024-07-27T06:21:52Z DEBUG wgpu_hal::gles::adapter] Vendor: AMD
[2024-07-27T06:21:52Z DEBUG wgpu_hal::gles::adapter] Renderer: AMD Radeon Graphics (radeonsi, gfx1103_r1, LLVM 17.0.6, DRM 3.54, 6.6.34)
[2024-07-27T06:21:52Z DEBUG wgpu_hal::gles::adapter] Version: OpenGL ES 3.2 Mesa 24.0.7
[2024-07-27T06:21:52Z DEBUG wgpu_hal::gles::adapter] SL version: OpenGL ES GLSL ES 3.20
[2024-07-27T06:21:52Z DEBUG wgpu_hal::gles::adapter] Supported GL Extensions: {
        "GL_EXT_map_buffer_range",
        "GL_OES_standard_derivatives",
        "GL_EXT_polygon_offset_clamp",
        "GL_NV_alpha_to_coverage_dither_control",
        "GL_NV_image_formats",
        "GL_EXT_base_instance",
        "GL_EXT_texture_compression_s3tc",
        "GL_EXT_texture_shadow_lod",
        "GL_EXT_clip_cull_distance",
        "GL_KHR_robustness",
        "GL_EXT_texture_sRGB_decode",
        "GL_ANDROID_extension_pack_es31a",
        "GL_EXT_EGL_image_storage",
        "GL_EXT_texture_border_clamp",
        "GL_KHR_texture_compression_astc_sliced_3d",
        "GL_NV_read_depth",
        "GL_OES_texture_buffer",
        "GL_EXT_texture_filter_anisotropic",
        "GL_EXT_compressed_ETC1_RGB8_sub_texture",
        "GL_EXT_disjoint_timer_query",
        "GL_OES_tessellation_point_size",
        "GL_ANGLE_pack_reverse_row_order",
        "GL_EXT_shader_integer_mix",
        "GL_EXT_texture_compression_rgtc",
        "GL_OES_texture_border_clamp",
        "GL_OES_EGL_image_external",
        "GL_EXT_frag_depth",
        "GL_NV_pixel_buffer_object",
        "GL_EXT_tessellation_point_size",
        "GL_EXT_blend_minmax",
        "GL_KHR_robust_buffer_access_behavior",
        "GL_OES_texture_half_float_linear",
        "GL_NV_read_depth_stencil",
        "GL_EXT_memory_object",
        "GL_OES_texture_cube_map_array",
        "GL_OES_EGL_image",
        "GL_EXT_draw_elements_base_vertex",
        "GL_EXT_clip_control",
        "GL_EXT_geometry_point_size",
        "GL_EXT_debug_label",
        "GL_OES_compressed_ETC1_RGB8_texture",
        "GL_EXT_texture_format_BGRA8888",
        "GL_OES_depth_texture",
        "GL_EXT_texture_compression_dxt1",
        "GL_EXT_color_buffer_half_float",
        "GL_EXT_read_format_bgra",
        "GL_EXT_texture_mirror_clamp_to_edge",
        "GL_OES_geometry_point_size",
        "GL_OES_sample_variables",
        "GL_EXT_texture_compression_s3tc_srgb",
        "GL_NV_compute_shader_derivatives",
        "GL_EXT_blend_func_extended",
        "GL_MESA_bgra",
        "GL_OES_tessellation_shader",
        "GL_EXT_depth_clamp",
        "GL_OES_primitive_bounding_box",
        "GL_NV_generate_mipmap_sRGB",
        "GL_OES_copy_image",
        "GL_OES_sample_shading",
        "GL_EXT_buffer_storage",
        "GL_OES_vertex_half_float",
        "GL_NV_draw_buffers",
        "GL_OES_fbo_render_mipmap",
        "GL_EXT_semaphore",
        "GL_EXT_draw_buffers_indexed",
        "GL_KHR_context_flush_control",
        "GL_KHR_no_error",
        "GL_OES_packed_depth_stencil",
        "GL_OES_required_internalformat",
        "GL_EXT_window_rectangles",
        "GL_EXT_semaphore_fd",
        "GL_EXT_multi_draw_arrays",
        "GL_OES_depth_texture_cube_map",
        "GL_EXT_copy_image",
        "GL_EXT_shader_implicit_conversions",
        "GL_OES_geometry_shader",
        "GL_EXT_separate_shader_objects",
        "GL_EXT_draw_buffers",
        "GL_NV_texture_barrier",
        "GL_OES_EGL_sync",
        "GL_MESA_sampler_objects",
        "GL_OES_get_program_binary",
        "GL_OES_texture_float",
        "GL_EXT_texture_type_2_10_10_10_REV",
        "GL_NV_fbo_color_attachments",
        "GL_OES_texture_view",
        "GL_OES_vertex_array_object",
        "GL_KHR_debug",
        "GL_KHR_parallel_shader_compile",
        "GL_EXT_texture_query_lod",
        "GL_EXT_sRGB_write_control",
        "GL_MESA_shader_integer_functions",
        "GL_OES_shader_io_blocks",
        "GL_OES_texture_npot",
        "GL_EXT_texture_cube_map_array",
        "GL_EXT_texture_view",
        "GL_KHR_texture_compression_astc_ldr",
        "GL_EXT_texture_compression_bptc",
        "GL_EXT_demote_to_helper_invocation",
        "GL_MESA_texture_const_bandwidth",
        "GL_OES_texture_float_linear",
        "GL_OES_gpu_shader5",
        "GL_OES_EGL_image_external_essl3",
        "GL_APPLE_texture_max_level",
        "GL_ANGLE_texture_compression_dxt3",
        "GL_OES_texture_3D",
        "GL_EXT_memory_object_fd",
        "GL_OES_texture_stencil8",
        "GL_EXT_shader_io_blocks",
        "GL_EXT_geometry_shader",
        "GL_EXT_clear_texture",
        "GL_OES_texture_storage_multisample_2d_array",
        "GL_ANGLE_texture_compression_dxt5",
        "GL_EXT_float_blend",
        "GL_OES_element_index_uint",
        "GL_EXT_render_snorm",
        "GL_EXT_unpack_subimage",
        "GL_INTEL_blackhole_render",
        "GL_NV_conditional_render",
        "GL_OES_texture_half_float",
        "GL_EXT_texture_sRGB_RG8",
        "GL_EXT_gpu_shader5",
        "GL_EXT_robustness",
        "GL_EXT_color_buffer_float",
        "GL_EXT_texture_rg",
        "GL_OES_depth24",
        "GL_EXT_texture_sRGB_R8",
        "GL_APPLE_sync",
        "GL_EXT_shader_group_vote",
        "GL_EXT_tessellation_shader",
        "GL_NV_read_buffer",
        "GL_OES_draw_buffers_indexed",
        "GL_EXT_occlusion_query_boolean",
        "GL_EXT_texture_norm16",
        "GL_OES_shader_image_atomic",
        "GL_OES_shader_multisample_interpolation",
        "GL_OES_surfaceless_context",
        "GL_MESA_framebuffer_flip_y",
        "GL_NV_pack_subimage",
        "GL_OES_rgb8_rgba8",
        "GL_OES_mapbuffer",
        "GL_NV_shader_noperspective_interpolation",
        "GL_EXT_texture_buffer",
        "GL_KHR_blend_equation_advanced",
        "GL_NV_read_stencil",
        "GL_EXT_primitive_bounding_box",
        "GL_EXT_discard_framebuffer",
        "GL_OES_draw_elements_base_vertex",
        "GL_EXT_instanced_arrays",
        "GL_OES_stencil8",
        "GL_OES_viewport_array",
        "GL_EXT_draw_instanced",
    }
[2024-07-27T06:21:52Z INFO  wgpu_core::instance] Adapter Gl AdapterInfo { name: "AMD Radeon Graphics (radeonsi, gfx1103_r1, LLVM 17.0.6, DRM 3.54, 6.6.34)", vendor: 4098, device: 0, device_type: Other, driver: "", driver_info: "", backend: Gl }
[2024-07-27T06:21:52Z INFO  iced_wgpu::window::compositor] Selected: AdapterInfo {
        name: "AMD Radeon Graphics (radeonsi, gfx1103_r1, LLVM 17.0.6, DRM 3.54, 6.6.34)",
        vendor: 4098,
        device: 0,
        device_type: Other,
        driver: "",
        driver_info: "",
        backend: Gl,
    }
[2024-07-27T06:21:52Z INFO  iced_wgpu::window::compositor] Available formats: Copied {
        it: Iter(
            [
                Rgba8UnormSrgb,
                Bgra8UnormSrgb,
                Rgba8Unorm,
                Bgra8Unorm,
                Rgba16Float,
            ],
        ),
    }
[2024-07-27T06:21:52Z INFO  iced_wgpu::window::compositor] Available alpha modes: [
        Opaque,
    ]
[2024-07-27T06:21:52Z INFO  iced_wgpu::window::compositor] Selected format: Rgba8UnormSrgb with alpha mode: Auto
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [1] = Literal(AbstractInt(0)) : Value(Scalar(Scalar { kind: AbstractInt, width: 8 }))
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [2] = Literal(I32(0)) : Value(Scalar(Scalar { kind: Sint, width: 4 }))
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [3] = Literal(AbstractInt(1)) : Value(Scalar(Scalar { kind: AbstractInt, width: 8 }))
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [4] = Literal(I32(1)) : Value(Scalar(Scalar { kind: Sint, width: 4 }))
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [5] = Literal(AbstractInt(2)) : Value(Scalar(Scalar { kind: AbstractInt, width: 8 }))
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [6] = Literal(I32(2)) : Value(Scalar(Scalar { kind: Sint, width: 4 }))
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [7] = Literal(AbstractInt(3)) : Value(Scalar(Scalar { kind: AbstractInt, width: 8 }))
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [8] = Literal(I32(3)) : Value(Scalar(Scalar { kind: Sint, width: 4 }))
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [9] = Literal(AbstractInt(4)) : Value(Scalar(Scalar { kind: AbstractInt, width: 8 }))
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [10] = Literal(I32(4)) : Value(Scalar(Scalar { kind: Sint, width: 4 }))
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [11] = Literal(AbstractInt(5)) : Value(Scalar(Scalar { kind: AbstractInt, width: 8 }))
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [12] = Literal(I32(5)) : Value(Scalar(Scalar { kind: Sint, width: 4 }))
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [13] = Literal(AbstractInt(0)) : Value(Scalar(Scalar { kind: AbstractInt, width: 8 }))
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [14] = Literal(I32(0)) : Value(Scalar(Scalar { kind: Sint, width: 4 }))
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [15] = Literal(AbstractInt(1)) : Value(Scalar(Scalar { kind: AbstractInt, width: 8 }))
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [16] = Literal(I32(1)) : Value(Scalar(Scalar { kind: Sint, width: 4 }))
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [17] = Literal(AbstractInt(2)) : Value(Scalar(Scalar { kind: AbstractInt, width: 8 }))
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [18] = Literal(I32(2)) : Value(Scalar(Scalar { kind: Sint, width: 4 }))
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [19] = Literal(AbstractInt(0)) : Value(Scalar(Scalar { kind: AbstractInt, width: 8 }))
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [20] = Literal(I32(0)) : Value(Scalar(Scalar { kind: Sint, width: 4 }))
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [21] = Literal(AbstractInt(0)) : Value(Scalar(Scalar { kind: AbstractInt, width: 8 }))
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [22] = Literal(I32(0)) : Value(Scalar(Scalar { kind: Sint, width: 4 }))
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [23] = Literal(AbstractInt(0)) : Value(Scalar(Scalar { kind: AbstractInt, width: 8 }))
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [24] = Literal(I32(0)) : Value(Scalar(Scalar { kind: Sint, width: 4 }))
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [25] = Literal(AbstractInt(1)) : Value(Scalar(Scalar { kind: AbstractInt, width: 8 }))
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [26] = Literal(I32(1)) : Value(Scalar(Scalar { kind: Sint, width: 4 }))
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [27] = Literal(AbstractInt(0)) : Value(Scalar(Scalar { kind: AbstractInt, width: 8 }))
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [28] = Literal(I32(0)) : Value(Scalar(Scalar { kind: Sint, width: 4 }))
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [29] = Literal(AbstractInt(2)) : Value(Scalar(Scalar { kind: AbstractInt, width: 8 }))
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [30] = Literal(I32(2)) : Value(Scalar(Scalar { kind: Sint, width: 4 }))
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [31] = Literal(AbstractInt(1)) : Value(Scalar(Scalar { kind: AbstractInt, width: 8 }))
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [32] = Literal(I32(1)) : Value(Scalar(Scalar { kind: Sint, width: 4 }))
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [33] = Literal(AbstractInt(0)) : Value(Scalar(Scalar { kind: AbstractInt, width: 8 }))
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [1] = FunctionArgument(0) : Handle([3])
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [2] = Literal(AbstractFloat(0.04045)) : Value(Scalar(Scalar { kind: AbstractFloat, width: 8 }))
[2024-07-27T06:21:52Z DEBUG naga::front::wgsl::lower::conversion] wgsl automatic_conversion_consensus: ["f32", "{AbstractFloat}"]
[2024-07-27T06:21:52Z DEBUG naga::front::wgsl::lower::conversion]     consensus: "f32"
[2024-07-27T06:21:52Z DEBUG naga::proc::constant_evaluator] check: SubexpressionsAreNotConstant
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [3] = Literal(F32(0.04045)) : Value(Scalar(Scalar { kind: Float, width: 4 }))
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [4] = Binary { op: LessEqual, left: [1], right: [3] } : Value(Scalar(Scalar { kind: Bool, width: 1 }))
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [5] = Literal(AbstractFloat(12.92)) : Value(Scalar(Scalar { kind: AbstractFloat, width: 8 }))
[2024-07-27T06:21:52Z DEBUG naga::front::wgsl::lower::conversion] wgsl automatic_conversion_consensus: ["f32", "{AbstractFloat}"]
[2024-07-27T06:21:52Z DEBUG naga::front::wgsl::lower::conversion]     consensus: "f32"
[2024-07-27T06:21:52Z DEBUG naga::proc::constant_evaluator] check: SubexpressionsAreNotConstant
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [6] = Literal(F32(12.92)) : Value(Scalar(Scalar { kind: Float, width: 4 }))
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [7] = Binary { op: Divide, left: [1], right: [6] } : Handle([3])
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [8] = Literal(AbstractFloat(0.055)) : Value(Scalar(Scalar { kind: AbstractFloat, width: 8 }))
[2024-07-27T06:21:52Z DEBUG naga::front::wgsl::lower::conversion] wgsl automatic_conversion_consensus: ["f32", "{AbstractFloat}"]
[2024-07-27T06:21:52Z DEBUG naga::front::wgsl::lower::conversion]     consensus: "f32"
[2024-07-27T06:21:52Z DEBUG naga::proc::constant_evaluator] check: SubexpressionsAreNotConstant
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [9] = Literal(F32(0.055)) : Value(Scalar(Scalar { kind: Float, width: 4 }))
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [10] = Binary { op: Add, left: [1], right: [9] } : Handle([3])
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [11] = Literal(AbstractFloat(1.055)) : Value(Scalar(Scalar { kind: AbstractFloat, width: 8 }))
[2024-07-27T06:21:52Z DEBUG naga::front::wgsl::lower::conversion] wgsl automatic_conversion_consensus: ["f32", "{AbstractFloat}"]
[2024-07-27T06:21:52Z DEBUG naga::front::wgsl::lower::conversion]     consensus: "f32"
[2024-07-27T06:21:52Z DEBUG naga::proc::constant_evaluator] check: SubexpressionsAreNotConstant
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [12] = Literal(F32(1.055)) : Value(Scalar(Scalar { kind: Float, width: 4 }))
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [13] = Binary { op: Divide, left: [10], right: [12] } : Handle([3])
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [14] = Literal(AbstractFloat(2.4)) : Value(Scalar(Scalar { kind: AbstractFloat, width: 8 }))
[2024-07-27T06:21:52Z DEBUG naga::proc::constant_evaluator] check: SubexpressionsAreNotConstant
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [15] = Literal(F32(2.4)) : Value(Scalar(Scalar { kind: Float, width: 4 }))
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [16] = Math { fun: Pow, arg: [13], arg1: Some([15]), arg2: None, arg3: None } : Handle([3])
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [1] = FunctionArgument(0) : Handle([4])
[2024-07-27T06:21:52Z DEBUG naga::proc::constant_evaluator] check: SubexpressionsAreNotConstant
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [2] = AccessIndex { base: [1], index: 1 } : Handle([2])
[2024-07-27T06:21:52Z DEBUG naga::proc::constant_evaluator] check: SubexpressionsAreNotConstant
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [3] = LocalVariable([1]) : Value(Pointer { base: [2], space: Function })
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [4] = AccessIndex { base: [1], index: 2 } : Handle([1])
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [5] = Literal(U32(65535)) : Value(Scalar(Scalar { kind: Uint, width: 4 }))
[2024-07-27T06:21:52Z DEBUG naga::front::wgsl::lower::conversion] wgsl automatic_conversion_consensus: ["u32", "u32"]
[2024-07-27T06:21:52Z DEBUG naga::front::wgsl::lower::conversion]     consensus: "u32"
[2024-07-27T06:21:52Z DEBUG naga::proc::constant_evaluator] check: SubexpressionsAreNotConstant
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [6] = Binary { op: And, left: [4], right: [5] } : Handle([1])
[2024-07-27T06:21:52Z DEBUG naga::proc::constant_evaluator] check: SubexpressionsAreNotConstant
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [7] = AccessIndex { base: [1], index: 2 } : Handle([1])
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [8] = Literal(U32(4294901760)) : Value(Scalar(Scalar { kind: Uint, width: 4 }))
[2024-07-27T06:21:52Z DEBUG naga::front::wgsl::lower::conversion] wgsl automatic_conversion_consensus: ["u32", "u32"]
[2024-07-27T06:21:52Z DEBUG naga::front::wgsl::lower::conversion]     consensus: "u32"
[2024-07-27T06:21:52Z DEBUG naga::proc::constant_evaluator] check: SubexpressionsAreNotConstant
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [9] = Binary { op: And, left: [7], right: [8] } : Handle([1])
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [10] = Literal(U32(16)) : Value(Scalar(Scalar { kind: Uint, width: 4 }))
[2024-07-27T06:21:52Z DEBUG naga::proc::constant_evaluator] check: SubexpressionsAreNotConstant
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [11] = Binary { op: ShiftRight, left: [9], right: [10] } : Handle([1])
[2024-07-27T06:21:52Z DEBUG naga::proc::constant_evaluator] check: SubexpressionsAreNotConstant
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [12] = AccessIndex { base: [1], index: 4 } : Handle([1])
[2024-07-27T06:21:52Z DEBUG naga::proc::constant_evaluator] check: SubexpressionsAreNotConstant
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [13] = AccessIndex { base: [1], index: 3 } : Handle([1])
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [14] = Literal(U32(65535)) : Value(Scalar(Scalar { kind: Uint, width: 4 }))
[2024-07-27T06:21:52Z DEBUG naga::front::wgsl::lower::conversion] wgsl automatic_conversion_consensus: ["u32", "u32"]
[2024-07-27T06:21:52Z DEBUG naga::front::wgsl::lower::conversion]     consensus: "u32"
[2024-07-27T06:21:52Z DEBUG naga::proc::constant_evaluator] check: SubexpressionsAreNotConstant
[2024-07-27T06:21:52Z DEBUG naga::proc::constant_evaluator] check: SubexpressionsAreNotConstant
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [15] = Binary { op: And, left: [13], right: [14] } : Handle([1])
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [16] = AccessIndex { base: [1], index: 3 } : Handle([1])
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [17] = Literal(U32(4294901760)) : Value(Scalar(Scalar { kind: Uint, width: 4 }))
[2024-07-27T06:21:52Z DEBUG naga::front::wgsl::lower::conversion] wgsl automatic_conversion_consensus: ["u32", "u32"]
[2024-07-27T06:21:52Z DEBUG naga::front::wgsl::lower::conversion]     consensus: "u32"
[2024-07-27T06:21:52Z DEBUG naga::proc::constant_evaluator] check: SubexpressionsAreNotConstant
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [18] = Binary { op: And, left: [16], right: [17] } : Handle([1])
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [19] = Literal(U32(16)) : Value(Scalar(Scalar { kind: Uint, width: 4 }))
[2024-07-27T06:21:52Z DEBUG naga::proc::constant_evaluator] check: SubexpressionsAreNotConstant
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [20] = Binary { op: ShiftRight, left: [18], right: [19] } : Handle([1])
[2024-07-27T06:21:52Z DEBUG naga::proc::constant_evaluator] check: SubexpressionsAreNotConstant
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [21] = Compose { ty: [8], components: [[15], [20]] } : Handle([8])
[2024-07-27T06:21:52Z DEBUG naga::proc::constant_evaluator] check: SubexpressionsAreNotConstant
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [22] = LocalVariable([2]) : Value(Pointer { base: [8], space: Function })
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [23] = AccessIndex { base: [1], index: 0 } : Handle([1])
[2024-07-27T06:21:52Z DEBUG naga::proc::constant_evaluator] check: SubexpressionsAreNotConstant
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [24] = AccessIndex { base: [1], index: 0 } : Handle([1])
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [25] = Literal(U32(1)) : Value(Scalar(Scalar { kind: Uint, width: 4 }))
[2024-07-27T06:21:52Z DEBUG naga::front::wgsl::lower::conversion] wgsl automatic_conversion_consensus: ["u32", "u32"]
[2024-07-27T06:21:52Z DEBUG naga::front::wgsl::lower::conversion]     consensus: "u32"
[2024-07-27T06:21:52Z DEBUG naga::proc::constant_evaluator] check: SubexpressionsAreNotConstant
[2024-07-27T06:21:52Z DEBUG naga::proc::constant_evaluator] check: SubexpressionsAreNotConstant
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [26] = Binary { op: And, left: [24], right: [25] } : Handle([1])
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [27] = AccessIndex { base: [1], index: 0 } : Handle([1])
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [28] = Literal(U32(1)) : Value(Scalar(Scalar { kind: Uint, width: 4 }))
[2024-07-27T06:21:52Z DEBUG naga::proc::constant_evaluator] check: SubexpressionsAreNotConstant
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [29] = Binary { op: ShiftRight, left: [27], right: [28] } : Handle([1])
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [30] = Literal(U32(1)) : Value(Scalar(Scalar { kind: Uint, width: 4 }))
[2024-07-27T06:21:52Z DEBUG naga::front::wgsl::lower::conversion] wgsl automatic_conversion_consensus: ["u32", "u32"]
[2024-07-27T06:21:52Z DEBUG naga::front::wgsl::lower::conversion]     consensus: "u32"
[2024-07-27T06:21:52Z DEBUG naga::proc::constant_evaluator] check: SubexpressionsAreNotConstant
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [31] = Binary { op: And, left: [29], right: [30] } : Handle([1])
[2024-07-27T06:21:52Z DEBUG naga::proc::constant_evaluator] check: SubexpressionsAreNotConstant
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [32] = Compose { ty: [8], components: [[26], [31]] } : Handle([8])
[2024-07-27T06:21:52Z DEBUG naga::proc::constant_evaluator] check: SubexpressionsAreNotConstant
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [33] = Compose { ty: [8], components: [[6], [11]] } : Handle([8])
[2024-07-27T06:21:52Z DEBUG naga::front::wgsl::lower::conversion] wgsl automatic_conversion_consensus: ["vec2<u32>", "vec2<u32>"]
[2024-07-27T06:21:52Z DEBUG naga::front::wgsl::lower::conversion]     consensus: "u32"
[2024-07-27T06:21:52Z DEBUG naga::proc::constant_evaluator] check: SubexpressionsAreNotConstant
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [34] = Binary { op: Multiply, left: [33], right: [32] } : Handle([8])
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [35] = Load { pointer: [22] } : Handle([8])
[2024-07-27T06:21:52Z DEBUG naga::front::wgsl::lower::conversion] wgsl automatic_conversion_consensus: ["vec2<u32>", "vec2<u32>"]
[2024-07-27T06:21:52Z DEBUG naga::front::wgsl::lower::conversion]     consensus: "u32"
[2024-07-27T06:21:52Z DEBUG naga::proc::constant_evaluator] check: SubexpressionsAreNotConstant
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [36] = Binary { op: Add, left: [35], right: [34] } : Handle([8])
[2024-07-27T06:21:52Z DEBUG naga::proc::constant_evaluator] check: SubexpressionsAreNotConstant
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [37] = Load { pointer: [3] } : Handle([2])
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [38] = As { expr: [34], kind: Sint, convert: Some(4) } : Value(Vector { size: Bi, scalar: Scalar { kind: Sint, width: 4 } })
[2024-07-27T06:21:52Z DEBUG naga::front::wgsl::lower::conversion] wgsl automatic_conversion_consensus: ["vec2<i32>", "vec2<i32>"]
[2024-07-27T06:21:52Z DEBUG naga::front::wgsl::lower::conversion]     consensus: "i32"
[2024-07-27T06:21:52Z DEBUG naga::proc::constant_evaluator] check: SubexpressionsAreNotConstant
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [39] = Binary { op: Add, left: [37], right: [38] } : Handle([2])
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [40] = LocalVariable([3]) : Value(Pointer { base: [7], space: Function })
[2024-07-27T06:21:52Z DEBUG naga::proc::constant_evaluator] check: SubexpressionsAreNotConstant
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [41] = AccessIndex { base: [40], index: 0 } : Value(Pointer { base: [5], space: Function })
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [42] = Literal(AbstractFloat(2.0)) : Value(Scalar(Scalar { kind: AbstractFloat, width: 8 }))
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [43] = Load { pointer: [3] } : Handle([2])
[2024-07-27T06:21:52Z DEBUG naga::proc::constant_evaluator] check: SubexpressionsAreNotConstant
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [44] = As { expr: [43], kind: Float, convert: Some(4) } : Value(Vector { size: Bi, scalar: Scalar { kind: Float, width: 4 } })
[2024-07-27T06:21:52Z DEBUG naga::front::wgsl::lower::conversion] wgsl automatic_conversion_consensus: ["{AbstractFloat}", "vec2<f32>"]
[2024-07-27T06:21:52Z DEBUG naga::front::wgsl::lower::conversion]     consensus: "f32"
[2024-07-27T06:21:52Z DEBUG naga::proc::constant_evaluator] check: SubexpressionsAreNotConstant
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [45] = Literal(F32(2.0)) : Value(Scalar(Scalar { kind: Float, width: 4 }))
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [46] = Binary { op: Multiply, left: [45], right: [44] } : Value(Vector { size: Bi, scalar: Scalar { kind: Float, width: 4 } })
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [47] = GlobalVariable([4]) : Value(Pointer { base: [9], space: Uniform })
[2024-07-27T06:21:52Z DEBUG naga::proc::constant_evaluator] check: SubexpressionsAreNotConstant
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [48] = AccessIndex { base: [47], index: 0 } : Value(Pointer { base: [8], space: Uniform })
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [49] = Load { pointer: [48] } : Handle([8])
[2024-07-27T06:21:52Z DEBUG naga::proc::constant_evaluator] check: SubexpressionsAreNotConstant
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [50] = As { expr: [49], kind: Float, convert: Some(4) } : Value(Vector { size: Bi, scalar: Scalar { kind: Float, width: 4 } })
[2024-07-27T06:21:52Z DEBUG naga::front::wgsl::lower::conversion] wgsl automatic_conversion_consensus: ["vec2<f32>", "vec2<f32>"]
[2024-07-27T06:21:52Z DEBUG naga::front::wgsl::lower::conversion]     consensus: "f32"
[2024-07-27T06:21:52Z DEBUG naga::proc::constant_evaluator] check: SubexpressionsAreNotConstant
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [51] = Binary { op: Divide, left: [46], right: [50] } : Value(Vector { size: Bi, scalar: Scalar { kind: Float, width: 4 } })
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [52] = Literal(AbstractFloat(1.0)) : Value(Scalar(Scalar { kind: AbstractFloat, width: 8 }))
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [53] = Splat { size: Bi, value: [52] } : Value(Vector { size: Bi, scalar: Scalar { kind: AbstractFloat, width: 8 } })
[2024-07-27T06:21:52Z DEBUG naga::front::wgsl::lower::conversion] wgsl automatic_conversion_consensus: ["vec2<f32>", "vec2<{AbstractFloat}>"]
[2024-07-27T06:21:52Z DEBUG naga::front::wgsl::lower::conversion]     consensus: "f32"
[2024-07-27T06:21:52Z DEBUG naga::proc::constant_evaluator] check: SubexpressionsAreNotConstant
[2024-07-27T06:21:52Z DEBUG naga::proc::constant_evaluator] check: SubexpressionsAreNotConstant
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [54] = Literal(F32(1.0)) : Value(Scalar(Scalar { kind: Float, width: 4 }))
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [55] = Splat { size: Bi, value: [54] } : Value(Vector { size: Bi, scalar: Scalar { kind: Float, width: 4 } })
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [56] = Binary { op: Subtract, left: [51], right: [55] } : Value(Vector { size: Bi, scalar: Scalar { kind: Float, width: 4 } })
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [57] = AccessIndex { base: [1], index: 6 } : Handle([3])
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [58] = Literal(AbstractFloat(1.0)) : Value(Scalar(Scalar { kind: AbstractFloat, width: 8 }))
[2024-07-27T06:21:52Z DEBUG naga::proc::constant_evaluator] check: SubexpressionsAreNotConstant
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [59] = Literal(F32(1.0)) : Value(Scalar(Scalar { kind: Float, width: 4 }))
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [60] = Compose { ty: [5], components: [[56], [57], [59]] } : Handle([5])
[2024-07-27T06:21:52Z DEBUG naga::proc::constant_evaluator] check: SubexpressionsAreNotConstant
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [61] = AccessIndex { base: [40], index: 0 } : Value(Pointer { base: [5], space: Function })
[2024-07-27T06:21:52Z DEBUG naga::proc::constant_evaluator] check: SubexpressionsAreNotConstant
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [62] = AccessIndex { base: [61], index: 1 } : Value(ValuePointer { size: None, scalar: Scalar { kind: Float, width: 4 }, space: Function })
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [63] = Literal(AbstractFloat(1.0)) : Value(Scalar(Scalar { kind: AbstractFloat, width: 8 }))
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [64] = Literal(AbstractFloat(-1.0)) : Value(Scalar(Scalar { kind: AbstractFloat, width: 8 }))
[2024-07-27T06:21:52Z DEBUG naga::proc::constant_evaluator] check: SubexpressionsAreNotConstant
[2024-07-27T06:21:52Z DEBUG naga::proc::constant_evaluator] check: SubexpressionsAreNotConstant
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [65] = Literal(F32(-1.0)) : Value(Scalar(Scalar { kind: Float, width: 4 }))
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [66] = Load { pointer: [62] } : Value(Scalar(Scalar { kind: Float, width: 4 }))
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [67] = Binary { op: Multiply, left: [66], right: [65] } : Value(Scalar(Scalar { kind: Float, width: 4 }))
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [68] = AccessIndex { base: [1], index: 5 } : Handle([1])
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [69] = Literal(U32(65535)) : Value(Scalar(Scalar { kind: Uint, width: 4 }))
[2024-07-27T06:21:52Z DEBUG naga::front::wgsl::lower::conversion] wgsl automatic_conversion_consensus: ["u32", "u32"]
[2024-07-27T06:21:52Z DEBUG naga::front::wgsl::lower::conversion]     consensus: "u32"
[2024-07-27T06:21:52Z DEBUG naga::proc::constant_evaluator] check: SubexpressionsAreNotConstant
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [70] = Binary { op: And, left: [68], right: [69] } : Handle([1])
[2024-07-27T06:21:52Z DEBUG naga::proc::constant_evaluator] check: SubexpressionsAreNotConstant
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [71] = AccessIndex { base: [1], index: 5 } : Handle([1])
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [72] = Literal(U32(4294901760)) : Value(Scalar(Scalar { kind: Uint, width: 4 }))
[2024-07-27T06:21:52Z DEBUG naga::front::wgsl::lower::conversion] wgsl automatic_conversion_consensus: ["u32", "u32"]
[2024-07-27T06:21:52Z DEBUG naga::front::wgsl::lower::conversion]     consensus: "u32"
[2024-07-27T06:21:52Z DEBUG naga::proc::constant_evaluator] check: SubexpressionsAreNotConstant
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [73] = Binary { op: And, left: [71], right: [72] } : Handle([1])
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [74] = Literal(U32(16)) : Value(Scalar(Scalar { kind: Uint, width: 4 }))
[2024-07-27T06:21:52Z DEBUG naga::proc::constant_evaluator] check: SubexpressionsAreNotConstant
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [75] = Binary { op: ShiftRight, left: [73], right: [74] } : Handle([1])
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [34] = Literal(I32(0)) : Value(Scalar(Scalar { kind: Sint, width: 4 }))
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [35] = Literal(U32(0)) : Value(Scalar(Scalar { kind: Uint, width: 4 }))
[2024-07-27T06:21:52Z DEBUG naga::proc::constant_evaluator] check: SubexpressionsAreNotConstant
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [76] = AccessIndex { base: [40], index: 1 } : Value(Pointer { base: [5], space: Function })
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [77] = Literal(U32(16711680)) : Value(Scalar(Scalar { kind: Uint, width: 4 }))
[2024-07-27T06:21:52Z DEBUG naga::front::wgsl::lower::conversion] wgsl automatic_conversion_consensus: ["u32", "u32"]
[2024-07-27T06:21:52Z DEBUG naga::front::wgsl::lower::conversion]     consensus: "u32"
[2024-07-27T06:21:52Z DEBUG naga::proc::constant_evaluator] check: SubexpressionsAreNotConstant
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [78] = Binary { op: And, left: [12], right: [77] } : Handle([1])
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [79] = Literal(U32(16)) : Value(Scalar(Scalar { kind: Uint, width: 4 }))
[2024-07-27T06:21:52Z DEBUG naga::proc::constant_evaluator] check: SubexpressionsAreNotConstant
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [80] = Binary { op: ShiftRight, left: [78], right: [79] } : Handle([1])
[2024-07-27T06:21:52Z DEBUG naga::proc::constant_evaluator] check: SubexpressionsAreNotConstant
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [81] = As { expr: [80], kind: Float, convert: Some(4) } : Value(Scalar(Scalar { kind: Float, width: 4 }))
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [82] = Literal(AbstractFloat(255.0)) : Value(Scalar(Scalar { kind: AbstractFloat, width: 8 }))
[2024-07-27T06:21:52Z DEBUG naga::front::wgsl::lower::conversion] wgsl automatic_conversion_consensus: ["f32", "{AbstractFloat}"]
[2024-07-27T06:21:52Z DEBUG naga::front::wgsl::lower::conversion]     consensus: "f32"
[2024-07-27T06:21:52Z DEBUG naga::proc::constant_evaluator] check: SubexpressionsAreNotConstant
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [83] = Literal(F32(255.0)) : Value(Scalar(Scalar { kind: Float, width: 4 }))
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [84] = Binary { op: Divide, left: [81], right: [83] } : Value(Scalar(Scalar { kind: Float, width: 4 }))
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [85] = Literal(U32(65280)) : Value(Scalar(Scalar { kind: Uint, width: 4 }))
[2024-07-27T06:21:52Z DEBUG naga::front::wgsl::lower::conversion] wgsl automatic_conversion_consensus: ["u32", "u32"]
[2024-07-27T06:21:52Z DEBUG naga::front::wgsl::lower::conversion]     consensus: "u32"
[2024-07-27T06:21:52Z DEBUG naga::proc::constant_evaluator] check: SubexpressionsAreNotConstant
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [86] = Binary { op: And, left: [12], right: [85] } : Handle([1])
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [87] = Literal(U32(8)) : Value(Scalar(Scalar { kind: Uint, width: 4 }))
[2024-07-27T06:21:52Z DEBUG naga::proc::constant_evaluator] check: SubexpressionsAreNotConstant
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [88] = Binary { op: ShiftRight, left: [86], right: [87] } : Handle([1])
[2024-07-27T06:21:52Z DEBUG naga::proc::constant_evaluator] check: SubexpressionsAreNotConstant
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [89] = As { expr: [88], kind: Float, convert: Some(4) } : Value(Scalar(Scalar { kind: Float, width: 4 }))
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [90] = Literal(AbstractFloat(255.0)) : Value(Scalar(Scalar { kind: AbstractFloat, width: 8 }))
[2024-07-27T06:21:52Z DEBUG naga::front::wgsl::lower::conversion] wgsl automatic_conversion_consensus: ["f32", "{AbstractFloat}"]
[2024-07-27T06:21:52Z DEBUG naga::front::wgsl::lower::conversion]     consensus: "f32"
[2024-07-27T06:21:52Z DEBUG naga::proc::constant_evaluator] check: SubexpressionsAreNotConstant
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [91] = Literal(F32(255.0)) : Value(Scalar(Scalar { kind: Float, width: 4 }))
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [92] = Binary { op: Divide, left: [89], right: [91] } : Value(Scalar(Scalar { kind: Float, width: 4 }))
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [93] = Literal(U32(255)) : Value(Scalar(Scalar { kind: Uint, width: 4 }))
[2024-07-27T06:21:52Z DEBUG naga::front::wgsl::lower::conversion] wgsl automatic_conversion_consensus: ["u32", "u32"]
[2024-07-27T06:21:52Z DEBUG naga::front::wgsl::lower::conversion]     consensus: "u32"
[2024-07-27T06:21:52Z DEBUG naga::proc::constant_evaluator] check: SubexpressionsAreNotConstant
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [94] = Binary { op: And, left: [12], right: [93] } : Handle([1])
[2024-07-27T06:21:52Z DEBUG naga::proc::constant_evaluator] check: SubexpressionsAreNotConstant
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [95] = As { expr: [94], kind: Float, convert: Some(4) } : Value(Scalar(Scalar { kind: Float, width: 4 }))
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [96] = Literal(AbstractFloat(255.0)) : Value(Scalar(Scalar { kind: AbstractFloat, width: 8 }))
[2024-07-27T06:21:52Z DEBUG naga::front::wgsl::lower::conversion] wgsl automatic_conversion_consensus: ["f32", "{AbstractFloat}"]
[2024-07-27T06:21:52Z DEBUG naga::front::wgsl::lower::conversion]     consensus: "f32"
[2024-07-27T06:21:52Z DEBUG naga::proc::constant_evaluator] check: SubexpressionsAreNotConstant
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [97] = Literal(F32(255.0)) : Value(Scalar(Scalar { kind: Float, width: 4 }))
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [98] = Binary { op: Divide, left: [95], right: [97] } : Value(Scalar(Scalar { kind: Float, width: 4 }))
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [99] = Literal(U32(4278190080)) : Value(Scalar(Scalar { kind: Uint, width: 4 }))
[2024-07-27T06:21:52Z DEBUG naga::front::wgsl::lower::conversion] wgsl automatic_conversion_consensus: ["u32", "u32"]
[2024-07-27T06:21:52Z DEBUG naga::front::wgsl::lower::conversion]     consensus: "u32"
[2024-07-27T06:21:52Z DEBUG naga::proc::constant_evaluator] check: SubexpressionsAreNotConstant
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [100] = Binary { op: And, left: [12], right: [99] } : Handle([1])
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [101] = Literal(U32(24)) : Value(Scalar(Scalar { kind: Uint, width: 4 }))
[2024-07-27T06:21:52Z DEBUG naga::proc::constant_evaluator] check: SubexpressionsAreNotConstant
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [102] = Binary { op: ShiftRight, left: [100], right: [101] } : Handle([1])
[2024-07-27T06:21:52Z DEBUG naga::proc::constant_evaluator] check: SubexpressionsAreNotConstant
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [103] = As { expr: [102], kind: Float, convert: Some(4) } : Value(Scalar(Scalar { kind: Float, width: 4 }))
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [104] = Literal(AbstractFloat(255.0)) : Value(Scalar(Scalar { kind: AbstractFloat, width: 8 }))
[2024-07-27T06:21:52Z DEBUG naga::front::wgsl::lower::conversion] wgsl automatic_conversion_consensus: ["f32", "{AbstractFloat}"]
[2024-07-27T06:21:52Z DEBUG naga::front::wgsl::lower::conversion]     consensus: "f32"
[2024-07-27T06:21:52Z DEBUG naga::proc::constant_evaluator] check: SubexpressionsAreNotConstant
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [105] = Literal(F32(255.0)) : Value(Scalar(Scalar { kind: Float, width: 4 }))
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [106] = Binary { op: Divide, left: [103], right: [105] } : Value(Scalar(Scalar { kind: Float, width: 4 }))
[2024-07-27T06:21:52Z DEBUG naga::proc::constant_evaluator] check: SubexpressionsAreNotConstant
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [107] = Compose { ty: [5], components: [[84], [92], [98], [106]] } : Handle([5])
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [36] = Literal(U32(1)) : Value(Scalar(Scalar { kind: Uint, width: 4 }))
[2024-07-27T06:21:52Z DEBUG naga::proc::constant_evaluator] check: SubexpressionsAreNotConstant
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [108] = AccessIndex { base: [40], index: 1 } : Value(Pointer { base: [5], space: Function })
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [109] = Literal(U32(16711680)) : Value(Scalar(Scalar { kind: Uint, width: 4 }))
[2024-07-27T06:21:52Z DEBUG naga::front::wgsl::lower::conversion] wgsl automatic_conversion_consensus: ["u32", "u32"]
[2024-07-27T06:21:52Z DEBUG naga::front::wgsl::lower::conversion]     consensus: "u32"
[2024-07-27T06:21:52Z DEBUG naga::proc::constant_evaluator] check: SubexpressionsAreNotConstant
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [110] = Binary { op: And, left: [12], right: [109] } : Handle([1])
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [111] = Literal(U32(16)) : Value(Scalar(Scalar { kind: Uint, width: 4 }))
[2024-07-27T06:21:52Z DEBUG naga::proc::constant_evaluator] check: SubexpressionsAreNotConstant
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [112] = Binary { op: ShiftRight, left: [110], right: [111] } : Handle([1])
[2024-07-27T06:21:52Z DEBUG naga::proc::constant_evaluator] check: SubexpressionsAreNotConstant
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [113] = As { expr: [112], kind: Float, convert: Some(4) } : Value(Scalar(Scalar { kind: Float, width: 4 }))
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [114] = Literal(AbstractFloat(255.0)) : Value(Scalar(Scalar { kind: AbstractFloat, width: 8 }))
[2024-07-27T06:21:52Z DEBUG naga::front::wgsl::lower::conversion] wgsl automatic_conversion_consensus: ["f32", "{AbstractFloat}"]
[2024-07-27T06:21:52Z DEBUG naga::front::wgsl::lower::conversion]     consensus: "f32"
[2024-07-27T06:21:52Z DEBUG naga::proc::constant_evaluator] check: SubexpressionsAreNotConstant
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [115] = Literal(F32(255.0)) : Value(Scalar(Scalar { kind: Float, width: 4 }))
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [116] = Binary { op: Divide, left: [113], right: [115] } : Value(Scalar(Scalar { kind: Float, width: 4 }))
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [117] = CallResult([1]) : Handle([3])
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [118] = Literal(U32(65280)) : Value(Scalar(Scalar { kind: Uint, width: 4 }))
[2024-07-27T06:21:52Z DEBUG naga::front::wgsl::lower::conversion] wgsl automatic_conversion_consensus: ["u32", "u32"]
[2024-07-27T06:21:52Z DEBUG naga::front::wgsl::lower::conversion]     consensus: "u32"
[2024-07-27T06:21:52Z DEBUG naga::proc::constant_evaluator] check: SubexpressionsAreNotConstant
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [119] = Binary { op: And, left: [12], right: [118] } : Handle([1])
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [120] = Literal(U32(8)) : Value(Scalar(Scalar { kind: Uint, width: 4 }))
[2024-07-27T06:21:52Z DEBUG naga::proc::constant_evaluator] check: SubexpressionsAreNotConstant
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [121] = Binary { op: ShiftRight, left: [119], right: [120] } : Handle([1])
[2024-07-27T06:21:52Z DEBUG naga::proc::constant_evaluator] check: SubexpressionsAreNotConstant
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [122] = As { expr: [121], kind: Float, convert: Some(4) } : Value(Scalar(Scalar { kind: Float, width: 4 }))
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [123] = Literal(AbstractFloat(255.0)) : Value(Scalar(Scalar { kind: AbstractFloat, width: 8 }))
[2024-07-27T06:21:52Z DEBUG naga::front::wgsl::lower::conversion] wgsl automatic_conversion_consensus: ["f32", "{AbstractFloat}"]
[2024-07-27T06:21:52Z DEBUG naga::front::wgsl::lower::conversion]     consensus: "f32"
[2024-07-27T06:21:52Z DEBUG naga::proc::constant_evaluator] check: SubexpressionsAreNotConstant
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [124] = Literal(F32(255.0)) : Value(Scalar(Scalar { kind: Float, width: 4 }))
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [125] = Binary { op: Divide, left: [122], right: [124] } : Value(Scalar(Scalar { kind: Float, width: 4 }))
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [126] = CallResult([1]) : Handle([3])
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [127] = Literal(U32(255)) : Value(Scalar(Scalar { kind: Uint, width: 4 }))
[2024-07-27T06:21:52Z DEBUG naga::front::wgsl::lower::conversion] wgsl automatic_conversion_consensus: ["u32", "u32"]
[2024-07-27T06:21:52Z DEBUG naga::front::wgsl::lower::conversion]     consensus: "u32"
[2024-07-27T06:21:52Z DEBUG naga::proc::constant_evaluator] check: SubexpressionsAreNotConstant
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [128] = Binary { op: And, left: [12], right: [127] } : Handle([1])
[2024-07-27T06:21:52Z DEBUG naga::proc::constant_evaluator] check: SubexpressionsAreNotConstant
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [129] = As { expr: [128], kind: Float, convert: Some(4) } : Value(Scalar(Scalar { kind: Float, width: 4 }))
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [130] = Literal(AbstractFloat(255.0)) : Value(Scalar(Scalar { kind: AbstractFloat, width: 8 }))
[2024-07-27T06:21:52Z DEBUG naga::front::wgsl::lower::conversion] wgsl automatic_conversion_consensus: ["f32", "{AbstractFloat}"]
[2024-07-27T06:21:52Z DEBUG naga::front::wgsl::lower::conversion]     consensus: "f32"
[2024-07-27T06:21:52Z DEBUG naga::proc::constant_evaluator] check: SubexpressionsAreNotConstant
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [131] = Literal(F32(255.0)) : Value(Scalar(Scalar { kind: Float, width: 4 }))
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [132] = Binary { op: Divide, left: [129], right: [131] } : Value(Scalar(Scalar { kind: Float, width: 4 }))
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [133] = CallResult([1]) : Handle([3])
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [134] = Literal(U32(4278190080)) : Value(Scalar(Scalar { kind: Uint, width: 4 }))
[2024-07-27T06:21:52Z DEBUG naga::front::wgsl::lower::conversion] wgsl automatic_conversion_consensus: ["u32", "u32"]
[2024-07-27T06:21:52Z DEBUG naga::front::wgsl::lower::conversion]     consensus: "u32"
[2024-07-27T06:21:52Z DEBUG naga::proc::constant_evaluator] check: SubexpressionsAreNotConstant
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [135] = Binary { op: And, left: [12], right: [134] } : Handle([1])
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [136] = Literal(U32(24)) : Value(Scalar(Scalar { kind: Uint, width: 4 }))
[2024-07-27T06:21:52Z DEBUG naga::proc::constant_evaluator] check: SubexpressionsAreNotConstant
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [137] = Binary { op: ShiftRight, left: [135], right: [136] } : Handle([1])
[2024-07-27T06:21:52Z DEBUG naga::proc::constant_evaluator] check: SubexpressionsAreNotConstant
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [138] = As { expr: [137], kind: Float, convert: Some(4) } : Value(Scalar(Scalar { kind: Float, width: 4 }))
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [139] = Literal(AbstractFloat(255.0)) : Value(Scalar(Scalar { kind: AbstractFloat, width: 8 }))
[2024-07-27T06:21:52Z DEBUG naga::front::wgsl::lower::conversion] wgsl automatic_conversion_consensus: ["f32", "{AbstractFloat}"]
[2024-07-27T06:21:52Z DEBUG naga::front::wgsl::lower::conversion]     consensus: "f32"
[2024-07-27T06:21:52Z DEBUG naga::proc::constant_evaluator] check: SubexpressionsAreNotConstant
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [140] = Literal(F32(255.0)) : Value(Scalar(Scalar { kind: Float, width: 4 }))
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [141] = Binary { op: Divide, left: [138], right: [140] } : Value(Scalar(Scalar { kind: Float, width: 4 }))
[2024-07-27T06:21:52Z DEBUG naga::proc::constant_evaluator] check: SubexpressionsAreNotConstant
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [142] = Compose { ty: [5], components: [[117], [126], [133], [141]] } : Handle([5])
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [143] = Literal(U32(0)) : Value(Scalar(Scalar { kind: Uint, width: 4 }))
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [144] = Splat { size: Bi, value: [143] } : Value(Vector { size: Bi, scalar: Scalar { kind: Uint, width: 4 } })
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [37] = Literal(U32(0)) : Value(Scalar(Scalar { kind: Uint, width: 4 }))
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [145] = LocalVariable([4]) : Value(Pointer { base: [8], space: Function })
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [146] = GlobalVariable([1]) : Handle([10])
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [147] = ImageQuery { image: [146], query: Size { level: None } } : Value(Vector { size: Bi, scalar: Scalar { kind: Uint, width: 4 } })
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [38] = Literal(U32(1)) : Value(Scalar(Scalar { kind: Uint, width: 4 }))
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [148] = GlobalVariable([2]) : Handle([10])
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [149] = ImageQuery { image: [148], query: Size { level: None } } : Value(Vector { size: Bi, scalar: Scalar { kind: Uint, width: 4 } })
[2024-07-27T06:21:52Z DEBUG naga::proc::constant_evaluator] check: SubexpressionsAreNotConstant
[2024-07-27T06:21:52Z DEBUG naga::proc::constant_evaluator] check: SubexpressionsAreNotConstant
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [150] = AccessIndex { base: [40], index: 3 } : Value(Pointer { base: [1], space: Function })
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [151] = AccessIndex { base: [40], index: 2 } : Value(Pointer { base: [6], space: Function })
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [152] = Load { pointer: [22] } : Handle([8])
[2024-07-27T06:21:52Z DEBUG naga::proc::constant_evaluator] check: SubexpressionsAreNotConstant
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [153] = As { expr: [152], kind: Float, convert: Some(4) } : Value(Vector { size: Bi, scalar: Scalar { kind: Float, width: 4 } })
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [154] = Load { pointer: [145] } : Handle([8])
[2024-07-27T06:21:52Z DEBUG naga::proc::constant_evaluator] check: SubexpressionsAreNotConstant
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [155] = As { expr: [154], kind: Float, convert: Some(4) } : Value(Vector { size: Bi, scalar: Scalar { kind: Float, width: 4 } })
[2024-07-27T06:21:52Z DEBUG naga::front::wgsl::lower::conversion] wgsl automatic_conversion_consensus: ["vec2<f32>", "vec2<f32>"]
[2024-07-27T06:21:52Z DEBUG naga::front::wgsl::lower::conversion]     consensus: "f32"
[2024-07-27T06:21:52Z DEBUG naga::proc::constant_evaluator] check: SubexpressionsAreNotConstant
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [156] = Binary { op: Divide, left: [153], right: [155] } : Value(Vector { size: Bi, scalar: Scalar { kind: Float, width: 4 } })
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [157] = Load { pointer: [40] } : Handle([7])
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [39] = Literal(AbstractInt(0)) : Value(Scalar(Scalar { kind: AbstractInt, width: 8 }))
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [1] = FunctionArgument(0) : Handle([7])
[2024-07-27T06:21:52Z DEBUG naga::proc::constant_evaluator] check: SubexpressionsAreNotConstant
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [2] = AccessIndex { base: [1], index: 3 } : Handle([1])
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [40] = Literal(I32(0)) : Value(Scalar(Scalar { kind: Sint, width: 4 }))
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [41] = Literal(U32(0)) : Value(Scalar(Scalar { kind: Uint, width: 4 }))
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [3] = GlobalVariable([1]) : Handle([10])
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [4] = GlobalVariable([3]) : Handle([11])
[2024-07-27T06:21:52Z DEBUG naga::proc::constant_evaluator] check: SubexpressionsAreNotConstant
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [5] = AccessIndex { base: [1], index: 2 } : Handle([6])
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [6] = Literal(AbstractFloat(0.0)) : Value(Scalar(Scalar { kind: AbstractFloat, width: 8 }))
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [7] = Literal(F32(0.0)) : Value(Scalar(Scalar { kind: Float, width: 4 }))
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [8] = ImageSample { image: [3], sampler: [4], gather: None, coordinate: [5], array_index: None, offset: None, level: Exact([7]), depth_ref: None } : Value(Vector { size: Quad, scalar: Scalar { kind: Float, width: 4 } })
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [42] = Literal(U32(1)) : Value(Scalar(Scalar { kind: Uint, width: 4 }))
[2024-07-27T06:21:52Z DEBUG naga::proc::constant_evaluator] check: SubexpressionsAreNotConstant
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [9] = AccessIndex { base: [1], index: 1 } : Handle([5])
[2024-07-27T06:21:52Z DEBUG naga::proc::constant_evaluator] check: SubexpressionsAreNotConstant
[2024-07-27T06:21:52Z DEBUG naga::proc::constant_evaluator] check: SubexpressionsAreNotConstant
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [10] = Swizzle { size: Tri, vector: [9], pattern: [X, Y, Z, X] } : Value(Vector { size: Tri, scalar: Scalar { kind: Float, width: 4 } })
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [11] = AccessIndex { base: [1], index: 1 } : Handle([5])
[2024-07-27T06:21:52Z DEBUG naga::proc::constant_evaluator] check: SubexpressionsAreNotConstant
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [12] = AccessIndex { base: [11], index: 3 } : Value(Scalar(Scalar { kind: Float, width: 4 }))
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [13] = GlobalVariable([2]) : Handle([10])
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [14] = GlobalVariable([3]) : Handle([11])
[2024-07-27T06:21:52Z DEBUG naga::proc::constant_evaluator] check: SubexpressionsAreNotConstant
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [15] = AccessIndex { base: [1], index: 2 } : Handle([6])
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [16] = Literal(AbstractFloat(0.0)) : Value(Scalar(Scalar { kind: AbstractFloat, width: 8 }))
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [17] = Literal(F32(0.0)) : Value(Scalar(Scalar { kind: Float, width: 4 }))
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [18] = ImageSample { image: [13], sampler: [14], gather: None, coordinate: [15], array_index: None, offset: None, level: Exact([17]), depth_ref: None } : Value(Vector { size: Quad, scalar: Scalar { kind: Float, width: 4 } })
[2024-07-27T06:21:52Z DEBUG naga::proc::constant_evaluator] check: SubexpressionsAreNotConstant
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [19] = AccessIndex { base: [18], index: 0 } : Value(Scalar(Scalar { kind: Float, width: 4 }))
[2024-07-27T06:21:52Z DEBUG naga::front::wgsl::lower::conversion] wgsl automatic_conversion_consensus: ["f32", "f32"]
[2024-07-27T06:21:52Z DEBUG naga::front::wgsl::lower::conversion]     consensus: "f32"
[2024-07-27T06:21:52Z DEBUG naga::proc::constant_evaluator] check: SubexpressionsAreNotConstant
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [20] = Binary { op: Multiply, left: [12], right: [19] } : Value(Scalar(Scalar { kind: Float, width: 4 }))
[2024-07-27T06:21:52Z DEBUG naga::proc::constant_evaluator] check: SubexpressionsAreNotConstant
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [21] = Compose { ty: [5], components: [[10], [20]] } : Handle([5])
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [22] = Literal(AbstractFloat(0.0)) : Value(Scalar(Scalar { kind: AbstractFloat, width: 8 }))
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [23] = Literal(F32(0.0)) : Value(Scalar(Scalar { kind: Float, width: 4 }))
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [24] = Splat { size: Quad, value: [23] } : Value(Vector { size: Quad, scalar: Scalar { kind: Float, width: 4 } })
[2024-07-27T06:21:52Z DEBUG naga::valid::interface] var GlobalVariable { name: Some("color_atlas_texture"), space: Handle, binding: Some(ResourceBinding { group: 0, binding: 0 }), ty: [10], init: None }
[2024-07-27T06:21:52Z DEBUG naga::valid::interface] var GlobalVariable { name: Some("mask_atlas_texture"), space: Handle, binding: Some(ResourceBinding { group: 0, binding: 1 }), ty: [10], init: None }
[2024-07-27T06:21:52Z DEBUG naga::valid::interface] var GlobalVariable { name: Some("atlas_sampler"), space: Handle, binding: Some(ResourceBinding { group: 0, binding: 2 }), ty: [11], init: None }
[2024-07-27T06:21:52Z DEBUG naga::valid::interface] var GlobalVariable { name: Some("params"), space: Uniform, binding: Some(ResourceBinding { group: 1, binding: 0 }), ty: [9], init: None }
[2024-07-27T06:21:52Z DEBUG naga::valid::function] var LocalVariable { name: Some("pos"), ty: [2], init: None }
[2024-07-27T06:21:52Z DEBUG naga::valid::function] var LocalVariable { name: Some("uv"), ty: [8], init: None }
[2024-07-27T06:21:52Z DEBUG naga::valid::function] var LocalVariable { name: Some("vert_output"), ty: [7], init: None }
[2024-07-27T06:21:52Z DEBUG naga::valid::function] var LocalVariable { name: Some("dim"), ty: [8], init: Some([130]) }
[2024-07-27T06:21:52Z DEBUG wgpu_core::device::resource] Create view for texture Id(0,1,gl) filters usages to TextureUses(RESOURCE)
[2024-07-27T06:21:52Z DEBUG wgpu_core::device::resource] Create view for texture Id(1,1,gl) filters usages to TextureUses(RESOURCE)
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [1] = Literal(AbstractInt(0)) : Value(Scalar(Scalar { kind: AbstractInt, width: 8 }))
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [2] = Literal(I32(0)) : Value(Scalar(Scalar { kind: Sint, width: 4 }))
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [3] = Literal(AbstractInt(0)) : Value(Scalar(Scalar { kind: AbstractInt, width: 8 }))
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [1] = FunctionArgument(0) : Handle([4])
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [2] = FunctionArgument(1) : Handle([4])
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [3] = FunctionArgument(2) : Handle([2])
[2024-07-27T06:21:52Z DEBUG naga::proc::constant_evaluator] check: SubexpressionsAreNotConstant
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [4] = Math { fun: Abs, arg: [1], arg1: None, arg2: None, arg3: None } : Handle([4])
[2024-07-27T06:21:52Z DEBUG naga::front::wgsl::lower::conversion] wgsl automatic_conversion_consensus: ["vec2<f32>", "vec2<f32>"]
[2024-07-27T06:21:52Z DEBUG naga::front::wgsl::lower::conversion]     consensus: "f32"
[2024-07-27T06:21:52Z DEBUG naga::proc::constant_evaluator] check: SubexpressionsAreNotConstant
[2024-07-27T06:21:52Z DEBUG naga::proc::constant_evaluator] check: SubexpressionsAreNotConstant
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [5] = Binary { op: Subtract, left: [4], right: [2] } : Handle([4])
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [6] = Compose { ty: [4], components: [[3], [3]] } : Handle([4])
[2024-07-27T06:21:52Z DEBUG naga::front::wgsl::lower::conversion] wgsl automatic_conversion_consensus: ["vec2<f32>", "vec2<f32>"]
[2024-07-27T06:21:52Z DEBUG naga::front::wgsl::lower::conversion]     consensus: "f32"
[2024-07-27T06:21:52Z DEBUG naga::proc::constant_evaluator] check: SubexpressionsAreNotConstant
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [7] = Binary { op: Add, left: [5], right: [6] } : Handle([4])
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [8] = Literal(AbstractFloat(0.0)) : Value(Scalar(Scalar { kind: AbstractFloat, width: 8 }))
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [9] = Literal(AbstractFloat(0.0)) : Value(Scalar(Scalar { kind: AbstractFloat, width: 8 }))
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [10] = Literal(F32(0.0)) : Value(Scalar(Scalar { kind: Float, width: 4 }))
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [11] = Literal(F32(0.0)) : Value(Scalar(Scalar { kind: Float, width: 4 }))
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [12] = Compose { ty: [4], components: [[10], [11]] } : Handle([4])
[2024-07-27T06:21:52Z DEBUG naga::proc::constant_evaluator] check: SubexpressionsAreNotConstant
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [13] = Math { fun: Max, arg: [7], arg1: Some([12]), arg2: None, arg3: None } : Handle([4])
[2024-07-27T06:21:52Z DEBUG naga::proc::constant_evaluator] check: SubexpressionsAreNotConstant
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [14] = Math { fun: Length, arg: [13], arg1: None, arg2: None, arg3: None } : Value(Scalar(Scalar { kind: Float, width: 4 }))
[2024-07-27T06:21:52Z DEBUG naga::front::wgsl::lower::conversion] wgsl automatic_conversion_consensus: ["f32", "f32"]
[2024-07-27T06:21:52Z DEBUG naga::front::wgsl::lower::conversion]     consensus: "f32"
[2024-07-27T06:21:52Z DEBUG naga::proc::constant_evaluator] check: SubexpressionsAreNotConstant
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [15] = Binary { op: Subtract, left: [14], right: [3] } : Value(Scalar(Scalar { kind: Float, width: 4 }))
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [1] = FunctionArgument(0) : Handle([4])
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [2] = FunctionArgument(1) : Handle([4])
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [3] = FunctionArgument(2) : Handle([4])
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [4] = FunctionArgument(3) : Handle([2])
[2024-07-27T06:21:52Z DEBUG naga::proc::constant_evaluator] check: SubexpressionsAreNotConstant
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [5] = Compose { ty: [4], components: [[4], [4]] } : Handle([4])
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [6] = Literal(AbstractFloat(2.0)) : Value(Scalar(Scalar { kind: AbstractFloat, width: 8 }))
[2024-07-27T06:21:52Z DEBUG naga::front::wgsl::lower::conversion] wgsl automatic_conversion_consensus: ["vec2<f32>", "{AbstractFloat}"]
[2024-07-27T06:21:52Z DEBUG naga::front::wgsl::lower::conversion]     consensus: "f32"
[2024-07-27T06:21:52Z DEBUG naga::proc::constant_evaluator] check: SubexpressionsAreNotConstant
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [7] = Literal(F32(2.0)) : Value(Scalar(Scalar { kind: Float, width: 4 }))
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [8] = Binary { op: Multiply, left: [5], right: [7] } : Handle([4])
[2024-07-27T06:21:52Z DEBUG naga::front::wgsl::lower::conversion] wgsl automatic_conversion_consensus: ["vec2<f32>", "vec2<f32>"]
[2024-07-27T06:21:52Z DEBUG naga::front::wgsl::lower::conversion]     consensus: "f32"
[2024-07-27T06:21:52Z DEBUG naga::proc::constant_evaluator] check: SubexpressionsAreNotConstant
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [9] = Binary { op: Subtract, left: [3], right: [8] } : Handle([4])
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [10] = Literal(AbstractFloat(2.0)) : Value(Scalar(Scalar { kind: AbstractFloat, width: 8 }))
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [11] = Splat { size: Bi, value: [10] } : Value(Vector { size: Bi, scalar: Scalar { kind: AbstractFloat, width: 8 } })
[2024-07-27T06:21:52Z DEBUG naga::front::wgsl::lower::conversion] wgsl automatic_conversion_consensus: ["vec2<f32>", "vec2<{AbstractFloat}>"]
[2024-07-27T06:21:52Z DEBUG naga::front::wgsl::lower::conversion]     consensus: "f32"
[2024-07-27T06:21:52Z DEBUG naga::proc::constant_evaluator] check: SubexpressionsAreNotConstant
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [12] = Literal(F32(2.0)) : Value(Scalar(Scalar { kind: Float, width: 4 }))
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [13] = Splat { size: Bi, value: [12] } : Value(Vector { size: Bi, scalar: Scalar { kind: Float, width: 4 } })
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [14] = Binary { op: Divide, left: [9], right: [13] } : Handle([4])
[2024-07-27T06:21:52Z DEBUG naga::proc::constant_evaluator] check: SubexpressionsAreNotConstant
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [15] = LocalVariable([1]) : Value(Pointer { base: [4], space: Function })
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [16] = Compose { ty: [4], components: [[4], [4]] } : Handle([4])
[2024-07-27T06:21:52Z DEBUG naga::front::wgsl::lower::conversion] wgsl automatic_conversion_consensus: ["vec2<f32>", "vec2<f32>"]
[2024-07-27T06:21:52Z DEBUG naga::front::wgsl::lower::conversion]     consensus: "f32"
[2024-07-27T06:21:52Z DEBUG naga::proc::constant_evaluator] check: SubexpressionsAreNotConstant
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [17] = Binary { op: Add, left: [2], right: [16] } : Handle([4])
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [18] = LocalVariable([2]) : Value(Pointer { base: [4], space: Function })
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [19] = Load { pointer: [18] } : Handle([4])
[2024-07-27T06:21:52Z DEBUG naga::front::wgsl::lower::conversion] wgsl automatic_conversion_consensus: ["vec2<f32>", "vec2<f32>"]
[2024-07-27T06:21:52Z DEBUG naga::front::wgsl::lower::conversion]     consensus: "f32"
[2024-07-27T06:21:52Z DEBUG naga::proc::constant_evaluator] check: SubexpressionsAreNotConstant
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [20] = Binary { op: Subtract, left: [1], right: [19] } : Handle([4])
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [21] = Load { pointer: [15] } : Handle([4])
[2024-07-27T06:21:52Z DEBUG naga::front::wgsl::lower::conversion] wgsl automatic_conversion_consensus: ["vec2<f32>", "vec2<f32>"]
[2024-07-27T06:21:52Z DEBUG naga::front::wgsl::lower::conversion]     consensus: "f32"
[2024-07-27T06:21:52Z DEBUG naga::proc::constant_evaluator] check: SubexpressionsAreNotConstant
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [22] = Binary { op: Subtract, left: [20], right: [21] } : Handle([4])
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [23] = Load { pointer: [15] } : Handle([4])
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [24] = Literal(AbstractFloat(0.0)) : Value(Scalar(Scalar { kind: AbstractFloat, width: 8 }))
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [25] = Literal(F32(0.0)) : Value(Scalar(Scalar { kind: Float, width: 4 }))
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [26] = CallResult([1]) : Handle([2])
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [1] = FunctionArgument(0) : Handle([5])
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [2] = FunctionArgument(1) : Handle([4])
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [3] = FunctionArgument(2) : Handle([4])
[2024-07-27T06:21:52Z DEBUG naga::proc::constant_evaluator] check: SubexpressionsAreNotConstant
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [4] = AccessIndex { base: [1], index: 0 } : Value(Scalar(Scalar { kind: Float, width: 4 }))
[2024-07-27T06:21:52Z DEBUG naga::proc::constant_evaluator] check: SubexpressionsAreNotConstant
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [5] = LocalVariable([1]) : Value(Pointer { base: [2], space: Function })
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [6] = AccessIndex { base: [1], index: 1 } : Value(Scalar(Scalar { kind: Float, width: 4 }))
[2024-07-27T06:21:52Z DEBUG naga::proc::constant_evaluator] check: SubexpressionsAreNotConstant
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [7] = LocalVariable([2]) : Value(Pointer { base: [2], space: Function })
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [8] = AccessIndex { base: [1], index: 0 } : Value(Scalar(Scalar { kind: Float, width: 4 }))
[2024-07-27T06:21:52Z DEBUG naga::proc::constant_evaluator] check: SubexpressionsAreNotConstant
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [9] = AccessIndex { base: [1], index: 1 } : Value(Scalar(Scalar { kind: Float, width: 4 }))
[2024-07-27T06:21:52Z DEBUG naga::proc::constant_evaluator] check: SubexpressionsAreNotConstant
[2024-07-27T06:21:52Z DEBUG naga::proc::constant_evaluator] check: SubexpressionsAreNotConstant
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [10] = AccessIndex { base: [2], index: 0 } : Value(Scalar(Scalar { kind: Float, width: 4 }))
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [11] = AccessIndex { base: [3], index: 0 } : Value(Scalar(Scalar { kind: Float, width: 4 }))
[2024-07-27T06:21:52Z DEBUG naga::front::wgsl::lower::conversion] wgsl automatic_conversion_consensus: ["f32", "f32"]
[2024-07-27T06:21:52Z DEBUG naga::front::wgsl::lower::conversion]     consensus: "f32"
[2024-07-27T06:21:52Z DEBUG naga::proc::constant_evaluator] check: SubexpressionsAreNotConstant
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [12] = Binary { op: Greater, left: [10], right: [11] } : Value(Scalar(Scalar { kind: Bool, width: 1 }))
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [13] = Select { condition: [12], accept: [9], reject: [8] } : Value(Scalar(Scalar { kind: Float, width: 4 }))
[2024-07-27T06:21:52Z DEBUG naga::proc::constant_evaluator] check: SubexpressionsAreNotConstant
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [14] = AccessIndex { base: [1], index: 3 } : Value(Scalar(Scalar { kind: Float, width: 4 }))
[2024-07-27T06:21:52Z DEBUG naga::proc::constant_evaluator] check: SubexpressionsAreNotConstant
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [15] = AccessIndex { base: [1], index: 2 } : Value(Scalar(Scalar { kind: Float, width: 4 }))
[2024-07-27T06:21:52Z DEBUG naga::proc::constant_evaluator] check: SubexpressionsAreNotConstant
[2024-07-27T06:21:52Z DEBUG naga::proc::constant_evaluator] check: SubexpressionsAreNotConstant
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [16] = AccessIndex { base: [2], index: 0 } : Value(Scalar(Scalar { kind: Float, width: 4 }))
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [17] = AccessIndex { base: [3], index: 0 } : Value(Scalar(Scalar { kind: Float, width: 4 }))
[2024-07-27T06:21:52Z DEBUG naga::front::wgsl::lower::conversion] wgsl automatic_conversion_consensus: ["f32", "f32"]
[2024-07-27T06:21:52Z DEBUG naga::front::wgsl::lower::conversion]     consensus: "f32"
[2024-07-27T06:21:52Z DEBUG naga::proc::constant_evaluator] check: SubexpressionsAreNotConstant
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [18] = Binary { op: Greater, left: [16], right: [17] } : Value(Scalar(Scalar { kind: Bool, width: 1 }))
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [19] = Select { condition: [18], accept: [15], reject: [14] } : Value(Scalar(Scalar { kind: Float, width: 4 }))
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [20] = Load { pointer: [5] } : Handle([2])
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [21] = Load { pointer: [7] } : Handle([2])
[2024-07-27T06:21:52Z DEBUG naga::proc::constant_evaluator] check: SubexpressionsAreNotConstant
[2024-07-27T06:21:52Z DEBUG naga::proc::constant_evaluator] check: SubexpressionsAreNotConstant
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [22] = AccessIndex { base: [2], index: 1 } : Value(Scalar(Scalar { kind: Float, width: 4 }))
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [23] = AccessIndex { base: [3], index: 1 } : Value(Scalar(Scalar { kind: Float, width: 4 }))
[2024-07-27T06:21:52Z DEBUG naga::front::wgsl::lower::conversion] wgsl automatic_conversion_consensus: ["f32", "f32"]
[2024-07-27T06:21:52Z DEBUG naga::front::wgsl::lower::conversion]     consensus: "f32"
[2024-07-27T06:21:52Z DEBUG naga::proc::constant_evaluator] check: SubexpressionsAreNotConstant
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [24] = Binary { op: Greater, left: [22], right: [23] } : Value(Scalar(Scalar { kind: Bool, width: 1 }))
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [25] = Select { condition: [24], accept: [21], reject: [20] } : Handle([2])
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [26] = Load { pointer: [5] } : Handle([2])
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [1] = FunctionArgument(0) : Handle([6])
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [2] = Literal(U32(1)) : Value(Scalar(Scalar { kind: Uint, width: 4 }))
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [3] = Literal(U32(2)) : Value(Scalar(Scalar { kind: Uint, width: 4 }))
[2024-07-27T06:21:52Z DEBUG naga::front::wgsl::lower::conversion] wgsl automatic_conversion_consensus: ["u32", "u32"]
[2024-07-27T06:21:52Z DEBUG naga::front::wgsl::lower::conversion]     consensus: "u32"
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [4] = Compose { ty: [7], components: [[2], [3]] } : Handle([7])
[2024-07-27T06:21:52Z DEBUG naga::proc::constant_evaluator] check: SubexpressionsAreNotConstant
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [5] = Splat { size: Bi, value: [1] } : Value(Vector { size: Bi, scalar: Scalar { kind: Uint, width: 4 } })
[2024-07-27T06:21:52Z DEBUG naga::front::wgsl::lower::conversion] wgsl automatic_conversion_consensus: ["vec2<u32>", "vec2<u32>"]
[2024-07-27T06:21:52Z DEBUG naga::front::wgsl::lower::conversion]     consensus: "u32"
[2024-07-27T06:21:52Z DEBUG naga::proc::constant_evaluator] check: SubexpressionsAreNotConstant
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [6] = Binary { op: Add, left: [4], right: [5] } : Handle([7])
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [7] = Literal(U32(6)) : Value(Scalar(Scalar { kind: Uint, width: 4 }))
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [8] = Splat { size: Bi, value: [7] } : Value(Vector { size: Bi, scalar: Scalar { kind: Uint, width: 4 } })
[2024-07-27T06:21:52Z DEBUG naga::front::wgsl::lower::conversion] wgsl automatic_conversion_consensus: ["vec2<u32>", "vec2<u32>"]
[2024-07-27T06:21:52Z DEBUG naga::front::wgsl::lower::conversion]     consensus: "u32"
[2024-07-27T06:21:52Z DEBUG naga::proc::constant_evaluator] check: SubexpressionsAreNotConstant
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [9] = Binary { op: Modulo, left: [6], right: [8] } : Handle([7])
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [10] = Literal(U32(3)) : Value(Scalar(Scalar { kind: Uint, width: 4 }))
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [11] = Splat { size: Bi, value: [10] } : Value(Vector { size: Bi, scalar: Scalar { kind: Uint, width: 4 } })
[2024-07-27T06:21:52Z DEBUG naga::front::wgsl::lower::conversion] wgsl automatic_conversion_consensus: ["vec2<u32>", "vec2<u32>"]
[2024-07-27T06:21:52Z DEBUG naga::front::wgsl::lower::conversion]     consensus: "u32"
[2024-07-27T06:21:52Z DEBUG naga::proc::constant_evaluator] check: SubexpressionsAreNotConstant
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [12] = Binary { op: Less, left: [9], right: [11] } : Value(Vector { size: Bi, scalar: Scalar { kind: Bool, width: 1 } })
[2024-07-27T06:21:52Z DEBUG naga::proc::constant_evaluator] check: SubexpressionsAreNotConstant
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [13] = As { expr: [12], kind: Float, convert: Some(4) } : Value(Vector { size: Bi, scalar: Scalar { kind: Float, width: 4 } })
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [4] = Literal(I32(0)) : Value(Scalar(Scalar { kind: Sint, width: 4 }))
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [5] = Literal(AbstractInt(0)) : Value(Scalar(Scalar { kind: AbstractInt, width: 8 }))
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [6] = Literal(I32(0)) : Value(Scalar(Scalar { kind: Sint, width: 4 }))
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [7] = Literal(AbstractInt(1)) : Value(Scalar(Scalar { kind: AbstractInt, width: 8 }))
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [8] = Literal(I32(1)) : Value(Scalar(Scalar { kind: Sint, width: 4 }))
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [9] = Literal(AbstractInt(2)) : Value(Scalar(Scalar { kind: AbstractInt, width: 8 }))
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [10] = Literal(I32(2)) : Value(Scalar(Scalar { kind: Sint, width: 4 }))
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [11] = Literal(AbstractInt(3)) : Value(Scalar(Scalar { kind: AbstractInt, width: 8 }))
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [12] = Literal(I32(3)) : Value(Scalar(Scalar { kind: Sint, width: 4 }))
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [13] = Literal(AbstractInt(4)) : Value(Scalar(Scalar { kind: AbstractInt, width: 8 }))
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [14] = Literal(I32(4)) : Value(Scalar(Scalar { kind: Sint, width: 4 }))
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [15] = Literal(AbstractInt(5)) : Value(Scalar(Scalar { kind: AbstractInt, width: 8 }))
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [16] = Literal(I32(5)) : Value(Scalar(Scalar { kind: Sint, width: 4 }))
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [17] = Literal(AbstractInt(6)) : Value(Scalar(Scalar { kind: AbstractInt, width: 8 }))
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [18] = Literal(I32(6)) : Value(Scalar(Scalar { kind: Sint, width: 4 }))
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [19] = Literal(AbstractInt(7)) : Value(Scalar(Scalar { kind: AbstractInt, width: 8 }))
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [20] = Literal(I32(7)) : Value(Scalar(Scalar { kind: Sint, width: 4 }))
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [21] = Literal(AbstractInt(8)) : Value(Scalar(Scalar { kind: AbstractInt, width: 8 }))
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [22] = Literal(I32(8)) : Value(Scalar(Scalar { kind: Sint, width: 4 }))
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [23] = Literal(AbstractInt(0)) : Value(Scalar(Scalar { kind: AbstractInt, width: 8 }))
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [24] = Literal(I32(0)) : Value(Scalar(Scalar { kind: Sint, width: 4 }))
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [25] = Literal(AbstractInt(1)) : Value(Scalar(Scalar { kind: AbstractInt, width: 8 }))
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [26] = Literal(I32(1)) : Value(Scalar(Scalar { kind: Sint, width: 4 }))
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [27] = Literal(AbstractInt(2)) : Value(Scalar(Scalar { kind: AbstractInt, width: 8 }))
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [28] = Literal(I32(2)) : Value(Scalar(Scalar { kind: Sint, width: 4 }))
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [29] = Literal(AbstractInt(3)) : Value(Scalar(Scalar { kind: AbstractInt, width: 8 }))
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [30] = Literal(I32(3)) : Value(Scalar(Scalar { kind: Sint, width: 4 }))
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [31] = Literal(AbstractInt(4)) : Value(Scalar(Scalar { kind: AbstractInt, width: 8 }))
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [32] = Literal(I32(4)) : Value(Scalar(Scalar { kind: Sint, width: 4 }))
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [33] = Literal(AbstractInt(5)) : Value(Scalar(Scalar { kind: AbstractInt, width: 8 }))
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [34] = Literal(I32(5)) : Value(Scalar(Scalar { kind: Sint, width: 4 }))
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [35] = Literal(AbstractInt(6)) : Value(Scalar(Scalar { kind: AbstractInt, width: 8 }))
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [36] = Literal(I32(6)) : Value(Scalar(Scalar { kind: Sint, width: 4 }))
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [37] = Literal(AbstractInt(7)) : Value(Scalar(Scalar { kind: AbstractInt, width: 8 }))
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [38] = Literal(I32(7)) : Value(Scalar(Scalar { kind: Sint, width: 4 }))
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [39] = Literal(AbstractInt(8)) : Value(Scalar(Scalar { kind: AbstractInt, width: 8 }))
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [1] = FunctionArgument(0) : Handle([8])
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [2] = LocalVariable([1]) : Value(Pointer { base: [9], space: Function })
[2024-07-27T06:21:52Z DEBUG naga::proc::constant_evaluator] check: SubexpressionsAreNotConstant
[2024-07-27T06:21:52Z DEBUG naga::proc::constant_evaluator] check: SubexpressionsAreNotConstant
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [3] = AccessIndex { base: [1], index: 2 } : Handle([4])
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [4] = AccessIndex { base: [1], index: 8 } : Handle([4])
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [5] = Literal(AbstractFloat(0.0)) : Value(Scalar(Scalar { kind: AbstractFloat, width: 8 }))
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [6] = Literal(AbstractFloat(0.0)) : Value(Scalar(Scalar { kind: AbstractFloat, width: 8 }))
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [7] = Literal(F32(0.0)) : Value(Scalar(Scalar { kind: Float, width: 4 }))
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [8] = Literal(F32(0.0)) : Value(Scalar(Scalar { kind: Float, width: 4 }))
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [9] = Compose { ty: [4], components: [[7], [8]] } : Handle([4])
[2024-07-27T06:21:52Z DEBUG naga::proc::constant_evaluator] check: SubexpressionsAreNotConstant
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [10] = Math { fun: Min, arg: [4], arg1: Some([9]), arg2: None, arg3: None } : Handle([4])
[2024-07-27T06:21:52Z DEBUG naga::front::wgsl::lower::conversion] wgsl automatic_conversion_consensus: ["vec2<f32>", "vec2<f32>"]
[2024-07-27T06:21:52Z DEBUG naga::front::wgsl::lower::conversion]     consensus: "f32"
[2024-07-27T06:21:52Z DEBUG naga::proc::constant_evaluator] check: SubexpressionsAreNotConstant
[2024-07-27T06:21:52Z DEBUG naga::proc::constant_evaluator] check: SubexpressionsAreNotConstant
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [11] = Binary { op: Add, left: [3], right: [10] } : Handle([4])
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [12] = AccessIndex { base: [1], index: 9 } : Handle([2])
[2024-07-27T06:21:52Z DEBUG naga::proc::constant_evaluator] check: SubexpressionsAreNotConstant
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [13] = Splat { size: Bi, value: [12] } : Value(Vector { size: Bi, scalar: Scalar { kind: Float, width: 4 } })
[2024-07-27T06:21:52Z DEBUG naga::front::wgsl::lower::conversion] wgsl automatic_conversion_consensus: ["vec2<f32>", "vec2<f32>"]
[2024-07-27T06:21:52Z DEBUG naga::front::wgsl::lower::conversion]     consensus: "f32"
[2024-07-27T06:21:52Z DEBUG naga::proc::constant_evaluator] check: SubexpressionsAreNotConstant
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [14] = Binary { op: Subtract, left: [11], right: [13] } : Handle([4])
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [15] = GlobalVariable([1]) : Value(Pointer { base: [3], space: Uniform })
[2024-07-27T06:21:52Z DEBUG naga::proc::constant_evaluator] check: SubexpressionsAreNotConstant
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [16] = AccessIndex { base: [15], index: 1 } : Value(Pointer { base: [2], space: Uniform })
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [17] = Load { pointer: [16] } : Handle([2])
[2024-07-27T06:21:52Z DEBUG naga::front::wgsl::lower::conversion] wgsl automatic_conversion_consensus: ["vec2<f32>", "f32"]
[2024-07-27T06:21:52Z DEBUG naga::front::wgsl::lower::conversion]     consensus: "f32"
[2024-07-27T06:21:52Z DEBUG naga::proc::constant_evaluator] check: SubexpressionsAreNotConstant
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [18] = Binary { op: Multiply, left: [14], right: [17] } : Handle([4])
[2024-07-27T06:21:52Z DEBUG naga::proc::constant_evaluator] check: SubexpressionsAreNotConstant
[2024-07-27T06:21:52Z DEBUG naga::proc::constant_evaluator] check: SubexpressionsAreNotConstant
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [19] = LocalVariable([2]) : Value(Pointer { base: [4], space: Function })
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [20] = AccessIndex { base: [1], index: 3 } : Handle([4])
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [21] = AccessIndex { base: [1], index: 8 } : Handle([4])
[2024-07-27T06:21:52Z DEBUG naga::proc::constant_evaluator] check: SubexpressionsAreNotConstant
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [22] = AccessIndex { base: [21], index: 0 } : Value(Scalar(Scalar { kind: Float, width: 4 }))
[2024-07-27T06:21:52Z DEBUG naga::proc::constant_evaluator] check: SubexpressionsAreNotConstant
[2024-07-27T06:21:52Z DEBUG naga::proc::constant_evaluator] check: SubexpressionsAreNotConstant
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [23] = Math { fun: Abs, arg: [22], arg1: None, arg2: None, arg3: None } : Value(Scalar(Scalar { kind: Float, width: 4 }))
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [24] = AccessIndex { base: [1], index: 8 } : Handle([4])
[2024-07-27T06:21:52Z DEBUG naga::proc::constant_evaluator] check: SubexpressionsAreNotConstant
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [25] = AccessIndex { base: [24], index: 1 } : Value(Scalar(Scalar { kind: Float, width: 4 }))
[2024-07-27T06:21:52Z DEBUG naga::proc::constant_evaluator] check: SubexpressionsAreNotConstant
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [26] = Math { fun: Abs, arg: [25], arg1: None, arg2: None, arg3: None } : Value(Scalar(Scalar { kind: Float, width: 4 }))
[2024-07-27T06:21:52Z DEBUG naga::proc::constant_evaluator] check: SubexpressionsAreNotConstant
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [27] = Compose { ty: [4], components: [[23], [26]] } : Handle([4])
[2024-07-27T06:21:52Z DEBUG naga::front::wgsl::lower::conversion] wgsl automatic_conversion_consensus: ["vec2<f32>", "vec2<f32>"]
[2024-07-27T06:21:52Z DEBUG naga::front::wgsl::lower::conversion]     consensus: "f32"
[2024-07-27T06:21:52Z DEBUG naga::proc::constant_evaluator] check: SubexpressionsAreNotConstant
[2024-07-27T06:21:52Z DEBUG naga::proc::constant_evaluator] check: SubexpressionsAreNotConstant
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [28] = Binary { op: Add, left: [20], right: [27] } : Handle([4])
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [29] = AccessIndex { base: [1], index: 9 } : Handle([2])
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [30] = Literal(AbstractFloat(2.0)) : Value(Scalar(Scalar { kind: AbstractFloat, width: 8 }))
[2024-07-27T06:21:52Z DEBUG naga::front::wgsl::lower::conversion] wgsl automatic_conversion_consensus: ["f32", "{AbstractFloat}"]
[2024-07-27T06:21:52Z DEBUG naga::front::wgsl::lower::conversion]     consensus: "f32"
[2024-07-27T06:21:52Z DEBUG naga::proc::constant_evaluator] check: SubexpressionsAreNotConstant
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [31] = Literal(F32(2.0)) : Value(Scalar(Scalar { kind: Float, width: 4 }))
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [32] = Binary { op: Multiply, left: [29], right: [31] } : Value(Scalar(Scalar { kind: Float, width: 4 }))
[2024-07-27T06:21:52Z DEBUG naga::proc::constant_evaluator] check: SubexpressionsAreNotConstant
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [33] = Splat { size: Bi, value: [32] } : Value(Vector { size: Bi, scalar: Scalar { kind: Float, width: 4 } })
[2024-07-27T06:21:52Z DEBUG naga::front::wgsl::lower::conversion] wgsl automatic_conversion_consensus: ["vec2<f32>", "vec2<f32>"]
[2024-07-27T06:21:52Z DEBUG naga::front::wgsl::lower::conversion]     consensus: "f32"
[2024-07-27T06:21:52Z DEBUG naga::proc::constant_evaluator] check: SubexpressionsAreNotConstant
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [34] = Binary { op: Add, left: [28], right: [33] } : Handle([4])
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [35] = GlobalVariable([1]) : Value(Pointer { base: [3], space: Uniform })
[2024-07-27T06:21:52Z DEBUG naga::proc::constant_evaluator] check: SubexpressionsAreNotConstant
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [36] = AccessIndex { base: [35], index: 1 } : Value(Pointer { base: [2], space: Uniform })
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [37] = Load { pointer: [36] } : Handle([2])
[2024-07-27T06:21:52Z DEBUG naga::front::wgsl::lower::conversion] wgsl automatic_conversion_consensus: ["vec2<f32>", "f32"]
[2024-07-27T06:21:52Z DEBUG naga::front::wgsl::lower::conversion]     consensus: "f32"
[2024-07-27T06:21:52Z DEBUG naga::proc::constant_evaluator] check: SubexpressionsAreNotConstant
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [38] = Binary { op: Multiply, left: [34], right: [37] } : Handle([4])
[2024-07-27T06:21:52Z DEBUG naga::proc::constant_evaluator] check: SubexpressionsAreNotConstant
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [39] = LocalVariable([3]) : Value(Pointer { base: [4], space: Function })
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [40] = AccessIndex { base: [1], index: 3 } : Handle([4])
[2024-07-27T06:21:52Z DEBUG naga::proc::constant_evaluator] check: SubexpressionsAreNotConstant
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [41] = AccessIndex { base: [40], index: 0 } : Value(Scalar(Scalar { kind: Float, width: 4 }))
[2024-07-27T06:21:52Z DEBUG naga::proc::constant_evaluator] check: SubexpressionsAreNotConstant
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [42] = AccessIndex { base: [1], index: 3 } : Handle([4])
[2024-07-27T06:21:52Z DEBUG naga::proc::constant_evaluator] check: SubexpressionsAreNotConstant
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [43] = AccessIndex { base: [42], index: 1 } : Value(Scalar(Scalar { kind: Float, width: 4 }))
[2024-07-27T06:21:52Z DEBUG naga::proc::constant_evaluator] check: SubexpressionsAreNotConstant
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [44] = Math { fun: Min, arg: [41], arg1: Some([43]), arg2: None, arg3: None } : Value(Scalar(Scalar { kind: Float, width: 4 }))
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [45] = Literal(AbstractFloat(0.5)) : Value(Scalar(Scalar { kind: AbstractFloat, width: 8 }))
[2024-07-27T06:21:52Z DEBUG naga::front::wgsl::lower::conversion] wgsl automatic_conversion_consensus: ["f32", "{AbstractFloat}"]
[2024-07-27T06:21:52Z DEBUG naga::front::wgsl::lower::conversion]     consensus: "f32"
[2024-07-27T06:21:52Z DEBUG naga::proc::constant_evaluator] check: SubexpressionsAreNotConstant
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [46] = Literal(F32(0.5)) : Value(Scalar(Scalar { kind: Float, width: 4 }))
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [47] = Binary { op: Multiply, left: [44], right: [46] } : Value(Scalar(Scalar { kind: Float, width: 4 }))
[2024-07-27T06:21:52Z DEBUG naga::proc::constant_evaluator] check: SubexpressionsAreNotConstant
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [48] = LocalVariable([4]) : Value(Pointer { base: [2], space: Function })
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [49] = AccessIndex { base: [1], index: 5 } : Handle([5])
[2024-07-27T06:21:52Z DEBUG naga::proc::constant_evaluator] check: SubexpressionsAreNotConstant
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [50] = AccessIndex { base: [49], index: 0 } : Value(Scalar(Scalar { kind: Float, width: 4 }))
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [51] = Load { pointer: [48] } : Handle([2])
[2024-07-27T06:21:52Z DEBUG naga::proc::constant_evaluator] check: SubexpressionsAreNotConstant
[2024-07-27T06:21:52Z DEBUG naga::proc::constant_evaluator] check: SubexpressionsAreNotConstant
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [52] = Math { fun: Min, arg: [50], arg1: Some([51]), arg2: None, arg3: None } : Value(Scalar(Scalar { kind: Float, width: 4 }))
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [53] = AccessIndex { base: [1], index: 5 } : Handle([5])
[2024-07-27T06:21:52Z DEBUG naga::proc::constant_evaluator] check: SubexpressionsAreNotConstant
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [54] = AccessIndex { base: [53], index: 1 } : Value(Scalar(Scalar { kind: Float, width: 4 }))
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [55] = Load { pointer: [48] } : Handle([2])
[2024-07-27T06:21:52Z DEBUG naga::proc::constant_evaluator] check: SubexpressionsAreNotConstant
[2024-07-27T06:21:52Z DEBUG naga::proc::constant_evaluator] check: SubexpressionsAreNotConstant
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [56] = Math { fun: Min, arg: [54], arg1: Some([55]), arg2: None, arg3: None } : Value(Scalar(Scalar { kind: Float, width: 4 }))
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [57] = AccessIndex { base: [1], index: 5 } : Handle([5])
[2024-07-27T06:21:52Z DEBUG naga::proc::constant_evaluator] check: SubexpressionsAreNotConstant
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [58] = AccessIndex { base: [57], index: 2 } : Value(Scalar(Scalar { kind: Float, width: 4 }))
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [59] = Load { pointer: [48] } : Handle([2])
[2024-07-27T06:21:52Z DEBUG naga::proc::constant_evaluator] check: SubexpressionsAreNotConstant
[2024-07-27T06:21:52Z DEBUG naga::proc::constant_evaluator] check: SubexpressionsAreNotConstant
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [60] = Math { fun: Min, arg: [58], arg1: Some([59]), arg2: None, arg3: None } : Value(Scalar(Scalar { kind: Float, width: 4 }))
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [61] = AccessIndex { base: [1], index: 5 } : Handle([5])
[2024-07-27T06:21:52Z DEBUG naga::proc::constant_evaluator] check: SubexpressionsAreNotConstant
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [62] = AccessIndex { base: [61], index: 3 } : Value(Scalar(Scalar { kind: Float, width: 4 }))
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [63] = Load { pointer: [48] } : Handle([2])
[2024-07-27T06:21:52Z DEBUG naga::proc::constant_evaluator] check: SubexpressionsAreNotConstant
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [64] = Math { fun: Min, arg: [62], arg1: Some([63]), arg2: None, arg3: None } : Value(Scalar(Scalar { kind: Float, width: 4 }))
[2024-07-27T06:21:52Z DEBUG naga::proc::constant_evaluator] check: SubexpressionsAreNotConstant
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [65] = Compose { ty: [5], components: [[52], [56], [60], [64]] } : Handle([5])
[2024-07-27T06:21:52Z DEBUG naga::proc::constant_evaluator] check: SubexpressionsAreNotConstant
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [66] = LocalVariable([5]) : Value(Pointer { base: [5], space: Function })
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [67] = AccessIndex { base: [39], index: 0 } : Value(ValuePointer { size: None, scalar: Scalar { kind: Float, width: 4 }, space: Function })
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [68] = Load { pointer: [67] } : Value(Scalar(Scalar { kind: Float, width: 4 }))
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [69] = Literal(AbstractFloat(1.0)) : Value(Scalar(Scalar { kind: AbstractFloat, width: 8 }))
[2024-07-27T06:21:52Z DEBUG naga::front::wgsl::lower::conversion] wgsl automatic_conversion_consensus: ["f32", "{AbstractFloat}"]
[2024-07-27T06:21:52Z DEBUG naga::front::wgsl::lower::conversion]     consensus: "f32"
[2024-07-27T06:21:52Z DEBUG naga::proc::constant_evaluator] check: SubexpressionsAreNotConstant
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [70] = Literal(F32(1.0)) : Value(Scalar(Scalar { kind: Float, width: 4 }))
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [71] = Binary { op: Add, left: [68], right: [70] } : Value(Scalar(Scalar { kind: Float, width: 4 }))
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [72] = Literal(AbstractFloat(0.0)) : Value(Scalar(Scalar { kind: AbstractFloat, width: 8 }))
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [73] = Literal(AbstractFloat(0.0)) : Value(Scalar(Scalar { kind: AbstractFloat, width: 8 }))
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [74] = Literal(AbstractFloat(0.0)) : Value(Scalar(Scalar { kind: AbstractFloat, width: 8 }))
[2024-07-27T06:21:52Z DEBUG naga::proc::constant_evaluator] check: SubexpressionsAreNotConstant
[2024-07-27T06:21:52Z DEBUG naga::proc::constant_evaluator] check: SubexpressionsAreNotConstant
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [75] = Literal(F32(0.0)) : Value(Scalar(Scalar { kind: Float, width: 4 }))
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [76] = Literal(F32(0.0)) : Value(Scalar(Scalar { kind: Float, width: 4 }))
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [77] = Literal(F32(0.0)) : Value(Scalar(Scalar { kind: Float, width: 4 }))
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [78] = Compose { ty: [5], components: [[71], [75], [76], [77]] } : Handle([5])
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [79] = Literal(AbstractFloat(0.0)) : Value(Scalar(Scalar { kind: AbstractFloat, width: 8 }))
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [80] = AccessIndex { base: [39], index: 1 } : Value(ValuePointer { size: None, scalar: Scalar { kind: Float, width: 4 }, space: Function })
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [81] = Load { pointer: [80] } : Value(Scalar(Scalar { kind: Float, width: 4 }))
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [82] = Literal(AbstractFloat(1.0)) : Value(Scalar(Scalar { kind: AbstractFloat, width: 8 }))
[2024-07-27T06:21:52Z DEBUG naga::front::wgsl::lower::conversion] wgsl automatic_conversion_consensus: ["f32", "{AbstractFloat}"]
[2024-07-27T06:21:52Z DEBUG naga::front::wgsl::lower::conversion]     consensus: "f32"
[2024-07-27T06:21:52Z DEBUG naga::proc::constant_evaluator] check: SubexpressionsAreNotConstant
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [83] = Literal(F32(1.0)) : Value(Scalar(Scalar { kind: Float, width: 4 }))
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [84] = Binary { op: Add, left: [81], right: [83] } : Value(Scalar(Scalar { kind: Float, width: 4 }))
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [85] = Literal(AbstractFloat(0.0)) : Value(Scalar(Scalar { kind: AbstractFloat, width: 8 }))
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [86] = Literal(AbstractFloat(0.0)) : Value(Scalar(Scalar { kind: AbstractFloat, width: 8 }))
[2024-07-27T06:21:52Z DEBUG naga::proc::constant_evaluator] check: SubexpressionsAreNotConstant
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [87] = Literal(F32(0.0)) : Value(Scalar(Scalar { kind: Float, width: 4 }))
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [88] = Literal(F32(0.0)) : Value(Scalar(Scalar { kind: Float, width: 4 }))
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [89] = Literal(F32(0.0)) : Value(Scalar(Scalar { kind: Float, width: 4 }))
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [90] = Compose { ty: [5], components: [[87], [84], [88], [89]] } : Handle([5])
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [91] = Literal(AbstractFloat(0.0)) : Value(Scalar(Scalar { kind: AbstractFloat, width: 8 }))
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [92] = Literal(AbstractFloat(0.0)) : Value(Scalar(Scalar { kind: AbstractFloat, width: 8 }))
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [93] = Literal(AbstractFloat(1.0)) : Value(Scalar(Scalar { kind: AbstractFloat, width: 8 }))
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [94] = Literal(AbstractFloat(0.0)) : Value(Scalar(Scalar { kind: AbstractFloat, width: 8 }))
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [95] = Literal(F32(0.0)) : Value(Scalar(Scalar { kind: Float, width: 4 }))
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [96] = Literal(F32(0.0)) : Value(Scalar(Scalar { kind: Float, width: 4 }))
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [97] = Literal(F32(1.0)) : Value(Scalar(Scalar { kind: Float, width: 4 }))
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [98] = Literal(F32(0.0)) : Value(Scalar(Scalar { kind: Float, width: 4 }))
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [99] = Compose { ty: [5], components: [[95], [96], [97], [98]] } : Handle([5])
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [100] = Load { pointer: [19] } : Handle([4])
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [101] = Literal(AbstractFloat(0.5)) : Value(Scalar(Scalar { kind: AbstractFloat, width: 8 }))
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [102] = Literal(AbstractFloat(0.5)) : Value(Scalar(Scalar { kind: AbstractFloat, width: 8 }))
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [103] = Literal(F32(0.5)) : Value(Scalar(Scalar { kind: Float, width: 4 }))
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [104] = Literal(F32(0.5)) : Value(Scalar(Scalar { kind: Float, width: 4 }))
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [105] = Compose { ty: [4], components: [[103], [104]] } : Handle([4])
[2024-07-27T06:21:52Z DEBUG naga::front::wgsl::lower::conversion] wgsl automatic_conversion_consensus: ["vec2<f32>", "vec2<f32>"]
[2024-07-27T06:21:52Z DEBUG naga::front::wgsl::lower::conversion]     consensus: "f32"
[2024-07-27T06:21:52Z DEBUG naga::proc::constant_evaluator] check: SubexpressionsAreNotConstant
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [106] = Binary { op: Subtract, left: [100], right: [105] } : Handle([4])
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [107] = Literal(AbstractFloat(0.0)) : Value(Scalar(Scalar { kind: AbstractFloat, width: 8 }))
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [108] = Literal(AbstractFloat(1.0)) : Value(Scalar(Scalar { kind: AbstractFloat, width: 8 }))
[2024-07-27T06:21:52Z DEBUG naga::proc::constant_evaluator] check: SubexpressionsAreNotConstant
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [109] = Literal(F32(0.0)) : Value(Scalar(Scalar { kind: Float, width: 4 }))
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [110] = Literal(F32(1.0)) : Value(Scalar(Scalar { kind: Float, width: 4 }))
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [111] = Compose { ty: [5], components: [[106], [109], [110]] } : Handle([5])
[2024-07-27T06:21:52Z DEBUG naga::proc::constant_evaluator] check: SubexpressionsAreNotConstant
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [112] = Compose { ty: [1], components: [[78], [90], [99], [111]] } : Handle([1])
[2024-07-27T06:21:52Z DEBUG naga::proc::constant_evaluator] check: SubexpressionsAreNotConstant
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [113] = LocalVariable([6]) : Value(Pointer { base: [1], space: Function })
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [114] = AccessIndex { base: [2], index: 0 } : Value(Pointer { base: [5], space: Function })
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [115] = GlobalVariable([1]) : Value(Pointer { base: [3], space: Uniform })
[2024-07-27T06:21:52Z DEBUG naga::proc::constant_evaluator] check: SubexpressionsAreNotConstant
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [116] = AccessIndex { base: [115], index: 0 } : Value(Pointer { base: [1], space: Uniform })
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [117] = Load { pointer: [116] } : Handle([1])
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [118] = Load { pointer: [113] } : Handle([1])
[2024-07-27T06:21:52Z DEBUG naga::front::wgsl::lower::conversion] wgsl automatic_conversion_consensus: ["mat4x4<f32>", "mat4x4<f32>"]
[2024-07-27T06:21:52Z DEBUG naga::front::wgsl::lower::conversion]     consensus: "f32"
[2024-07-27T06:21:52Z DEBUG naga::proc::constant_evaluator] check: SubexpressionsAreNotConstant
[2024-07-27T06:21:52Z DEBUG naga::proc::constant_evaluator] check: SubexpressionsAreNotConstant
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [119] = Binary { op: Multiply, left: [117], right: [118] } : Value(Matrix { columns: Quad, rows: Quad, scalar: Scalar { kind: Float, width: 4 } })
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [120] = AccessIndex { base: [1], index: 0 } : Handle([6])
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [121] = CallResult([4]) : Handle([4])
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [122] = Literal(AbstractFloat(0.0)) : Value(Scalar(Scalar { kind: AbstractFloat, width: 8 }))
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [123] = Literal(AbstractFloat(1.0)) : Value(Scalar(Scalar { kind: AbstractFloat, width: 8 }))
[2024-07-27T06:21:52Z DEBUG naga::proc::constant_evaluator] check: SubexpressionsAreNotConstant
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [124] = Literal(F32(0.0)) : Value(Scalar(Scalar { kind: Float, width: 4 }))
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [125] = Literal(F32(1.0)) : Value(Scalar(Scalar { kind: Float, width: 4 }))
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [126] = Compose { ty: [5], components: [[121], [124], [125]] } : Handle([5])
[2024-07-27T06:21:52Z DEBUG naga::front::wgsl::lower::conversion] wgsl automatic_conversion_consensus: ["mat4x4<f32>", "vec4<f32>"]
[2024-07-27T06:21:52Z DEBUG naga::front::wgsl::lower::conversion]     consensus: "f32"
[2024-07-27T06:21:52Z DEBUG naga::proc::constant_evaluator] check: SubexpressionsAreNotConstant
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [127] = Binary { op: Multiply, left: [119], right: [126] } : Value(Vector { size: Quad, scalar: Scalar { kind: Float, width: 4 } })
[2024-07-27T06:21:52Z DEBUG naga::proc::constant_evaluator] check: SubexpressionsAreNotConstant
[2024-07-27T06:21:52Z DEBUG naga::proc::constant_evaluator] check: SubexpressionsAreNotConstant
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [128] = AccessIndex { base: [2], index: 1 } : Value(Pointer { base: [5], space: Function })
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [129] = AccessIndex { base: [1], index: 1 } : Handle([5])
[2024-07-27T06:21:52Z DEBUG naga::proc::constant_evaluator] check: SubexpressionsAreNotConstant
[2024-07-27T06:21:52Z DEBUG naga::proc::constant_evaluator] check: SubexpressionsAreNotConstant
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [130] = AccessIndex { base: [2], index: 2 } : Value(Pointer { base: [5], space: Function })
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [131] = AccessIndex { base: [1], index: 4 } : Handle([5])
[2024-07-27T06:21:52Z DEBUG naga::proc::constant_evaluator] check: SubexpressionsAreNotConstant
[2024-07-27T06:21:52Z DEBUG naga::proc::constant_evaluator] check: SubexpressionsAreNotConstant
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [132] = AccessIndex { base: [2], index: 3 } : Value(Pointer { base: [4], space: Function })
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [133] = AccessIndex { base: [1], index: 2 } : Handle([4])
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [134] = GlobalVariable([1]) : Value(Pointer { base: [3], space: Uniform })
[2024-07-27T06:21:52Z DEBUG naga::proc::constant_evaluator] check: SubexpressionsAreNotConstant
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [135] = AccessIndex { base: [134], index: 1 } : Value(Pointer { base: [2], space: Uniform })
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [136] = Load { pointer: [135] } : Handle([2])
[2024-07-27T06:21:52Z DEBUG naga::front::wgsl::lower::conversion] wgsl automatic_conversion_consensus: ["vec2<f32>", "f32"]
[2024-07-27T06:21:52Z DEBUG naga::front::wgsl::lower::conversion]     consensus: "f32"
[2024-07-27T06:21:52Z DEBUG naga::proc::constant_evaluator] check: SubexpressionsAreNotConstant
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [137] = Binary { op: Multiply, left: [133], right: [136] } : Handle([4])
[2024-07-27T06:21:52Z DEBUG naga::proc::constant_evaluator] check: SubexpressionsAreNotConstant
[2024-07-27T06:21:52Z DEBUG naga::proc::constant_evaluator] check: SubexpressionsAreNotConstant
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [138] = AccessIndex { base: [2], index: 4 } : Value(Pointer { base: [4], space: Function })
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [139] = AccessIndex { base: [1], index: 3 } : Handle([4])
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [140] = GlobalVariable([1]) : Value(Pointer { base: [3], space: Uniform })
[2024-07-27T06:21:52Z DEBUG naga::proc::constant_evaluator] check: SubexpressionsAreNotConstant
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [141] = AccessIndex { base: [140], index: 1 } : Value(Pointer { base: [2], space: Uniform })
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [142] = Load { pointer: [141] } : Handle([2])
[2024-07-27T06:21:52Z DEBUG naga::front::wgsl::lower::conversion] wgsl automatic_conversion_consensus: ["vec2<f32>", "f32"]
[2024-07-27T06:21:52Z DEBUG naga::front::wgsl::lower::conversion]     consensus: "f32"
[2024-07-27T06:21:52Z DEBUG naga::proc::constant_evaluator] check: SubexpressionsAreNotConstant
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [143] = Binary { op: Multiply, left: [139], right: [142] } : Handle([4])
[2024-07-27T06:21:52Z DEBUG naga::proc::constant_evaluator] check: SubexpressionsAreNotConstant
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [144] = AccessIndex { base: [2], index: 5 } : Value(Pointer { base: [5], space: Function })
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [145] = Load { pointer: [66] } : Handle([5])
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [146] = GlobalVariable([1]) : Value(Pointer { base: [3], space: Uniform })
[2024-07-27T06:21:52Z DEBUG naga::proc::constant_evaluator] check: SubexpressionsAreNotConstant
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [147] = AccessIndex { base: [146], index: 1 } : Value(Pointer { base: [2], space: Uniform })
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [148] = Load { pointer: [147] } : Handle([2])
[2024-07-27T06:21:52Z DEBUG naga::front::wgsl::lower::conversion] wgsl automatic_conversion_consensus: ["vec4<f32>", "f32"]
[2024-07-27T06:21:52Z DEBUG naga::front::wgsl::lower::conversion]     consensus: "f32"
[2024-07-27T06:21:52Z DEBUG naga::proc::constant_evaluator] check: SubexpressionsAreNotConstant
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [149] = Binary { op: Multiply, left: [145], right: [148] } : Handle([5])
[2024-07-27T06:21:52Z DEBUG naga::proc::constant_evaluator] check: SubexpressionsAreNotConstant
[2024-07-27T06:21:52Z DEBUG naga::proc::constant_evaluator] check: SubexpressionsAreNotConstant
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [150] = AccessIndex { base: [2], index: 6 } : Value(Pointer { base: [2], space: Function })
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [151] = AccessIndex { base: [1], index: 6 } : Handle([2])
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [152] = GlobalVariable([1]) : Value(Pointer { base: [3], space: Uniform })
[2024-07-27T06:21:52Z DEBUG naga::proc::constant_evaluator] check: SubexpressionsAreNotConstant
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [153] = AccessIndex { base: [152], index: 1 } : Value(Pointer { base: [2], space: Uniform })
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [154] = Load { pointer: [153] } : Handle([2])
[2024-07-27T06:21:52Z DEBUG naga::front::wgsl::lower::conversion] wgsl automatic_conversion_consensus: ["f32", "f32"]
[2024-07-27T06:21:52Z DEBUG naga::front::wgsl::lower::conversion]     consensus: "f32"
[2024-07-27T06:21:52Z DEBUG naga::proc::constant_evaluator] check: SubexpressionsAreNotConstant
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [155] = Binary { op: Multiply, left: [151], right: [154] } : Handle([2])
[2024-07-27T06:21:52Z DEBUG naga::proc::constant_evaluator] check: SubexpressionsAreNotConstant
[2024-07-27T06:21:52Z DEBUG naga::proc::constant_evaluator] check: SubexpressionsAreNotConstant
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [156] = AccessIndex { base: [2], index: 7 } : Value(Pointer { base: [5], space: Function })
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [157] = AccessIndex { base: [1], index: 7 } : Handle([5])
[2024-07-27T06:21:52Z DEBUG naga::proc::constant_evaluator] check: SubexpressionsAreNotConstant
[2024-07-27T06:21:52Z DEBUG naga::proc::constant_evaluator] check: SubexpressionsAreNotConstant
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [158] = AccessIndex { base: [2], index: 8 } : Value(Pointer { base: [4], space: Function })
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [159] = AccessIndex { base: [1], index: 8 } : Handle([4])
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [160] = GlobalVariable([1]) : Value(Pointer { base: [3], space: Uniform })
[2024-07-27T06:21:52Z DEBUG naga::proc::constant_evaluator] check: SubexpressionsAreNotConstant
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [161] = AccessIndex { base: [160], index: 1 } : Value(Pointer { base: [2], space: Uniform })
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [162] = Load { pointer: [161] } : Handle([2])
[2024-07-27T06:21:52Z DEBUG naga::front::wgsl::lower::conversion] wgsl automatic_conversion_consensus: ["vec2<f32>", "f32"]
[2024-07-27T06:21:52Z DEBUG naga::front::wgsl::lower::conversion]     consensus: "f32"
[2024-07-27T06:21:52Z DEBUG naga::proc::constant_evaluator] check: SubexpressionsAreNotConstant
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [163] = Binary { op: Multiply, left: [159], right: [162] } : Handle([4])
[2024-07-27T06:21:52Z DEBUG naga::proc::constant_evaluator] check: SubexpressionsAreNotConstant
[2024-07-27T06:21:52Z DEBUG naga::proc::constant_evaluator] check: SubexpressionsAreNotConstant
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [164] = AccessIndex { base: [2], index: 9 } : Value(Pointer { base: [2], space: Function })
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [165] = AccessIndex { base: [1], index: 9 } : Handle([2])
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [166] = GlobalVariable([1]) : Value(Pointer { base: [3], space: Uniform })
[2024-07-27T06:21:52Z DEBUG naga::proc::constant_evaluator] check: SubexpressionsAreNotConstant
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [167] = AccessIndex { base: [166], index: 1 } : Value(Pointer { base: [2], space: Uniform })
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [168] = Load { pointer: [167] } : Handle([2])
[2024-07-27T06:21:52Z DEBUG naga::front::wgsl::lower::conversion] wgsl automatic_conversion_consensus: ["f32", "f32"]
[2024-07-27T06:21:52Z DEBUG naga::front::wgsl::lower::conversion]     consensus: "f32"
[2024-07-27T06:21:52Z DEBUG naga::proc::constant_evaluator] check: SubexpressionsAreNotConstant
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [169] = Binary { op: Multiply, left: [165], right: [168] } : Handle([2])
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [170] = Load { pointer: [2] } : Handle([9])
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [40] = Literal(I32(8)) : Value(Scalar(Scalar { kind: Sint, width: 4 }))
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [41] = Literal(AbstractInt(0)) : Value(Scalar(Scalar { kind: AbstractInt, width: 8 }))
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [1] = FunctionArgument(0) : Handle([9])
[2024-07-27T06:21:52Z DEBUG naga::proc::constant_evaluator] check: SubexpressionsAreNotConstant
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [2] = AccessIndex { base: [1], index: 1 } : Handle([5])
[2024-07-27T06:21:52Z DEBUG naga::proc::constant_evaluator] check: SubexpressionsAreNotConstant
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [3] = LocalVariable([1]) : Value(Pointer { base: [5], space: Function })
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [4] = AccessIndex { base: [1], index: 5 } : Handle([5])
[2024-07-27T06:21:52Z DEBUG naga::proc::constant_evaluator] check: SubexpressionsAreNotConstant
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [5] = AccessIndex { base: [1], index: 0 } : Handle([5])
[2024-07-27T06:21:52Z DEBUG naga::proc::constant_evaluator] check: SubexpressionsAreNotConstant
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [6] = Swizzle { size: Bi, vector: [5], pattern: [X, Y, X, X] } : Value(Vector { size: Bi, scalar: Scalar { kind: Float, width: 4 } })
[2024-07-27T06:21:52Z DEBUG naga::proc::constant_evaluator] check: SubexpressionsAreNotConstant
[2024-07-27T06:21:52Z DEBUG naga::proc::constant_evaluator] check: SubexpressionsAreNotConstant
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [7] = AccessIndex { base: [1], index: 3 } : Handle([4])
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [8] = AccessIndex { base: [1], index: 4 } : Handle([4])
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [9] = Literal(AbstractFloat(0.5)) : Value(Scalar(Scalar { kind: AbstractFloat, width: 8 }))
[2024-07-27T06:21:52Z DEBUG naga::front::wgsl::lower::conversion] wgsl automatic_conversion_consensus: ["vec2<f32>", "{AbstractFloat}"]
[2024-07-27T06:21:52Z DEBUG naga::front::wgsl::lower::conversion]     consensus: "f32"
[2024-07-27T06:21:52Z DEBUG naga::proc::constant_evaluator] check: SubexpressionsAreNotConstant
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [10] = Literal(F32(0.5)) : Value(Scalar(Scalar { kind: Float, width: 4 }))
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [11] = Binary { op: Multiply, left: [8], right: [10] } : Handle([4])
[2024-07-27T06:21:52Z DEBUG naga::front::wgsl::lower::conversion] wgsl automatic_conversion_consensus: ["vec2<f32>", "vec2<f32>"]
[2024-07-27T06:21:52Z DEBUG naga::front::wgsl::lower::conversion]     consensus: "f32"
[2024-07-27T06:21:52Z DEBUG naga::proc::constant_evaluator] check: SubexpressionsAreNotConstant
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [12] = Binary { op: Add, left: [7], right: [11] } : Handle([4])
[2024-07-27T06:21:52Z DEBUG naga::proc::constant_evaluator] check: SubexpressionsAreNotConstant
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [13] = Swizzle { size: Bi, vector: [12], pattern: [X, Y, X, X] } : Value(Vector { size: Bi, scalar: Scalar { kind: Float, width: 4 } })
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [14] = CallResult([3]) : Handle([2])
[2024-07-27T06:21:52Z DEBUG naga::proc::constant_evaluator] check: SubexpressionsAreNotConstant
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [15] = LocalVariable([2]) : Value(Pointer { base: [2], space: Function })
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [16] = AccessIndex { base: [1], index: 6 } : Handle([2])
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [17] = Literal(AbstractFloat(0.0)) : Value(Scalar(Scalar { kind: AbstractFloat, width: 8 }))
[2024-07-27T06:21:52Z DEBUG naga::front::wgsl::lower::conversion] wgsl automatic_conversion_consensus: ["f32", "{AbstractFloat}"]
[2024-07-27T06:21:52Z DEBUG naga::front::wgsl::lower::conversion]     consensus: "f32"
[2024-07-27T06:21:52Z DEBUG naga::proc::constant_evaluator] check: SubexpressionsAreNotConstant
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [18] = Literal(F32(0.0)) : Value(Scalar(Scalar { kind: Float, width: 4 }))
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [19] = Binary { op: Greater, left: [16], right: [18] } : Value(Scalar(Scalar { kind: Bool, width: 1 }))
[2024-07-27T06:21:52Z DEBUG naga::proc::constant_evaluator] check: SubexpressionsAreNotConstant
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [20] = Load { pointer: [15] } : Handle([2])
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [21] = AccessIndex { base: [1], index: 6 } : Handle([2])
[2024-07-27T06:21:52Z DEBUG naga::front::wgsl::lower::conversion] wgsl automatic_conversion_consensus: ["f32", "f32"]
[2024-07-27T06:21:52Z DEBUG naga::front::wgsl::lower::conversion]     consensus: "f32"
[2024-07-27T06:21:52Z DEBUG naga::proc::constant_evaluator] check: SubexpressionsAreNotConstant
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [22] = Binary { op: Subtract, left: [20], right: [21] } : Handle([2])
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [23] = Literal(AbstractFloat(0.0)) : Value(Scalar(Scalar { kind: AbstractFloat, width: 8 }))
[2024-07-27T06:21:52Z DEBUG naga::proc::constant_evaluator] check: SubexpressionsAreNotConstant
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [24] = Literal(F32(0.0)) : Value(Scalar(Scalar { kind: Float, width: 4 }))
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [25] = Math { fun: Max, arg: [22], arg1: Some([24]), arg2: None, arg3: None } : Handle([2])
[2024-07-27T06:21:52Z DEBUG naga::proc::constant_evaluator] check: SubexpressionsAreNotConstant
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [26] = LocalVariable([3]) : Value(Pointer { base: [2], space: Function })
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [27] = AccessIndex { base: [1], index: 0 } : Handle([5])
[2024-07-27T06:21:52Z DEBUG naga::proc::constant_evaluator] check: SubexpressionsAreNotConstant
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [28] = Swizzle { size: Bi, vector: [27], pattern: [X, Y, X, X] } : Value(Vector { size: Bi, scalar: Scalar { kind: Float, width: 4 } })
[2024-07-27T06:21:52Z DEBUG naga::proc::constant_evaluator] check: SubexpressionsAreNotConstant
[2024-07-27T06:21:52Z DEBUG naga::proc::constant_evaluator] check: SubexpressionsAreNotConstant
[2024-07-27T06:21:52Z DEBUG naga::proc::constant_evaluator] check: SubexpressionsAreNotConstant
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [29] = AccessIndex { base: [1], index: 3 } : Handle([4])
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [30] = AccessIndex { base: [1], index: 6 } : Handle([2])
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [31] = AccessIndex { base: [1], index: 6 } : Handle([2])
[2024-07-27T06:21:52Z DEBUG naga::proc::constant_evaluator] check: SubexpressionsAreNotConstant
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [32] = Compose { ty: [4], components: [[30], [31]] } : Handle([4])
[2024-07-27T06:21:52Z DEBUG naga::front::wgsl::lower::conversion] wgsl automatic_conversion_consensus: ["vec2<f32>", "vec2<f32>"]
[2024-07-27T06:21:52Z DEBUG naga::front::wgsl::lower::conversion]     consensus: "f32"
[2024-07-27T06:21:52Z DEBUG naga::proc::constant_evaluator] check: SubexpressionsAreNotConstant
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [33] = Binary { op: Add, left: [29], right: [32] } : Handle([4])
[2024-07-27T06:21:52Z DEBUG naga::proc::constant_evaluator] check: SubexpressionsAreNotConstant
[2024-07-27T06:21:52Z DEBUG naga::proc::constant_evaluator] check: SubexpressionsAreNotConstant
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [34] = AccessIndex { base: [1], index: 4 } : Handle([4])
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [35] = AccessIndex { base: [1], index: 6 } : Handle([2])
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [36] = Literal(AbstractFloat(2.0)) : Value(Scalar(Scalar { kind: AbstractFloat, width: 8 }))
[2024-07-27T06:21:52Z DEBUG naga::front::wgsl::lower::conversion] wgsl automatic_conversion_consensus: ["f32", "{AbstractFloat}"]
[2024-07-27T06:21:52Z DEBUG naga::front::wgsl::lower::conversion]     consensus: "f32"
[2024-07-27T06:21:52Z DEBUG naga::proc::constant_evaluator] check: SubexpressionsAreNotConstant
[2024-07-27T06:21:52Z DEBUG naga::proc::constant_evaluator] check: SubexpressionsAreNotConstant
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [37] = Literal(F32(2.0)) : Value(Scalar(Scalar { kind: Float, width: 4 }))
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [38] = Binary { op: Multiply, left: [35], right: [37] } : Value(Scalar(Scalar { kind: Float, width: 4 }))
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [39] = AccessIndex { base: [1], index: 6 } : Handle([2])
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [40] = Literal(AbstractFloat(2.0)) : Value(Scalar(Scalar { kind: AbstractFloat, width: 8 }))
[2024-07-27T06:21:52Z DEBUG naga::front::wgsl::lower::conversion] wgsl automatic_conversion_consensus: ["f32", "{AbstractFloat}"]
[2024-07-27T06:21:52Z DEBUG naga::front::wgsl::lower::conversion]     consensus: "f32"
[2024-07-27T06:21:52Z DEBUG naga::proc::constant_evaluator] check: SubexpressionsAreNotConstant
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [41] = Literal(F32(2.0)) : Value(Scalar(Scalar { kind: Float, width: 4 }))
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [42] = Binary { op: Multiply, left: [39], right: [41] } : Value(Scalar(Scalar { kind: Float, width: 4 }))
[2024-07-27T06:21:52Z DEBUG naga::proc::constant_evaluator] check: SubexpressionsAreNotConstant
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [43] = Compose { ty: [4], components: [[38], [42]] } : Handle([4])
[2024-07-27T06:21:52Z DEBUG naga::front::wgsl::lower::conversion] wgsl automatic_conversion_consensus: ["vec2<f32>", "vec2<f32>"]
[2024-07-27T06:21:52Z DEBUG naga::front::wgsl::lower::conversion]     consensus: "f32"
[2024-07-27T06:21:52Z DEBUG naga::proc::constant_evaluator] check: SubexpressionsAreNotConstant
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [44] = Binary { op: Subtract, left: [34], right: [43] } : Handle([4])
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [45] = Load { pointer: [26] } : Handle([2])
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [46] = CallResult([2]) : Handle([2])
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [47] = LocalVariable([4]) : Value(Pointer { base: [2], space: Function })
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [48] = Load { pointer: [26] } : Handle([2])
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [49] = Literal(AbstractFloat(0.5)) : Value(Scalar(Scalar { kind: AbstractFloat, width: 8 }))
[2024-07-27T06:21:52Z DEBUG naga::front::wgsl::lower::conversion] wgsl automatic_conversion_consensus: ["f32", "{AbstractFloat}"]
[2024-07-27T06:21:52Z DEBUG naga::front::wgsl::lower::conversion]     consensus: "f32"
[2024-07-27T06:21:52Z DEBUG naga::proc::constant_evaluator] check: SubexpressionsAreNotConstant
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [50] = Literal(F32(0.5)) : Value(Scalar(Scalar { kind: Float, width: 4 }))
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [51] = Binary { op: Subtract, left: [48], right: [50] } : Handle([2])
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [52] = Literal(AbstractFloat(0.0)) : Value(Scalar(Scalar { kind: AbstractFloat, width: 8 }))
[2024-07-27T06:21:52Z DEBUG naga::proc::constant_evaluator] check: SubexpressionsAreNotConstant
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [53] = Literal(F32(0.0)) : Value(Scalar(Scalar { kind: Float, width: 4 }))
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [54] = Math { fun: Max, arg: [51], arg1: Some([53]), arg2: None, arg3: None } : Handle([2])
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [55] = Load { pointer: [26] } : Handle([2])
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [56] = Literal(AbstractFloat(0.5)) : Value(Scalar(Scalar { kind: AbstractFloat, width: 8 }))
[2024-07-27T06:21:52Z DEBUG naga::front::wgsl::lower::conversion] wgsl automatic_conversion_consensus: ["f32", "{AbstractFloat}"]
[2024-07-27T06:21:52Z DEBUG naga::front::wgsl::lower::conversion]     consensus: "f32"
[2024-07-27T06:21:52Z DEBUG naga::proc::constant_evaluator] check: SubexpressionsAreNotConstant
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [57] = Literal(F32(0.5)) : Value(Scalar(Scalar { kind: Float, width: 4 }))
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [58] = Binary { op: Add, left: [55], right: [57] } : Handle([2])
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [59] = Load { pointer: [47] } : Handle([2])
[2024-07-27T06:21:52Z DEBUG naga::proc::constant_evaluator] check: SubexpressionsAreNotConstant
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [60] = Math { fun: SmoothStep, arg: [54], arg1: Some([58]), arg2: Some([59]), arg3: None } : Handle([2])
[2024-07-27T06:21:52Z DEBUG naga::proc::constant_evaluator] check: SubexpressionsAreNotConstant
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [61] = LocalVariable([5]) : Value(Pointer { base: [2], space: Function })
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [62] = AccessIndex { base: [1], index: 1 } : Handle([5])
[2024-07-27T06:21:52Z DEBUG naga::proc::constant_evaluator] check: SubexpressionsAreNotConstant
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [63] = AccessIndex { base: [1], index: 2 } : Handle([5])
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [64] = Load { pointer: [61] } : Handle([2])
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [65] = Load { pointer: [61] } : Handle([2])
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [66] = Load { pointer: [61] } : Handle([2])
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [67] = Load { pointer: [61] } : Handle([2])
[2024-07-27T06:21:52Z DEBUG naga::proc::constant_evaluator] check: SubexpressionsAreNotConstant
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [68] = Compose { ty: [5], components: [[64], [65], [66], [67]] } : Handle([5])
[2024-07-27T06:21:52Z DEBUG naga::proc::constant_evaluator] check: SubexpressionsAreNotConstant
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [69] = Math { fun: Mix, arg: [62], arg1: Some([63]), arg2: Some([68]), arg3: None } : Handle([5])
[2024-07-27T06:21:52Z DEBUG naga::proc::constant_evaluator] check: SubexpressionsAreNotConstant
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [70] = AccessIndex { base: [1], index: 0 } : Handle([5])
[2024-07-27T06:21:52Z DEBUG naga::proc::constant_evaluator] check: SubexpressionsAreNotConstant
[2024-07-27T06:21:52Z DEBUG naga::proc::constant_evaluator] check: SubexpressionsAreNotConstant
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [71] = AccessIndex { base: [70], index: 0 } : Value(Scalar(Scalar { kind: Float, width: 4 }))
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [72] = AccessIndex { base: [1], index: 0 } : Handle([5])
[2024-07-27T06:21:52Z DEBUG naga::proc::constant_evaluator] check: SubexpressionsAreNotConstant
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [73] = AccessIndex { base: [72], index: 1 } : Value(Scalar(Scalar { kind: Float, width: 4 }))
[2024-07-27T06:21:52Z DEBUG naga::proc::constant_evaluator] check: SubexpressionsAreNotConstant
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [74] = Compose { ty: [4], components: [[71], [73]] } : Handle([4])
[2024-07-27T06:21:52Z DEBUG naga::proc::constant_evaluator] check: SubexpressionsAreNotConstant
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [75] = AccessIndex { base: [1], index: 3 } : Handle([4])
[2024-07-27T06:21:52Z DEBUG naga::proc::constant_evaluator] check: SubexpressionsAreNotConstant
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [76] = AccessIndex { base: [1], index: 4 } : Handle([4])
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [77] = Load { pointer: [15] } : Handle([2])
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [78] = CallResult([2]) : Handle([2])
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [79] = LocalVariable([6]) : Value(Pointer { base: [2], space: Function })
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [80] = Literal(AbstractFloat(1.0)) : Value(Scalar(Scalar { kind: AbstractFloat, width: 8 }))
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [81] = Load { pointer: [15] } : Handle([2])
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [82] = Literal(AbstractFloat(0.5)) : Value(Scalar(Scalar { kind: AbstractFloat, width: 8 }))
[2024-07-27T06:21:52Z DEBUG naga::front::wgsl::lower::conversion] wgsl automatic_conversion_consensus: ["f32", "{AbstractFloat}"]
[2024-07-27T06:21:52Z DEBUG naga::front::wgsl::lower::conversion]     consensus: "f32"
[2024-07-27T06:21:52Z DEBUG naga::proc::constant_evaluator] check: SubexpressionsAreNotConstant
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [83] = Literal(F32(0.5)) : Value(Scalar(Scalar { kind: Float, width: 4 }))
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [84] = Binary { op: Subtract, left: [81], right: [83] } : Handle([2])
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [85] = Literal(AbstractFloat(0.0)) : Value(Scalar(Scalar { kind: AbstractFloat, width: 8 }))
[2024-07-27T06:21:52Z DEBUG naga::proc::constant_evaluator] check: SubexpressionsAreNotConstant
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [86] = Literal(F32(0.0)) : Value(Scalar(Scalar { kind: Float, width: 4 }))
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [87] = Math { fun: Max, arg: [84], arg1: Some([86]), arg2: None, arg3: None } : Handle([2])
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [88] = Load { pointer: [15] } : Handle([2])
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [89] = Literal(AbstractFloat(0.5)) : Value(Scalar(Scalar { kind: AbstractFloat, width: 8 }))
[2024-07-27T06:21:52Z DEBUG naga::front::wgsl::lower::conversion] wgsl automatic_conversion_consensus: ["f32", "{AbstractFloat}"]
[2024-07-27T06:21:52Z DEBUG naga::front::wgsl::lower::conversion]     consensus: "f32"
[2024-07-27T06:21:52Z DEBUG naga::proc::constant_evaluator] check: SubexpressionsAreNotConstant
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [90] = Literal(F32(0.5)) : Value(Scalar(Scalar { kind: Float, width: 4 }))
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [91] = Binary { op: Add, left: [88], right: [90] } : Handle([2])
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [92] = Load { pointer: [79] } : Handle([2])
[2024-07-27T06:21:52Z DEBUG naga::proc::constant_evaluator] check: SubexpressionsAreNotConstant
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [93] = Math { fun: SmoothStep, arg: [87], arg1: Some([91]), arg2: Some([92]), arg3: None } : Handle([2])
[2024-07-27T06:21:52Z DEBUG naga::front::wgsl::lower::conversion] wgsl automatic_conversion_consensus: ["{AbstractFloat}", "f32"]
[2024-07-27T06:21:52Z DEBUG naga::front::wgsl::lower::conversion]     consensus: "f32"
[2024-07-27T06:21:52Z DEBUG naga::proc::constant_evaluator] check: SubexpressionsAreNotConstant
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [94] = Literal(F32(1.0)) : Value(Scalar(Scalar { kind: Float, width: 4 }))
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [95] = Binary { op: Subtract, left: [94], right: [93] } : Value(Scalar(Scalar { kind: Float, width: 4 }))
[2024-07-27T06:21:52Z DEBUG naga::proc::constant_evaluator] check: SubexpressionsAreNotConstant
[2024-07-27T06:21:52Z DEBUG naga::proc::constant_evaluator] check: SubexpressionsAreNotConstant
[2024-07-27T06:21:52Z DEBUG naga::proc::constant_evaluator] check: SubexpressionsAreNotConstant
[2024-07-27T06:21:52Z DEBUG naga::proc::constant_evaluator] check: SubexpressionsAreNotConstant
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [96] = LocalVariable([7]) : Value(Pointer { base: [2], space: Function })
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [97] = AccessIndex { base: [3], index: 0 } : Value(ValuePointer { size: None, scalar: Scalar { kind: Float, width: 4 }, space: Function })
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [98] = Load { pointer: [97] } : Value(Scalar(Scalar { kind: Float, width: 4 }))
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [99] = AccessIndex { base: [3], index: 1 } : Value(ValuePointer { size: None, scalar: Scalar { kind: Float, width: 4 }, space: Function })
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [100] = Load { pointer: [99] } : Value(Scalar(Scalar { kind: Float, width: 4 }))
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [101] = AccessIndex { base: [3], index: 2 } : Value(ValuePointer { size: None, scalar: Scalar { kind: Float, width: 4 }, space: Function })
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [102] = Load { pointer: [101] } : Value(Scalar(Scalar { kind: Float, width: 4 }))
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [103] = AccessIndex { base: [3], index: 3 } : Value(ValuePointer { size: None, scalar: Scalar { kind: Float, width: 4 }, space: Function })
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [104] = Load { pointer: [103] } : Value(Scalar(Scalar { kind: Float, width: 4 }))
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [105] = Load { pointer: [96] } : Handle([2])
[2024-07-27T06:21:52Z DEBUG naga::front::wgsl::lower::conversion] wgsl automatic_conversion_consensus: ["f32", "f32"]
[2024-07-27T06:21:52Z DEBUG naga::front::wgsl::lower::conversion]     consensus: "f32"
[2024-07-27T06:21:52Z DEBUG naga::proc::constant_evaluator] check: SubexpressionsAreNotConstant
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [106] = Binary { op: Multiply, left: [104], right: [105] } : Handle([2])
[2024-07-27T06:21:52Z DEBUG naga::proc::constant_evaluator] check: SubexpressionsAreNotConstant
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [107] = Compose { ty: [5], components: [[98], [100], [102], [106]] } : Handle([5])
[2024-07-27T06:21:52Z DEBUG naga::proc::constant_evaluator] check: SubexpressionsAreNotConstant
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [108] = AccessIndex { base: [1], index: 7 } : Handle([5])
[2024-07-27T06:21:52Z DEBUG naga::proc::constant_evaluator] check: SubexpressionsAreNotConstant
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [109] = AccessIndex { base: [108], index: 3 } : Value(Scalar(Scalar { kind: Float, width: 4 }))
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [110] = Literal(AbstractFloat(0.0)) : Value(Scalar(Scalar { kind: AbstractFloat, width: 8 }))
[2024-07-27T06:21:52Z DEBUG naga::front::wgsl::lower::conversion] wgsl automatic_conversion_consensus: ["f32", "{AbstractFloat}"]
[2024-07-27T06:21:52Z DEBUG naga::front::wgsl::lower::conversion]     consensus: "f32"
[2024-07-27T06:21:52Z DEBUG naga::proc::constant_evaluator] check: SubexpressionsAreNotConstant
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [111] = Literal(F32(0.0)) : Value(Scalar(Scalar { kind: Float, width: 4 }))
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [112] = Binary { op: Greater, left: [109], right: [111] } : Value(Scalar(Scalar { kind: Bool, width: 1 }))
[2024-07-27T06:21:52Z DEBUG naga::proc::constant_evaluator] check: SubexpressionsAreNotConstant
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [113] = AccessIndex { base: [1], index: 5 } : Handle([5])
[2024-07-27T06:21:52Z DEBUG naga::proc::constant_evaluator] check: SubexpressionsAreNotConstant
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [114] = AccessIndex { base: [1], index: 0 } : Handle([5])
[2024-07-27T06:21:52Z DEBUG naga::proc::constant_evaluator] check: SubexpressionsAreNotConstant
[2024-07-27T06:21:52Z DEBUG naga::proc::constant_evaluator] check: SubexpressionsAreNotConstant
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [115] = Swizzle { size: Bi, vector: [114], pattern: [X, Y, X, X] } : Value(Vector { size: Bi, scalar: Scalar { kind: Float, width: 4 } })
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [116] = AccessIndex { base: [1], index: 8 } : Handle([4])
[2024-07-27T06:21:52Z DEBUG naga::front::wgsl::lower::conversion] wgsl automatic_conversion_consensus: ["vec2<f32>", "vec2<f32>"]
[2024-07-27T06:21:52Z DEBUG naga::front::wgsl::lower::conversion]     consensus: "f32"
[2024-07-27T06:21:52Z DEBUG naga::proc::constant_evaluator] check: SubexpressionsAreNotConstant
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [117] = Binary { op: Subtract, left: [115], right: [116] } : Value(Vector { size: Bi, scalar: Scalar { kind: Float, width: 4 } })
[2024-07-27T06:21:52Z DEBUG naga::proc::constant_evaluator] check: SubexpressionsAreNotConstant
[2024-07-27T06:21:52Z DEBUG naga::proc::constant_evaluator] check: SubexpressionsAreNotConstant
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [118] = AccessIndex { base: [1], index: 3 } : Handle([4])
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [119] = AccessIndex { base: [1], index: 4 } : Handle([4])
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [120] = Literal(AbstractFloat(0.5)) : Value(Scalar(Scalar { kind: AbstractFloat, width: 8 }))
[2024-07-27T06:21:52Z DEBUG naga::front::wgsl::lower::conversion] wgsl automatic_conversion_consensus: ["vec2<f32>", "{AbstractFloat}"]
[2024-07-27T06:21:52Z DEBUG naga::front::wgsl::lower::conversion]     consensus: "f32"
[2024-07-27T06:21:52Z DEBUG naga::proc::constant_evaluator] check: SubexpressionsAreNotConstant
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [121] = Literal(F32(0.5)) : Value(Scalar(Scalar { kind: Float, width: 4 }))
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [122] = Binary { op: Multiply, left: [119], right: [121] } : Handle([4])
[2024-07-27T06:21:52Z DEBUG naga::front::wgsl::lower::conversion] wgsl automatic_conversion_consensus: ["vec2<f32>", "vec2<f32>"]
[2024-07-27T06:21:52Z DEBUG naga::front::wgsl::lower::conversion]     consensus: "f32"
[2024-07-27T06:21:52Z DEBUG naga::proc::constant_evaluator] check: SubexpressionsAreNotConstant
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [123] = Binary { op: Add, left: [118], right: [122] } : Handle([4])
[2024-07-27T06:21:52Z DEBUG naga::proc::constant_evaluator] check: SubexpressionsAreNotConstant
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [124] = Swizzle { size: Bi, vector: [123], pattern: [X, Y, X, X] } : Value(Vector { size: Bi, scalar: Scalar { kind: Float, width: 4 } })
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [125] = CallResult([3]) : Handle([2])
[2024-07-27T06:21:52Z DEBUG naga::proc::constant_evaluator] check: SubexpressionsAreNotConstant
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [126] = AccessIndex { base: [1], index: 0 } : Handle([5])
[2024-07-27T06:21:52Z DEBUG naga::proc::constant_evaluator] check: SubexpressionsAreNotConstant
[2024-07-27T06:21:52Z DEBUG naga::proc::constant_evaluator] check: SubexpressionsAreNotConstant
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [127] = Swizzle { size: Bi, vector: [126], pattern: [X, Y, X, X] } : Value(Vector { size: Bi, scalar: Scalar { kind: Float, width: 4 } })
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [128] = AccessIndex { base: [1], index: 3 } : Handle([4])
[2024-07-27T06:21:52Z DEBUG naga::front::wgsl::lower::conversion] wgsl automatic_conversion_consensus: ["vec2<f32>", "vec2<f32>"]
[2024-07-27T06:21:52Z DEBUG naga::front::wgsl::lower::conversion]     consensus: "f32"
[2024-07-27T06:21:52Z DEBUG naga::proc::constant_evaluator] check: SubexpressionsAreNotConstant
[2024-07-27T06:21:52Z DEBUG naga::proc::constant_evaluator] check: SubexpressionsAreNotConstant
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [129] = Binary { op: Subtract, left: [127], right: [128] } : Value(Vector { size: Bi, scalar: Scalar { kind: Float, width: 4 } })
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [130] = AccessIndex { base: [1], index: 8 } : Handle([4])
[2024-07-27T06:21:52Z DEBUG naga::front::wgsl::lower::conversion] wgsl automatic_conversion_consensus: ["vec2<f32>", "vec2<f32>"]
[2024-07-27T06:21:52Z DEBUG naga::front::wgsl::lower::conversion]     consensus: "f32"
[2024-07-27T06:21:52Z DEBUG naga::proc::constant_evaluator] check: SubexpressionsAreNotConstant
[2024-07-27T06:21:52Z DEBUG naga::proc::constant_evaluator] check: SubexpressionsAreNotConstant
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [131] = Binary { op: Subtract, left: [129], right: [130] } : Value(Vector { size: Bi, scalar: Scalar { kind: Float, width: 4 } })
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [132] = AccessIndex { base: [1], index: 4 } : Handle([4])
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [133] = Literal(AbstractFloat(2.0)) : Value(Scalar(Scalar { kind: AbstractFloat, width: 8 }))
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [134] = Splat { size: Bi, value: [133] } : Value(Vector { size: Bi, scalar: Scalar { kind: AbstractFloat, width: 8 } })
[2024-07-27T06:21:52Z DEBUG naga::front::wgsl::lower::conversion] wgsl automatic_conversion_consensus: ["vec2<f32>", "vec2<{AbstractFloat}>"]
[2024-07-27T06:21:52Z DEBUG naga::front::wgsl::lower::conversion]     consensus: "f32"
[2024-07-27T06:21:52Z DEBUG naga::proc::constant_evaluator] check: SubexpressionsAreNotConstant
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [135] = Literal(F32(2.0)) : Value(Scalar(Scalar { kind: Float, width: 4 }))
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [136] = Splat { size: Bi, value: [135] } : Value(Vector { size: Bi, scalar: Scalar { kind: Float, width: 4 } })
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [137] = Binary { op: Divide, left: [132], right: [136] } : Handle([4])
[2024-07-27T06:21:52Z DEBUG naga::front::wgsl::lower::conversion] wgsl automatic_conversion_consensus: ["vec2<f32>", "vec2<f32>"]
[2024-07-27T06:21:52Z DEBUG naga::front::wgsl::lower::conversion]     consensus: "f32"
[2024-07-27T06:21:52Z DEBUG naga::proc::constant_evaluator] check: SubexpressionsAreNotConstant
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [138] = Binary { op: Subtract, left: [131], right: [137] } : Value(Vector { size: Bi, scalar: Scalar { kind: Float, width: 4 } })
[2024-07-27T06:21:52Z DEBUG naga::proc::constant_evaluator] check: SubexpressionsAreNotConstant
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [139] = AccessIndex { base: [1], index: 4 } : Handle([4])
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [140] = Literal(AbstractFloat(2.0)) : Value(Scalar(Scalar { kind: AbstractFloat, width: 8 }))
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [141] = Splat { size: Bi, value: [140] } : Value(Vector { size: Bi, scalar: Scalar { kind: AbstractFloat, width: 8 } })
[2024-07-27T06:21:52Z DEBUG naga::front::wgsl::lower::conversion] wgsl automatic_conversion_consensus: ["vec2<f32>", "vec2<{AbstractFloat}>"]
[2024-07-27T06:21:52Z DEBUG naga::front::wgsl::lower::conversion]     consensus: "f32"
[2024-07-27T06:21:52Z DEBUG naga::proc::constant_evaluator] check: SubexpressionsAreNotConstant
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [142] = Literal(F32(2.0)) : Value(Scalar(Scalar { kind: Float, width: 4 }))
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [143] = Splat { size: Bi, value: [142] } : Value(Vector { size: Bi, scalar: Scalar { kind: Float, width: 4 } })
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [144] = Binary { op: Divide, left: [139], right: [143] } : Handle([4])
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [145] = CallResult([1]) : Handle([2])
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [146] = Literal(AbstractFloat(0.0)) : Value(Scalar(Scalar { kind: AbstractFloat, width: 8 }))
[2024-07-27T06:21:52Z DEBUG naga::proc::constant_evaluator] check: SubexpressionsAreNotConstant
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [147] = Literal(F32(0.0)) : Value(Scalar(Scalar { kind: Float, width: 4 }))
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [148] = Math { fun: Max, arg: [145], arg1: Some([147]), arg2: None, arg3: None } : Handle([2])
[2024-07-27T06:21:52Z DEBUG naga::proc::constant_evaluator] check: SubexpressionsAreNotConstant
[2024-07-27T06:21:52Z DEBUG naga::proc::constant_evaluator] check: SubexpressionsAreNotConstant
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [149] = Literal(AbstractFloat(1.0)) : Value(Scalar(Scalar { kind: AbstractFloat, width: 8 }))
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [150] = AccessIndex { base: [1], index: 9 } : Handle([2])
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [151] = Unary { op: Negate, expr: [150] } : Handle([2])
[2024-07-27T06:21:52Z DEBUG naga::proc::constant_evaluator] check: SubexpressionsAreNotConstant
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [152] = AccessIndex { base: [1], index: 9 } : Handle([2])
[2024-07-27T06:21:52Z DEBUG naga::proc::constant_evaluator] check: SubexpressionsAreNotConstant
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [153] = Math { fun: SmoothStep, arg: [151], arg1: Some([152]), arg2: Some([148]), arg3: None } : Handle([2])
[2024-07-27T06:21:52Z DEBUG naga::front::wgsl::lower::conversion] wgsl automatic_conversion_consensus: ["{AbstractFloat}", "f32"]
[2024-07-27T06:21:52Z DEBUG naga::front::wgsl::lower::conversion]     consensus: "f32"
[2024-07-27T06:21:52Z DEBUG naga::proc::constant_evaluator] check: SubexpressionsAreNotConstant
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [154] = Literal(F32(1.0)) : Value(Scalar(Scalar { kind: Float, width: 4 }))
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [155] = Binary { op: Subtract, left: [154], right: [153] } : Value(Scalar(Scalar { kind: Float, width: 4 }))
[2024-07-27T06:21:52Z DEBUG naga::proc::constant_evaluator] check: SubexpressionsAreNotConstant
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [156] = AccessIndex { base: [1], index: 7 } : Handle([5])
[2024-07-27T06:21:52Z DEBUG naga::proc::constant_evaluator] check: SubexpressionsAreNotConstant
[2024-07-27T06:21:52Z DEBUG naga::proc::constant_evaluator] check: SubexpressionsAreNotConstant
[2024-07-27T06:21:52Z DEBUG naga::proc::constant_evaluator] check: SubexpressionsAreNotConstant
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [157] = AccessIndex { base: [156], index: 0 } : Value(Scalar(Scalar { kind: Float, width: 4 }))
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [158] = AccessIndex { base: [156], index: 1 } : Value(Scalar(Scalar { kind: Float, width: 4 }))
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [159] = AccessIndex { base: [156], index: 2 } : Value(Scalar(Scalar { kind: Float, width: 4 }))
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [160] = Literal(AbstractFloat(0.0)) : Value(Scalar(Scalar { kind: AbstractFloat, width: 8 }))
[2024-07-27T06:21:52Z DEBUG naga::proc::constant_evaluator] check: SubexpressionsAreNotConstant
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [161] = Literal(F32(0.0)) : Value(Scalar(Scalar { kind: Float, width: 4 }))
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [162] = Compose { ty: [5], components: [[157], [158], [159], [161]] } : Handle([5])
[2024-07-27T06:21:52Z DEBUG naga::proc::constant_evaluator] check: SubexpressionsAreNotConstant
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [163] = AccessIndex { base: [107], index: 3 } : Value(Scalar(Scalar { kind: Float, width: 4 }))
[2024-07-27T06:21:52Z DEBUG naga::proc::constant_evaluator] check: SubexpressionsAreNotConstant
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [164] = Math { fun: Mix, arg: [162], arg1: Some([107]), arg2: Some([163]), arg3: None } : Handle([5])
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [165] = Literal(AbstractFloat(1.0)) : Value(Scalar(Scalar { kind: AbstractFloat, width: 8 }))
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [166] = Load { pointer: [96] } : Handle([2])
[2024-07-27T06:21:52Z DEBUG naga::front::wgsl::lower::conversion] wgsl automatic_conversion_consensus: ["{AbstractFloat}", "f32"]
[2024-07-27T06:21:52Z DEBUG naga::front::wgsl::lower::conversion]     consensus: "f32"
[2024-07-27T06:21:52Z DEBUG naga::proc::constant_evaluator] check: SubexpressionsAreNotConstant
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [167] = Literal(F32(1.0)) : Value(Scalar(Scalar { kind: Float, width: 4 }))
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [168] = Binary { op: Subtract, left: [167], right: [166] } : Value(Scalar(Scalar { kind: Float, width: 4 }))
[2024-07-27T06:21:52Z DEBUG naga::front::wgsl::lower::conversion] wgsl automatic_conversion_consensus: ["f32", "f32"]
[2024-07-27T06:21:52Z DEBUG naga::front::wgsl::lower::conversion]     consensus: "f32"
[2024-07-27T06:21:52Z DEBUG naga::proc::constant_evaluator] check: SubexpressionsAreNotConstant
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [169] = Binary { op: Multiply, left: [168], right: [155] } : Value(Scalar(Scalar { kind: Float, width: 4 }))
[2024-07-27T06:21:52Z DEBUG naga::proc::constant_evaluator] check: SubexpressionsAreNotConstant
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [170] = Math { fun: Mix, arg: [164], arg1: Some([156]), arg2: Some([169]), arg3: None } : Handle([5])
[2024-07-27T06:21:52Z DEBUG naga::valid::interface] var GlobalVariable { name: Some("globals"), space: Uniform, binding: Some(ResourceBinding { group: 0, binding: 0 }), ty: [3], init: None }
[2024-07-27T06:21:52Z DEBUG naga::valid::function] var LocalVariable { name: Some("inner_half_size"), ty: [4], init: None }
[2024-07-27T06:21:52Z DEBUG naga::valid::function] var LocalVariable { name: Some("top_left"), ty: [4], init: None }
[2024-07-27T06:21:52Z DEBUG naga::valid::function] var LocalVariable { name: Some("rx"), ty: [2], init: None }
[2024-07-27T06:21:52Z DEBUG naga::valid::function] var LocalVariable { name: Some("ry"), ty: [2], init: None }
[2024-07-27T06:21:52Z DEBUG naga::valid::function] var LocalVariable { name: Some("out"), ty: [9], init: None }
[2024-07-27T06:21:52Z DEBUG naga::valid::function] var LocalVariable { name: Some("pos"), ty: [4], init: None }
[2024-07-27T06:21:52Z DEBUG naga::valid::function] var LocalVariable { name: Some("scale"), ty: [4], init: None }
[2024-07-27T06:21:52Z DEBUG naga::valid::function] var LocalVariable { name: Some("min_border_radius"), ty: [2], init: None }
[2024-07-27T06:21:52Z DEBUG naga::valid::function] var LocalVariable { name: Some("border_radius"), ty: [5], init: None }
[2024-07-27T06:21:52Z DEBUG naga::valid::function] var LocalVariable { name: Some("transform"), ty: [1], init: None }
[2024-07-27T06:21:52Z DEBUG naga::valid::function] var LocalVariable { name: Some("mixed_color"), ty: [5], init: None }
[2024-07-27T06:21:52Z DEBUG naga::valid::function] var LocalVariable { name: Some("border_radius"), ty: [2], init: None }
[2024-07-27T06:21:52Z DEBUG naga::valid::function] var LocalVariable { name: Some("internal_border"), ty: [2], init: None }
[2024-07-27T06:21:52Z DEBUG naga::valid::function] var LocalVariable { name: Some("internal_distance"), ty: [2], init: None }
[2024-07-27T06:21:52Z DEBUG naga::valid::function] var LocalVariable { name: Some("border_mix"), ty: [2], init: None }
[2024-07-27T06:21:52Z DEBUG naga::valid::function] var LocalVariable { name: Some("dist"), ty: [2], init: None }
[2024-07-27T06:21:52Z DEBUG naga::valid::function] var LocalVariable { name: Some("radius_alpha"), ty: [2], init: None }
[2024-07-27T06:21:52Z DEBUG wgpu_hal::gles::device] Naga generated shader:
    #version 320 es
    
    precision highp float;
    precision highp int;
    
    struct Globals {
        mat4x4 transform;
        float scale;
    };
    struct SolidVertexInput {
        uint vertex_index;
        vec4 color;
        vec2 pos;
        vec2 scale;
        vec4 border_color;
        vec4 border_radius;
        float border_width;
        vec4 shadow_color;
        vec2 shadow_offset;
        float shadow_blur_radius;
    };
    struct SolidVertexOutput {
        vec4 position;
        vec4 color;
        vec4 border_color;
        vec2 pos;
        vec2 scale;
        vec4 border_radius;
        float border_width;
        vec4 shadow_color;
        vec2 shadow_offset;
        float shadow_blur_radius;
    };
    layout(std140, binding = 0) uniform Globals_block_0Vertex { Globals _group_0_binding_0_vs; };
    
    layout(location = 0) in vec4 _p2vs_location0;
    layout(location = 1) in vec2 _p2vs_location1;
    layout(location = 2) in vec2 _p2vs_location2;
    layout(location = 3) in vec4 _p2vs_location3;
    layout(location = 4) in vec4 _p2vs_location4;
    layout(location = 5) in float _p2vs_location5;
    layout(location = 6) in vec4 _p2vs_location6;
    layout(location = 7) in vec2 _p2vs_location7;
    layout(location = 8) in float _p2vs_location8;
    layout(location = 0) smooth out vec4 _vs2fs_location0;
    layout(location = 1) smooth out vec4 _vs2fs_location1;
    layout(location = 2) smooth out vec2 _vs2fs_location2;
    layout(location = 3) smooth out vec2 _vs2fs_location3;
    layout(location = 4) smooth out vec4 _vs2fs_location4;
    layout(location = 5) smooth out float _vs2fs_location5;
    layout(location = 6) smooth out vec4 _vs2fs_location6;
    layout(location = 7) smooth out vec2 _vs2fs_location7;
    layout(location = 8) smooth out float _vs2fs_location8;
    
    float rounded_box_sdf(vec2 to_center, vec2 size, float radius) {
        return (length(max(((abs(to_center) - size) + vec2(radius, radius)), vec2(0.0, 0.0))) - radius);
    }
    
    float distance_alg(vec2 frag_coord, vec2 position, vec2 size_1, float radius_1) {
        vec2 inner_half_size = vec2(0.0);
        vec2 top_left = vec2(0.0);
        inner_half_size = ((size_1 - (vec2(radius_1, radius_1) * 2.0)) / vec2(2.0));
        top_left = (position + vec2(radius_1, radius_1));
        vec2 _e15 = top_left;
        vec2 _e17 = inner_half_size;
        vec2 _e19 = inner_half_size;
        float _e21 = rounded_box_sdf(((frag_coord - _e15) - _e17), _e19, 0.0);
        return _e21;
    }
    
    float select_border_radius(vec4 radi, vec2 position_1, vec2 center) {
        float rx = 0.0;
        float ry = 0.0;
        rx = radi.x;
        ry = radi.y;
        rx = ((position_1.x > center.x) ? radi.y : radi.x);
        ry = ((position_1.x > center.x) ? radi.z : radi.w);
        float _e19 = rx;
        float _e20 = ry;
        rx = ((position_1.y > center.y) ? _e20 : _e19);
        float _e25 = rx;
        return _e25;
    }
    
    vec2 vertex_position(uint vertex_index) {
        return vec2(lessThan(((uvec2(1u, 2u) + uvec2(vertex_index)) % uvec2(6u)), uvec2(3u)));
    }
    
    void main() {
        SolidVertexInput input_ = SolidVertexInput(uint(gl_VertexID), _p2vs_location0, _p2vs_location1, _p2vs_location2, _p2vs_location3, _p2vs_location4, _p2vs_location5, _p2vs_location6, _p2vs_location7, _p2vs_location8);
        SolidVertexOutput out_ = SolidVertexOutput(vec4(0.0), vec4(0.0), vec4(0.0), vec2(0.0), vec2(0.0), vec4(0.0), 0.0, vec4(0.0), vec2(0.0), 0.0);
        vec2 pos = vec2(0.0);
        vec2 scale = vec2(0.0);
        float min_border_radius = 0.0;
        vec4 border_radius = vec4(0.0);
        mat4x4 transform = mat4x4(0.0);
        float _e14 = _group_0_binding_0_vs.scale;
        pos = (((input_.pos + min(input_.shadow_offset, vec2(0.0, 0.0))) - vec2(input_.shadow_blur_radius)) * _e14);
        float _e33 = _group_0_binding_0_vs.scale;
        scale = (((input_.scale + vec2(abs(input_.shadow_offset.x), abs(input_.shadow_offset.y))) + vec2((input_.shadow_blur_radius * 2.0))) * _e33);
        min_border_radius = (min(input_.scale.x, input_.scale.y) * 0.5);
        float _e46 = min_border_radius;
        float _e50 = min_border_radius;
        float _e54 = min_border_radius;
        float _e58 = min_border_radius;
        border_radius = vec4(min(input_.border_radius.x, _e46), min(input_.border_radius.y, _e50), min(input_.border_radius.z, _e54), min(input_.border_radius.w, _e58));
        float _e63 = scale.x;
        float _e71 = scale.y;
        vec2 _e83 = pos;
        transform = mat4x4(vec4((_e63 + 1.0), 0.0, 0.0, 0.0), vec4(0.0, (_e71 + 1.0), 0.0, 0.0), vec4(0.0, 0.0, 1.0, 0.0), vec4((_e83 - vec2(0.5, 0.5)), 0.0, 1.0));
        mat4x4 _e96 = _group_0_binding_0_vs.transform;
        mat4x4 _e97 = transform;
        vec2 _e100 = vertex_position(input_.vertex_index);
        out_.position = ((_e96 * _e97) * vec4(_e100, 0.0, 1.0));
        out_.color = input_.color;
        out_.border_color = input_.border_color;
        float _e113 = _group_0_binding_0_vs.scale;
        out_.pos = (input_.pos * _e113);
        float _e119 = _group_0_binding_0_vs.scale;
        out_.scale = (input_.scale * _e119);
        vec4 _e122 = border_radius;
        float _e125 = _group_0_binding_0_vs.scale;
        out_.border_radius = (_e122 * _e125);
        float _e131 = _group_0_binding_0_vs.scale;
        out_.border_width = (input_.border_width * _e131);
        out_.shadow_color = input_.shadow_color;
        float _e139 = _group_0_binding_0_vs.scale;
        out_.shadow_offset = (input_.shadow_offset * _e139);
        float _e145 = _group_0_binding_0_vs.scale;
        out_.shadow_blur_radius = (input_.shadow_blur_radius * _e145);
        SolidVertexOutput _e147 = out_;
        gl_Position = _e147.position;
        _vs2fs_location0 = _e147.color;
        _vs2fs_location1 = _e147.border_color;
        _vs2fs_location2 = _e147.pos;
        _vs2fs_location3 = _e147.scale;
        _vs2fs_location4 = _e147.border_radius;
        _vs2fs_location5 = _e147.border_width;
        _vs2fs_location6 = _e147.shadow_color;
        _vs2fs_location7 = _e147.shadow_offset;
        _vs2fs_location8 = _e147.shadow_blur_radius;
        gl_Position.yz = vec2(-gl_Position.y, gl_Position.z * 2.0 - gl_Position.w);
        gl_PointSize = 1.0;
        return;
    }
    
    
[2024-07-27T06:21:52Z DEBUG wgpu_hal::gles::device] 	Compiled shader NativeShader(5)
[2024-07-27T06:21:52Z DEBUG wgpu_hal::gles::device] Naga generated shader:
    #version 320 es
    
    precision highp float;
    precision highp int;
    
    struct Globals {
        mat4x4 transform;
        float scale;
    };
    struct SolidVertexInput {
        uint vertex_index;
        vec4 color;
        vec2 pos;
        vec2 scale;
        vec4 border_color;
        vec4 border_radius;
        float border_width;
        vec4 shadow_color;
        vec2 shadow_offset;
        float shadow_blur_radius;
    };
    struct SolidVertexOutput {
        vec4 position;
        vec4 color;
        vec4 border_color;
        vec2 pos;
        vec2 scale;
        vec4 border_radius;
        float border_width;
        vec4 shadow_color;
        vec2 shadow_offset;
        float shadow_blur_radius;
    };
    layout(location = 0) smooth in vec4 _vs2fs_location0;
    layout(location = 1) smooth in vec4 _vs2fs_location1;
    layout(location = 2) smooth in vec2 _vs2fs_location2;
    layout(location = 3) smooth in vec2 _vs2fs_location3;
    layout(location = 4) smooth in vec4 _vs2fs_location4;
    layout(location = 5) smooth in float _vs2fs_location5;
    layout(location = 6) smooth in vec4 _vs2fs_location6;
    layout(location = 7) smooth in vec2 _vs2fs_location7;
    layout(location = 8) smooth in float _vs2fs_location8;
    layout(location = 0) out vec4 _fs2p_location0;
    
    float rounded_box_sdf(vec2 to_center, vec2 size, float radius) {
        return (length(max(((abs(to_center) - size) + vec2(radius, radius)), vec2(0.0, 0.0))) - radius);
    }
    
    float distance_alg(vec2 frag_coord, vec2 position, vec2 size_1, float radius_1) {
        vec2 inner_half_size = vec2(0.0);
        vec2 top_left = vec2(0.0);
        inner_half_size = ((size_1 - (vec2(radius_1, radius_1) * 2.0)) / vec2(2.0));
        top_left = (position + vec2(radius_1, radius_1));
        vec2 _e15 = top_left;
        vec2 _e17 = inner_half_size;
        vec2 _e19 = inner_half_size;
        float _e21 = rounded_box_sdf(((frag_coord - _e15) - _e17), _e19, 0.0);
        return _e21;
    }
    
    float select_border_radius(vec4 radi, vec2 position_1, vec2 center) {
        float rx = 0.0;
        float ry = 0.0;
        rx = radi.x;
        ry = radi.y;
        rx = ((position_1.x > center.x) ? radi.y : radi.x);
        ry = ((position_1.x > center.x) ? radi.z : radi.w);
        float _e19 = rx;
        float _e20 = ry;
        rx = ((position_1.y > center.y) ? _e20 : _e19);
        float _e25 = rx;
        return _e25;
    }
    
    vec2 vertex_position(uint vertex_index) {
        return vec2(lessThan(((uvec2(1u, 2u) + uvec2(vertex_index)) % uvec2(6u)), uvec2(3u)));
    }
    
    void main() {
        SolidVertexOutput input_1 = SolidVertexOutput(gl_FragCoord, _vs2fs_location0, _vs2fs_location1, _vs2fs_location2, _vs2fs_location3, _vs2fs_location4, _vs2fs_location5, _vs2fs_location6, _vs2fs_location7, _vs2fs_location8);
        vec4 mixed_color = vec4(0.0);
        float border_radius_1 = 0.0;
        float internal_border = 0.0;
        float internal_distance = 0.0;
        float border_mix = 0.0;
        float dist = 0.0;
        float radius_alpha = 0.0;
        mixed_color = input_1.color;
        float _e12 = select_border_radius(input_1.border_radius, input_1.position.xy, (input_1.pos + (input_1.scale * 0.5)).xy);
        border_radius_1 = _e12;
        if ((input_1.border_width > 0.0)) {
            float _e17 = border_radius_1;
            internal_border = max((_e17 - input_1.border_width), 0.0);
            float _e39 = internal_border;
            float _e40 = distance_alg(input_1.position.xy, (input_1.pos + vec2(input_1.border_width, input_1.border_width)), (input_1.scale - vec2((input_1.border_width * 2.0), (input_1.border_width * 2.0))), _e39);
            internal_distance = _e40;
            float _e42 = internal_border;
            float _e47 = internal_border;
            float _e50 = internal_distance;
            border_mix = smoothstep(max((_e42 - 0.5), 0.0), (_e47 + 0.5), _e50);
            float _e55 = border_mix;
            float _e56 = border_mix;
            float _e57 = border_mix;
            float _e58 = border_mix;
            mixed_color = mix(input_1.color, input_1.border_color, vec4(_e55, _e56, _e57, _e58));
        }
        float _e68 = border_radius_1;
        float _e69 = distance_alg(vec2(input_1.position.x, input_1.position.y), input_1.pos, input_1.scale, _e68);
        dist = _e69;
        float _e71 = border_radius_1;
        float _e76 = border_radius_1;
        float _e79 = dist;
        radius_alpha = (1.0 - smoothstep(max((_e71 - 0.5), 0.0), (_e76 + 0.5), _e79));
        float _e85 = mixed_color.x;
        float _e87 = mixed_color.y;
        float _e89 = mixed_color.z;
        float _e91 = mixed_color.w;
        float _e92 = radius_alpha;
        vec4 quad_color = vec4(_e85, _e87, _e89, (_e91 * _e92));
        if ((input_1.shadow_color.w > 0.0)) {
            float _e110 = select_border_radius(input_1.border_radius, (input_1.position.xy - input_1.shadow_offset), (input_1.pos + (input_1.scale * 0.5)).xy);
            float _e126 = rounded_box_sdf((((input_1.position.xy - input_1.pos) - input_1.shadow_offset) - (input_1.scale / vec2(2.0))), (input_1.scale / vec2(2.0)), _e110);
            float shadow_distance = max(_e126, 0.0);
            float shadow_alpha = (1.0 - smoothstep(-(input_1.shadow_blur_radius), input_1.shadow_blur_radius, shadow_distance));
            vec4 shadow_color = input_1.shadow_color;
            vec4 base_color = mix(vec4(shadow_color.x, shadow_color.y, shadow_color.z, 0.0), quad_color, quad_color.w);
            float _e143 = radius_alpha;
            _fs2p_location0 = mix(base_color, shadow_color, ((1.0 - _e143) * shadow_alpha));
            return;
        } else {
            _fs2p_location0 = quad_color;
            return;
        }
    }
    
    
[2024-07-27T06:21:52Z DEBUG wgpu_hal::gles::device] 	Compiled shader NativeShader(6)
[2024-07-27T06:21:52Z DEBUG wgpu_hal::gles::device] 	Linked program NativeProgram(4)
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [1] = Literal(AbstractInt(0)) : Value(Scalar(Scalar { kind: AbstractInt, width: 8 }))
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [2] = Literal(I32(0)) : Value(Scalar(Scalar { kind: Sint, width: 4 }))
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [3] = Literal(AbstractInt(0)) : Value(Scalar(Scalar { kind: AbstractInt, width: 8 }))
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [1] = FunctionArgument(0) : Handle([4])
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [2] = FunctionArgument(1) : Handle([4])
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [3] = FunctionArgument(2) : Handle([2])
[2024-07-27T06:21:52Z DEBUG naga::proc::constant_evaluator] check: SubexpressionsAreNotConstant
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [4] = Math { fun: Abs, arg: [1], arg1: None, arg2: None, arg3: None } : Handle([4])
[2024-07-27T06:21:52Z DEBUG naga::front::wgsl::lower::conversion] wgsl automatic_conversion_consensus: ["vec2<f32>", "vec2<f32>"]
[2024-07-27T06:21:52Z DEBUG naga::front::wgsl::lower::conversion]     consensus: "f32"
[2024-07-27T06:21:52Z DEBUG naga::proc::constant_evaluator] check: SubexpressionsAreNotConstant
[2024-07-27T06:21:52Z DEBUG naga::proc::constant_evaluator] check: SubexpressionsAreNotConstant
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [5] = Binary { op: Subtract, left: [4], right: [2] } : Handle([4])
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [6] = Compose { ty: [4], components: [[3], [3]] } : Handle([4])
[2024-07-27T06:21:52Z DEBUG naga::front::wgsl::lower::conversion] wgsl automatic_conversion_consensus: ["vec2<f32>", "vec2<f32>"]
[2024-07-27T06:21:52Z DEBUG naga::front::wgsl::lower::conversion]     consensus: "f32"
[2024-07-27T06:21:52Z DEBUG naga::proc::constant_evaluator] check: SubexpressionsAreNotConstant
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [7] = Binary { op: Add, left: [5], right: [6] } : Handle([4])
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [8] = Literal(AbstractFloat(0.0)) : Value(Scalar(Scalar { kind: AbstractFloat, width: 8 }))
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [9] = Literal(AbstractFloat(0.0)) : Value(Scalar(Scalar { kind: AbstractFloat, width: 8 }))
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [10] = Literal(F32(0.0)) : Value(Scalar(Scalar { kind: Float, width: 4 }))
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [11] = Literal(F32(0.0)) : Value(Scalar(Scalar { kind: Float, width: 4 }))
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [12] = Compose { ty: [4], components: [[10], [11]] } : Handle([4])
[2024-07-27T06:21:52Z DEBUG naga::proc::constant_evaluator] check: SubexpressionsAreNotConstant
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [13] = Math { fun: Max, arg: [7], arg1: Some([12]), arg2: None, arg3: None } : Handle([4])
[2024-07-27T06:21:52Z DEBUG naga::proc::constant_evaluator] check: SubexpressionsAreNotConstant
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [14] = Math { fun: Length, arg: [13], arg1: None, arg2: None, arg3: None } : Value(Scalar(Scalar { kind: Float, width: 4 }))
[2024-07-27T06:21:52Z DEBUG naga::front::wgsl::lower::conversion] wgsl automatic_conversion_consensus: ["f32", "f32"]
[2024-07-27T06:21:52Z DEBUG naga::front::wgsl::lower::conversion]     consensus: "f32"
[2024-07-27T06:21:52Z DEBUG naga::proc::constant_evaluator] check: SubexpressionsAreNotConstant
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [15] = Binary { op: Subtract, left: [14], right: [3] } : Value(Scalar(Scalar { kind: Float, width: 4 }))
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [1] = FunctionArgument(0) : Handle([4])
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [2] = FunctionArgument(1) : Handle([4])
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [3] = FunctionArgument(2) : Handle([4])
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [4] = FunctionArgument(3) : Handle([2])
[2024-07-27T06:21:52Z DEBUG naga::proc::constant_evaluator] check: SubexpressionsAreNotConstant
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [5] = Compose { ty: [4], components: [[4], [4]] } : Handle([4])
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [6] = Literal(AbstractFloat(2.0)) : Value(Scalar(Scalar { kind: AbstractFloat, width: 8 }))
[2024-07-27T06:21:52Z DEBUG naga::front::wgsl::lower::conversion] wgsl automatic_conversion_consensus: ["vec2<f32>", "{AbstractFloat}"]
[2024-07-27T06:21:52Z DEBUG naga::front::wgsl::lower::conversion]     consensus: "f32"
[2024-07-27T06:21:52Z DEBUG naga::proc::constant_evaluator] check: SubexpressionsAreNotConstant
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [7] = Literal(F32(2.0)) : Value(Scalar(Scalar { kind: Float, width: 4 }))
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [8] = Binary { op: Multiply, left: [5], right: [7] } : Handle([4])
[2024-07-27T06:21:52Z DEBUG naga::front::wgsl::lower::conversion] wgsl automatic_conversion_consensus: ["vec2<f32>", "vec2<f32>"]
[2024-07-27T06:21:52Z DEBUG naga::front::wgsl::lower::conversion]     consensus: "f32"
[2024-07-27T06:21:52Z DEBUG naga::proc::constant_evaluator] check: SubexpressionsAreNotConstant
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [9] = Binary { op: Subtract, left: [3], right: [8] } : Handle([4])
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [10] = Literal(AbstractFloat(2.0)) : Value(Scalar(Scalar { kind: AbstractFloat, width: 8 }))
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [11] = Splat { size: Bi, value: [10] } : Value(Vector { size: Bi, scalar: Scalar { kind: AbstractFloat, width: 8 } })
[2024-07-27T06:21:52Z DEBUG naga::front::wgsl::lower::conversion] wgsl automatic_conversion_consensus: ["vec2<f32>", "vec2<{AbstractFloat}>"]
[2024-07-27T06:21:52Z DEBUG naga::front::wgsl::lower::conversion]     consensus: "f32"
[2024-07-27T06:21:52Z DEBUG naga::proc::constant_evaluator] check: SubexpressionsAreNotConstant
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [12] = Literal(F32(2.0)) : Value(Scalar(Scalar { kind: Float, width: 4 }))
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [13] = Splat { size: Bi, value: [12] } : Value(Vector { size: Bi, scalar: Scalar { kind: Float, width: 4 } })
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [14] = Binary { op: Divide, left: [9], right: [13] } : Handle([4])
[2024-07-27T06:21:52Z DEBUG naga::proc::constant_evaluator] check: SubexpressionsAreNotConstant
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [15] = LocalVariable([1]) : Value(Pointer { base: [4], space: Function })
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [16] = Compose { ty: [4], components: [[4], [4]] } : Handle([4])
[2024-07-27T06:21:52Z DEBUG naga::front::wgsl::lower::conversion] wgsl automatic_conversion_consensus: ["vec2<f32>", "vec2<f32>"]
[2024-07-27T06:21:52Z DEBUG naga::front::wgsl::lower::conversion]     consensus: "f32"
[2024-07-27T06:21:52Z DEBUG naga::proc::constant_evaluator] check: SubexpressionsAreNotConstant
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [17] = Binary { op: Add, left: [2], right: [16] } : Handle([4])
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [18] = LocalVariable([2]) : Value(Pointer { base: [4], space: Function })
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [19] = Load { pointer: [18] } : Handle([4])
[2024-07-27T06:21:52Z DEBUG naga::front::wgsl::lower::conversion] wgsl automatic_conversion_consensus: ["vec2<f32>", "vec2<f32>"]
[2024-07-27T06:21:52Z DEBUG naga::front::wgsl::lower::conversion]     consensus: "f32"
[2024-07-27T06:21:52Z DEBUG naga::proc::constant_evaluator] check: SubexpressionsAreNotConstant
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [20] = Binary { op: Subtract, left: [1], right: [19] } : Handle([4])
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [21] = Load { pointer: [15] } : Handle([4])
[2024-07-27T06:21:52Z DEBUG naga::front::wgsl::lower::conversion] wgsl automatic_conversion_consensus: ["vec2<f32>", "vec2<f32>"]
[2024-07-27T06:21:52Z DEBUG naga::front::wgsl::lower::conversion]     consensus: "f32"
[2024-07-27T06:21:52Z DEBUG naga::proc::constant_evaluator] check: SubexpressionsAreNotConstant
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [22] = Binary { op: Subtract, left: [20], right: [21] } : Handle([4])
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [23] = Load { pointer: [15] } : Handle([4])
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [24] = Literal(AbstractFloat(0.0)) : Value(Scalar(Scalar { kind: AbstractFloat, width: 8 }))
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [25] = Literal(F32(0.0)) : Value(Scalar(Scalar { kind: Float, width: 4 }))
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [26] = CallResult([1]) : Handle([2])
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [1] = FunctionArgument(0) : Handle([5])
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [2] = FunctionArgument(1) : Handle([4])
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [3] = FunctionArgument(2) : Handle([4])
[2024-07-27T06:21:52Z DEBUG naga::proc::constant_evaluator] check: SubexpressionsAreNotConstant
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [4] = AccessIndex { base: [1], index: 0 } : Value(Scalar(Scalar { kind: Float, width: 4 }))
[2024-07-27T06:21:52Z DEBUG naga::proc::constant_evaluator] check: SubexpressionsAreNotConstant
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [5] = LocalVariable([1]) : Value(Pointer { base: [2], space: Function })
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [6] = AccessIndex { base: [1], index: 1 } : Value(Scalar(Scalar { kind: Float, width: 4 }))
[2024-07-27T06:21:52Z DEBUG naga::proc::constant_evaluator] check: SubexpressionsAreNotConstant
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [7] = LocalVariable([2]) : Value(Pointer { base: [2], space: Function })
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [8] = AccessIndex { base: [1], index: 0 } : Value(Scalar(Scalar { kind: Float, width: 4 }))
[2024-07-27T06:21:52Z DEBUG naga::proc::constant_evaluator] check: SubexpressionsAreNotConstant
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [9] = AccessIndex { base: [1], index: 1 } : Value(Scalar(Scalar { kind: Float, width: 4 }))
[2024-07-27T06:21:52Z DEBUG naga::proc::constant_evaluator] check: SubexpressionsAreNotConstant
[2024-07-27T06:21:52Z DEBUG naga::proc::constant_evaluator] check: SubexpressionsAreNotConstant
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [10] = AccessIndex { base: [2], index: 0 } : Value(Scalar(Scalar { kind: Float, width: 4 }))
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [11] = AccessIndex { base: [3], index: 0 } : Value(Scalar(Scalar { kind: Float, width: 4 }))
[2024-07-27T06:21:52Z DEBUG naga::front::wgsl::lower::conversion] wgsl automatic_conversion_consensus: ["f32", "f32"]
[2024-07-27T06:21:52Z DEBUG naga::front::wgsl::lower::conversion]     consensus: "f32"
[2024-07-27T06:21:52Z DEBUG naga::proc::constant_evaluator] check: SubexpressionsAreNotConstant
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [12] = Binary { op: Greater, left: [10], right: [11] } : Value(Scalar(Scalar { kind: Bool, width: 1 }))
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [13] = Select { condition: [12], accept: [9], reject: [8] } : Value(Scalar(Scalar { kind: Float, width: 4 }))
[2024-07-27T06:21:52Z DEBUG naga::proc::constant_evaluator] check: SubexpressionsAreNotConstant
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [14] = AccessIndex { base: [1], index: 3 } : Value(Scalar(Scalar { kind: Float, width: 4 }))
[2024-07-27T06:21:52Z DEBUG naga::proc::constant_evaluator] check: SubexpressionsAreNotConstant
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [15] = AccessIndex { base: [1], index: 2 } : Value(Scalar(Scalar { kind: Float, width: 4 }))
[2024-07-27T06:21:52Z DEBUG naga::proc::constant_evaluator] check: SubexpressionsAreNotConstant
[2024-07-27T06:21:52Z DEBUG naga::proc::constant_evaluator] check: SubexpressionsAreNotConstant
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [16] = AccessIndex { base: [2], index: 0 } : Value(Scalar(Scalar { kind: Float, width: 4 }))
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [17] = AccessIndex { base: [3], index: 0 } : Value(Scalar(Scalar { kind: Float, width: 4 }))
[2024-07-27T06:21:52Z DEBUG naga::front::wgsl::lower::conversion] wgsl automatic_conversion_consensus: ["f32", "f32"]
[2024-07-27T06:21:52Z DEBUG naga::front::wgsl::lower::conversion]     consensus: "f32"
[2024-07-27T06:21:52Z DEBUG naga::proc::constant_evaluator] check: SubexpressionsAreNotConstant
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [18] = Binary { op: Greater, left: [16], right: [17] } : Value(Scalar(Scalar { kind: Bool, width: 1 }))
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [19] = Select { condition: [18], accept: [15], reject: [14] } : Value(Scalar(Scalar { kind: Float, width: 4 }))
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [20] = Load { pointer: [5] } : Handle([2])
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [21] = Load { pointer: [7] } : Handle([2])
[2024-07-27T06:21:52Z DEBUG naga::proc::constant_evaluator] check: SubexpressionsAreNotConstant
[2024-07-27T06:21:52Z DEBUG naga::proc::constant_evaluator] check: SubexpressionsAreNotConstant
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [22] = AccessIndex { base: [2], index: 1 } : Value(Scalar(Scalar { kind: Float, width: 4 }))
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [23] = AccessIndex { base: [3], index: 1 } : Value(Scalar(Scalar { kind: Float, width: 4 }))
[2024-07-27T06:21:52Z DEBUG naga::front::wgsl::lower::conversion] wgsl automatic_conversion_consensus: ["f32", "f32"]
[2024-07-27T06:21:52Z DEBUG naga::front::wgsl::lower::conversion]     consensus: "f32"
[2024-07-27T06:21:52Z DEBUG naga::proc::constant_evaluator] check: SubexpressionsAreNotConstant
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [24] = Binary { op: Greater, left: [22], right: [23] } : Value(Scalar(Scalar { kind: Bool, width: 1 }))
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [25] = Select { condition: [24], accept: [21], reject: [20] } : Handle([2])
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [26] = Load { pointer: [5] } : Handle([2])
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [1] = FunctionArgument(0) : Handle([6])
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [2] = Literal(U32(1)) : Value(Scalar(Scalar { kind: Uint, width: 4 }))
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [3] = Literal(U32(2)) : Value(Scalar(Scalar { kind: Uint, width: 4 }))
[2024-07-27T06:21:52Z DEBUG naga::front::wgsl::lower::conversion] wgsl automatic_conversion_consensus: ["u32", "u32"]
[2024-07-27T06:21:52Z DEBUG naga::front::wgsl::lower::conversion]     consensus: "u32"
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [4] = Compose { ty: [7], components: [[2], [3]] } : Handle([7])
[2024-07-27T06:21:52Z DEBUG naga::proc::constant_evaluator] check: SubexpressionsAreNotConstant
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [5] = Splat { size: Bi, value: [1] } : Value(Vector { size: Bi, scalar: Scalar { kind: Uint, width: 4 } })
[2024-07-27T06:21:52Z DEBUG naga::front::wgsl::lower::conversion] wgsl automatic_conversion_consensus: ["vec2<u32>", "vec2<u32>"]
[2024-07-27T06:21:52Z DEBUG naga::front::wgsl::lower::conversion]     consensus: "u32"
[2024-07-27T06:21:52Z DEBUG naga::proc::constant_evaluator] check: SubexpressionsAreNotConstant
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [6] = Binary { op: Add, left: [4], right: [5] } : Handle([7])
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [7] = Literal(U32(6)) : Value(Scalar(Scalar { kind: Uint, width: 4 }))
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [8] = Splat { size: Bi, value: [7] } : Value(Vector { size: Bi, scalar: Scalar { kind: Uint, width: 4 } })
[2024-07-27T06:21:52Z DEBUG naga::front::wgsl::lower::conversion] wgsl automatic_conversion_consensus: ["vec2<u32>", "vec2<u32>"]
[2024-07-27T06:21:52Z DEBUG naga::front::wgsl::lower::conversion]     consensus: "u32"
[2024-07-27T06:21:52Z DEBUG naga::proc::constant_evaluator] check: SubexpressionsAreNotConstant
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [9] = Binary { op: Modulo, left: [6], right: [8] } : Handle([7])
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [10] = Literal(U32(3)) : Value(Scalar(Scalar { kind: Uint, width: 4 }))
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [11] = Splat { size: Bi, value: [10] } : Value(Vector { size: Bi, scalar: Scalar { kind: Uint, width: 4 } })
[2024-07-27T06:21:52Z DEBUG naga::front::wgsl::lower::conversion] wgsl automatic_conversion_consensus: ["vec2<u32>", "vec2<u32>"]
[2024-07-27T06:21:52Z DEBUG naga::front::wgsl::lower::conversion]     consensus: "u32"
[2024-07-27T06:21:52Z DEBUG naga::proc::constant_evaluator] check: SubexpressionsAreNotConstant
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [12] = Binary { op: Less, left: [9], right: [11] } : Value(Vector { size: Bi, scalar: Scalar { kind: Bool, width: 1 } })
[2024-07-27T06:21:52Z DEBUG naga::proc::constant_evaluator] check: SubexpressionsAreNotConstant
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [13] = As { expr: [12], kind: Float, convert: Some(4) } : Value(Vector { size: Bi, scalar: Scalar { kind: Float, width: 4 } })
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [4] = Literal(I32(0)) : Value(Scalar(Scalar { kind: Sint, width: 4 }))
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [5] = Literal(AbstractInt(0)) : Value(Scalar(Scalar { kind: AbstractInt, width: 8 }))
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [6] = Literal(I32(0)) : Value(Scalar(Scalar { kind: Sint, width: 4 }))
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [7] = Literal(AbstractInt(1)) : Value(Scalar(Scalar { kind: AbstractInt, width: 8 }))
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [8] = Literal(I32(1)) : Value(Scalar(Scalar { kind: Sint, width: 4 }))
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [9] = Literal(AbstractInt(2)) : Value(Scalar(Scalar { kind: AbstractInt, width: 8 }))
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [10] = Literal(I32(2)) : Value(Scalar(Scalar { kind: Sint, width: 4 }))
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [11] = Literal(AbstractInt(3)) : Value(Scalar(Scalar { kind: AbstractInt, width: 8 }))
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [12] = Literal(I32(3)) : Value(Scalar(Scalar { kind: Sint, width: 4 }))
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [13] = Literal(AbstractInt(4)) : Value(Scalar(Scalar { kind: AbstractInt, width: 8 }))
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [14] = Literal(I32(4)) : Value(Scalar(Scalar { kind: Sint, width: 4 }))
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [15] = Literal(AbstractInt(5)) : Value(Scalar(Scalar { kind: AbstractInt, width: 8 }))
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [16] = Literal(I32(5)) : Value(Scalar(Scalar { kind: Sint, width: 4 }))
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [17] = Literal(AbstractInt(6)) : Value(Scalar(Scalar { kind: AbstractInt, width: 8 }))
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [18] = Literal(I32(6)) : Value(Scalar(Scalar { kind: Sint, width: 4 }))
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [19] = Literal(AbstractInt(7)) : Value(Scalar(Scalar { kind: AbstractInt, width: 8 }))
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [20] = Literal(I32(7)) : Value(Scalar(Scalar { kind: Sint, width: 4 }))
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [21] = Literal(AbstractInt(8)) : Value(Scalar(Scalar { kind: AbstractInt, width: 8 }))
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [22] = Literal(I32(8)) : Value(Scalar(Scalar { kind: Sint, width: 4 }))
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [23] = Literal(AbstractInt(9)) : Value(Scalar(Scalar { kind: AbstractInt, width: 8 }))
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [24] = Literal(I32(9)) : Value(Scalar(Scalar { kind: Sint, width: 4 }))
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [25] = Literal(AbstractInt(1)) : Value(Scalar(Scalar { kind: AbstractInt, width: 8 }))
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [26] = Literal(I32(1)) : Value(Scalar(Scalar { kind: Sint, width: 4 }))
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [27] = Literal(AbstractInt(2)) : Value(Scalar(Scalar { kind: AbstractInt, width: 8 }))
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [28] = Literal(I32(2)) : Value(Scalar(Scalar { kind: Sint, width: 4 }))
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [29] = Literal(AbstractInt(3)) : Value(Scalar(Scalar { kind: AbstractInt, width: 8 }))
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [30] = Literal(I32(3)) : Value(Scalar(Scalar { kind: Sint, width: 4 }))
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [31] = Literal(AbstractInt(4)) : Value(Scalar(Scalar { kind: AbstractInt, width: 8 }))
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [32] = Literal(I32(4)) : Value(Scalar(Scalar { kind: Sint, width: 4 }))
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [33] = Literal(AbstractInt(5)) : Value(Scalar(Scalar { kind: AbstractInt, width: 8 }))
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [34] = Literal(I32(5)) : Value(Scalar(Scalar { kind: Sint, width: 4 }))
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [35] = Literal(AbstractInt(6)) : Value(Scalar(Scalar { kind: AbstractInt, width: 8 }))
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [36] = Literal(I32(6)) : Value(Scalar(Scalar { kind: Sint, width: 4 }))
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [37] = Literal(AbstractInt(7)) : Value(Scalar(Scalar { kind: AbstractInt, width: 8 }))
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [38] = Literal(I32(7)) : Value(Scalar(Scalar { kind: Sint, width: 4 }))
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [39] = Literal(AbstractInt(8)) : Value(Scalar(Scalar { kind: AbstractInt, width: 8 }))
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [40] = Literal(I32(8)) : Value(Scalar(Scalar { kind: Sint, width: 4 }))
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [41] = Literal(AbstractInt(9)) : Value(Scalar(Scalar { kind: AbstractInt, width: 8 }))
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [42] = Literal(I32(9)) : Value(Scalar(Scalar { kind: Sint, width: 4 }))
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [43] = Literal(AbstractInt(10)) : Value(Scalar(Scalar { kind: AbstractInt, width: 8 }))
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [1] = FunctionArgument(0) : Handle([9])
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [2] = LocalVariable([1]) : Value(Pointer { base: [10], space: Function })
[2024-07-27T06:21:52Z DEBUG naga::proc::constant_evaluator] check: SubexpressionsAreNotConstant
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [3] = AccessIndex { base: [1], index: 7 } : Handle([5])
[2024-07-27T06:21:52Z DEBUG naga::proc::constant_evaluator] check: SubexpressionsAreNotConstant
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [4] = Swizzle { size: Bi, vector: [3], pattern: [X, Y, X, X] } : Value(Vector { size: Bi, scalar: Scalar { kind: Float, width: 4 } })
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [5] = GlobalVariable([1]) : Value(Pointer { base: [3], space: Uniform })
[2024-07-27T06:21:52Z DEBUG naga::proc::constant_evaluator] check: SubexpressionsAreNotConstant
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [6] = AccessIndex { base: [5], index: 1 } : Value(Pointer { base: [2], space: Uniform })
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [7] = Load { pointer: [6] } : Handle([2])
[2024-07-27T06:21:52Z DEBUG naga::front::wgsl::lower::conversion] wgsl automatic_conversion_consensus: ["vec2<f32>", "f32"]
[2024-07-27T06:21:52Z DEBUG naga::front::wgsl::lower::conversion]     consensus: "f32"
[2024-07-27T06:21:52Z DEBUG naga::proc::constant_evaluator] check: SubexpressionsAreNotConstant
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [8] = Binary { op: Multiply, left: [4], right: [7] } : Value(Vector { size: Bi, scalar: Scalar { kind: Float, width: 4 } })
[2024-07-27T06:21:52Z DEBUG naga::proc::constant_evaluator] check: SubexpressionsAreNotConstant
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [9] = LocalVariable([2]) : Value(Pointer { base: [4], space: Function })
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [10] = AccessIndex { base: [1], index: 7 } : Handle([5])
[2024-07-27T06:21:52Z DEBUG naga::proc::constant_evaluator] check: SubexpressionsAreNotConstant
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [11] = Swizzle { size: Bi, vector: [10], pattern: [Z, W, X, X] } : Value(Vector { size: Bi, scalar: Scalar { kind: Float, width: 4 } })
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [12] = GlobalVariable([1]) : Value(Pointer { base: [3], space: Uniform })
[2024-07-27T06:21:52Z DEBUG naga::proc::constant_evaluator] check: SubexpressionsAreNotConstant
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [13] = AccessIndex { base: [12], index: 1 } : Value(Pointer { base: [2], space: Uniform })
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [14] = Load { pointer: [13] } : Handle([2])
[2024-07-27T06:21:52Z DEBUG naga::front::wgsl::lower::conversion] wgsl automatic_conversion_consensus: ["vec2<f32>", "f32"]
[2024-07-27T06:21:52Z DEBUG naga::front::wgsl::lower::conversion]     consensus: "f32"
[2024-07-27T06:21:52Z DEBUG naga::proc::constant_evaluator] check: SubexpressionsAreNotConstant
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [15] = Binary { op: Multiply, left: [11], right: [14] } : Value(Vector { size: Bi, scalar: Scalar { kind: Float, width: 4 } })
[2024-07-27T06:21:52Z DEBUG naga::proc::constant_evaluator] check: SubexpressionsAreNotConstant
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [16] = LocalVariable([3]) : Value(Pointer { base: [4], space: Function })
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [17] = AccessIndex { base: [1], index: 7 } : Handle([5])
[2024-07-27T06:21:52Z DEBUG naga::proc::constant_evaluator] check: SubexpressionsAreNotConstant
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [18] = AccessIndex { base: [17], index: 2 } : Value(Scalar(Scalar { kind: Float, width: 4 }))
[2024-07-27T06:21:52Z DEBUG naga::proc::constant_evaluator] check: SubexpressionsAreNotConstant
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [19] = AccessIndex { base: [1], index: 7 } : Handle([5])
[2024-07-27T06:21:52Z DEBUG naga::proc::constant_evaluator] check: SubexpressionsAreNotConstant
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [20] = AccessIndex { base: [19], index: 3 } : Value(Scalar(Scalar { kind: Float, width: 4 }))
[2024-07-27T06:21:52Z DEBUG naga::proc::constant_evaluator] check: SubexpressionsAreNotConstant
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [21] = Math { fun: Min, arg: [18], arg1: Some([20]), arg2: None, arg3: None } : Value(Scalar(Scalar { kind: Float, width: 4 }))
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [22] = Literal(AbstractFloat(0.5)) : Value(Scalar(Scalar { kind: AbstractFloat, width: 8 }))
[2024-07-27T06:21:52Z DEBUG naga::front::wgsl::lower::conversion] wgsl automatic_conversion_consensus: ["f32", "{AbstractFloat}"]
[2024-07-27T06:21:52Z DEBUG naga::front::wgsl::lower::conversion]     consensus: "f32"
[2024-07-27T06:21:52Z DEBUG naga::proc::constant_evaluator] check: SubexpressionsAreNotConstant
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [23] = Literal(F32(0.5)) : Value(Scalar(Scalar { kind: Float, width: 4 }))
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [24] = Binary { op: Multiply, left: [21], right: [23] } : Value(Scalar(Scalar { kind: Float, width: 4 }))
[2024-07-27T06:21:52Z DEBUG naga::proc::constant_evaluator] check: SubexpressionsAreNotConstant
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [25] = LocalVariable([4]) : Value(Pointer { base: [2], space: Function })
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [26] = AccessIndex { base: [1], index: 9 } : Handle([5])
[2024-07-27T06:21:52Z DEBUG naga::proc::constant_evaluator] check: SubexpressionsAreNotConstant
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [27] = AccessIndex { base: [26], index: 0 } : Value(Scalar(Scalar { kind: Float, width: 4 }))
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [28] = Load { pointer: [25] } : Handle([2])
[2024-07-27T06:21:52Z DEBUG naga::proc::constant_evaluator] check: SubexpressionsAreNotConstant
[2024-07-27T06:21:52Z DEBUG naga::proc::constant_evaluator] check: SubexpressionsAreNotConstant
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [29] = Math { fun: Min, arg: [27], arg1: Some([28]), arg2: None, arg3: None } : Value(Scalar(Scalar { kind: Float, width: 4 }))
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [30] = AccessIndex { base: [1], index: 9 } : Handle([5])
[2024-07-27T06:21:52Z DEBUG naga::proc::constant_evaluator] check: SubexpressionsAreNotConstant
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [31] = AccessIndex { base: [30], index: 1 } : Value(Scalar(Scalar { kind: Float, width: 4 }))
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [32] = Load { pointer: [25] } : Handle([2])
[2024-07-27T06:21:52Z DEBUG naga::proc::constant_evaluator] check: SubexpressionsAreNotConstant
[2024-07-27T06:21:52Z DEBUG naga::proc::constant_evaluator] check: SubexpressionsAreNotConstant
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [33] = Math { fun: Min, arg: [31], arg1: Some([32]), arg2: None, arg3: None } : Value(Scalar(Scalar { kind: Float, width: 4 }))
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [34] = AccessIndex { base: [1], index: 9 } : Handle([5])
[2024-07-27T06:21:52Z DEBUG naga::proc::constant_evaluator] check: SubexpressionsAreNotConstant
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [35] = AccessIndex { base: [34], index: 2 } : Value(Scalar(Scalar { kind: Float, width: 4 }))
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [36] = Load { pointer: [25] } : Handle([2])
[2024-07-27T06:21:52Z DEBUG naga::proc::constant_evaluator] check: SubexpressionsAreNotConstant
[2024-07-27T06:21:52Z DEBUG naga::proc::constant_evaluator] check: SubexpressionsAreNotConstant
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [37] = Math { fun: Min, arg: [35], arg1: Some([36]), arg2: None, arg3: None } : Value(Scalar(Scalar { kind: Float, width: 4 }))
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [38] = AccessIndex { base: [1], index: 9 } : Handle([5])
[2024-07-27T06:21:52Z DEBUG naga::proc::constant_evaluator] check: SubexpressionsAreNotConstant
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [39] = AccessIndex { base: [38], index: 3 } : Value(Scalar(Scalar { kind: Float, width: 4 }))
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [40] = Load { pointer: [25] } : Handle([2])
[2024-07-27T06:21:52Z DEBUG naga::proc::constant_evaluator] check: SubexpressionsAreNotConstant
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [41] = Math { fun: Min, arg: [39], arg1: Some([40]), arg2: None, arg3: None } : Value(Scalar(Scalar { kind: Float, width: 4 }))
[2024-07-27T06:21:52Z DEBUG naga::proc::constant_evaluator] check: SubexpressionsAreNotConstant
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [42] = Compose { ty: [5], components: [[29], [33], [37], [41]] } : Handle([5])
[2024-07-27T06:21:52Z DEBUG naga::proc::constant_evaluator] check: SubexpressionsAreNotConstant
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [43] = LocalVariable([5]) : Value(Pointer { base: [5], space: Function })
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [44] = AccessIndex { base: [16], index: 0 } : Value(ValuePointer { size: None, scalar: Scalar { kind: Float, width: 4 }, space: Function })
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [45] = Load { pointer: [44] } : Value(Scalar(Scalar { kind: Float, width: 4 }))
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [46] = Literal(AbstractFloat(1.0)) : Value(Scalar(Scalar { kind: AbstractFloat, width: 8 }))
[2024-07-27T06:21:52Z DEBUG naga::front::wgsl::lower::conversion] wgsl automatic_conversion_consensus: ["f32", "{AbstractFloat}"]
[2024-07-27T06:21:52Z DEBUG naga::front::wgsl::lower::conversion]     consensus: "f32"
[2024-07-27T06:21:52Z DEBUG naga::proc::constant_evaluator] check: SubexpressionsAreNotConstant
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [47] = Literal(F32(1.0)) : Value(Scalar(Scalar { kind: Float, width: 4 }))
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [48] = Binary { op: Add, left: [45], right: [47] } : Value(Scalar(Scalar { kind: Float, width: 4 }))
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [49] = Literal(AbstractFloat(0.0)) : Value(Scalar(Scalar { kind: AbstractFloat, width: 8 }))
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [50] = Literal(AbstractFloat(0.0)) : Value(Scalar(Scalar { kind: AbstractFloat, width: 8 }))
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [51] = Literal(AbstractFloat(0.0)) : Value(Scalar(Scalar { kind: AbstractFloat, width: 8 }))
[2024-07-27T06:21:52Z DEBUG naga::proc::constant_evaluator] check: SubexpressionsAreNotConstant
[2024-07-27T06:21:52Z DEBUG naga::proc::constant_evaluator] check: SubexpressionsAreNotConstant
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [52] = Literal(F32(0.0)) : Value(Scalar(Scalar { kind: Float, width: 4 }))
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [53] = Literal(F32(0.0)) : Value(Scalar(Scalar { kind: Float, width: 4 }))
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [54] = Literal(F32(0.0)) : Value(Scalar(Scalar { kind: Float, width: 4 }))
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [55] = Compose { ty: [5], components: [[48], [52], [53], [54]] } : Handle([5])
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [56] = Literal(AbstractFloat(0.0)) : Value(Scalar(Scalar { kind: AbstractFloat, width: 8 }))
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [57] = AccessIndex { base: [16], index: 1 } : Value(ValuePointer { size: None, scalar: Scalar { kind: Float, width: 4 }, space: Function })
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [58] = Load { pointer: [57] } : Value(Scalar(Scalar { kind: Float, width: 4 }))
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [59] = Literal(AbstractFloat(1.0)) : Value(Scalar(Scalar { kind: AbstractFloat, width: 8 }))
[2024-07-27T06:21:52Z DEBUG naga::front::wgsl::lower::conversion] wgsl automatic_conversion_consensus: ["f32", "{AbstractFloat}"]
[2024-07-27T06:21:52Z DEBUG naga::front::wgsl::lower::conversion]     consensus: "f32"
[2024-07-27T06:21:52Z DEBUG naga::proc::constant_evaluator] check: SubexpressionsAreNotConstant
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [60] = Literal(F32(1.0)) : Value(Scalar(Scalar { kind: Float, width: 4 }))
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [61] = Binary { op: Add, left: [58], right: [60] } : Value(Scalar(Scalar { kind: Float, width: 4 }))
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [62] = Literal(AbstractFloat(0.0)) : Value(Scalar(Scalar { kind: AbstractFloat, width: 8 }))
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [63] = Literal(AbstractFloat(0.0)) : Value(Scalar(Scalar { kind: AbstractFloat, width: 8 }))
[2024-07-27T06:21:52Z DEBUG naga::proc::constant_evaluator] check: SubexpressionsAreNotConstant
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [64] = Literal(F32(0.0)) : Value(Scalar(Scalar { kind: Float, width: 4 }))
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [65] = Literal(F32(0.0)) : Value(Scalar(Scalar { kind: Float, width: 4 }))
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [66] = Literal(F32(0.0)) : Value(Scalar(Scalar { kind: Float, width: 4 }))
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [67] = Compose { ty: [5], components: [[64], [61], [65], [66]] } : Handle([5])
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [68] = Literal(AbstractFloat(0.0)) : Value(Scalar(Scalar { kind: AbstractFloat, width: 8 }))
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [69] = Literal(AbstractFloat(0.0)) : Value(Scalar(Scalar { kind: AbstractFloat, width: 8 }))
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [70] = Literal(AbstractFloat(1.0)) : Value(Scalar(Scalar { kind: AbstractFloat, width: 8 }))
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [71] = Literal(AbstractFloat(0.0)) : Value(Scalar(Scalar { kind: AbstractFloat, width: 8 }))
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [72] = Literal(F32(0.0)) : Value(Scalar(Scalar { kind: Float, width: 4 }))
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [73] = Literal(F32(0.0)) : Value(Scalar(Scalar { kind: Float, width: 4 }))
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [74] = Literal(F32(1.0)) : Value(Scalar(Scalar { kind: Float, width: 4 }))
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [75] = Literal(F32(0.0)) : Value(Scalar(Scalar { kind: Float, width: 4 }))
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [76] = Compose { ty: [5], components: [[72], [73], [74], [75]] } : Handle([5])
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [77] = Load { pointer: [9] } : Handle([4])
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [78] = Literal(AbstractFloat(0.5)) : Value(Scalar(Scalar { kind: AbstractFloat, width: 8 }))
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [79] = Literal(AbstractFloat(0.5)) : Value(Scalar(Scalar { kind: AbstractFloat, width: 8 }))
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [80] = Literal(F32(0.5)) : Value(Scalar(Scalar { kind: Float, width: 4 }))
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [81] = Literal(F32(0.5)) : Value(Scalar(Scalar { kind: Float, width: 4 }))
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [82] = Compose { ty: [4], components: [[80], [81]] } : Handle([4])
[2024-07-27T06:21:52Z DEBUG naga::front::wgsl::lower::conversion] wgsl automatic_conversion_consensus: ["vec2<f32>", "vec2<f32>"]
[2024-07-27T06:21:52Z DEBUG naga::front::wgsl::lower::conversion]     consensus: "f32"
[2024-07-27T06:21:52Z DEBUG naga::proc::constant_evaluator] check: SubexpressionsAreNotConstant
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [83] = Binary { op: Subtract, left: [77], right: [82] } : Handle([4])
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [84] = Literal(AbstractFloat(0.0)) : Value(Scalar(Scalar { kind: AbstractFloat, width: 8 }))
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [85] = Literal(AbstractFloat(1.0)) : Value(Scalar(Scalar { kind: AbstractFloat, width: 8 }))
[2024-07-27T06:21:52Z DEBUG naga::proc::constant_evaluator] check: SubexpressionsAreNotConstant
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [86] = Literal(F32(0.0)) : Value(Scalar(Scalar { kind: Float, width: 4 }))
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [87] = Literal(F32(1.0)) : Value(Scalar(Scalar { kind: Float, width: 4 }))
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [88] = Compose { ty: [5], components: [[83], [86], [87]] } : Handle([5])
[2024-07-27T06:21:52Z DEBUG naga::proc::constant_evaluator] check: SubexpressionsAreNotConstant
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [89] = Compose { ty: [1], components: [[55], [67], [76], [88]] } : Handle([1])
[2024-07-27T06:21:52Z DEBUG naga::proc::constant_evaluator] check: SubexpressionsAreNotConstant
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [90] = LocalVariable([6]) : Value(Pointer { base: [1], space: Function })
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [91] = AccessIndex { base: [2], index: 0 } : Value(Pointer { base: [5], space: Function })
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [92] = GlobalVariable([1]) : Value(Pointer { base: [3], space: Uniform })
[2024-07-27T06:21:52Z DEBUG naga::proc::constant_evaluator] check: SubexpressionsAreNotConstant
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [93] = AccessIndex { base: [92], index: 0 } : Value(Pointer { base: [1], space: Uniform })
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [94] = Load { pointer: [93] } : Handle([1])
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [95] = Load { pointer: [90] } : Handle([1])
[2024-07-27T06:21:52Z DEBUG naga::front::wgsl::lower::conversion] wgsl automatic_conversion_consensus: ["mat4x4<f32>", "mat4x4<f32>"]
[2024-07-27T06:21:52Z DEBUG naga::front::wgsl::lower::conversion]     consensus: "f32"
[2024-07-27T06:21:52Z DEBUG naga::proc::constant_evaluator] check: SubexpressionsAreNotConstant
[2024-07-27T06:21:52Z DEBUG naga::proc::constant_evaluator] check: SubexpressionsAreNotConstant
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [96] = Binary { op: Multiply, left: [94], right: [95] } : Value(Matrix { columns: Quad, rows: Quad, scalar: Scalar { kind: Float, width: 4 } })
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [97] = AccessIndex { base: [1], index: 0 } : Handle([6])
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [98] = CallResult([4]) : Handle([4])
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [99] = Literal(AbstractFloat(0.0)) : Value(Scalar(Scalar { kind: AbstractFloat, width: 8 }))
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [100] = Literal(AbstractFloat(1.0)) : Value(Scalar(Scalar { kind: AbstractFloat, width: 8 }))
[2024-07-27T06:21:52Z DEBUG naga::proc::constant_evaluator] check: SubexpressionsAreNotConstant
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [101] = Literal(F32(0.0)) : Value(Scalar(Scalar { kind: Float, width: 4 }))
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [102] = Literal(F32(1.0)) : Value(Scalar(Scalar { kind: Float, width: 4 }))
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [103] = Compose { ty: [5], components: [[98], [101], [102]] } : Handle([5])
[2024-07-27T06:21:52Z DEBUG naga::front::wgsl::lower::conversion] wgsl automatic_conversion_consensus: ["mat4x4<f32>", "vec4<f32>"]
[2024-07-27T06:21:52Z DEBUG naga::front::wgsl::lower::conversion]     consensus: "f32"
[2024-07-27T06:21:52Z DEBUG naga::proc::constant_evaluator] check: SubexpressionsAreNotConstant
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [104] = Binary { op: Multiply, left: [96], right: [103] } : Value(Vector { size: Quad, scalar: Scalar { kind: Float, width: 4 } })
[2024-07-27T06:21:52Z DEBUG naga::proc::constant_evaluator] check: SubexpressionsAreNotConstant
[2024-07-27T06:21:52Z DEBUG naga::proc::constant_evaluator] check: SubexpressionsAreNotConstant
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [105] = AccessIndex { base: [2], index: 1 } : Value(Pointer { base: [8], space: Function })
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [106] = AccessIndex { base: [1], index: 1 } : Handle([8])
[2024-07-27T06:21:52Z DEBUG naga::proc::constant_evaluator] check: SubexpressionsAreNotConstant
[2024-07-27T06:21:52Z DEBUG naga::proc::constant_evaluator] check: SubexpressionsAreNotConstant
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [107] = AccessIndex { base: [2], index: 2 } : Value(Pointer { base: [8], space: Function })
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [108] = AccessIndex { base: [1], index: 2 } : Handle([8])
[2024-07-27T06:21:52Z DEBUG naga::proc::constant_evaluator] check: SubexpressionsAreNotConstant
[2024-07-27T06:21:52Z DEBUG naga::proc::constant_evaluator] check: SubexpressionsAreNotConstant
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [109] = AccessIndex { base: [2], index: 3 } : Value(Pointer { base: [8], space: Function })
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [110] = AccessIndex { base: [1], index: 3 } : Handle([8])
[2024-07-27T06:21:52Z DEBUG naga::proc::constant_evaluator] check: SubexpressionsAreNotConstant
[2024-07-27T06:21:52Z DEBUG naga::proc::constant_evaluator] check: SubexpressionsAreNotConstant
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [111] = AccessIndex { base: [2], index: 4 } : Value(Pointer { base: [8], space: Function })
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [112] = AccessIndex { base: [1], index: 4 } : Handle([8])
[2024-07-27T06:21:52Z DEBUG naga::proc::constant_evaluator] check: SubexpressionsAreNotConstant
[2024-07-27T06:21:52Z DEBUG naga::proc::constant_evaluator] check: SubexpressionsAreNotConstant
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [113] = AccessIndex { base: [2], index: 5 } : Value(Pointer { base: [8], space: Function })
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [114] = AccessIndex { base: [1], index: 5 } : Handle([8])
[2024-07-27T06:21:52Z DEBUG naga::proc::constant_evaluator] check: SubexpressionsAreNotConstant
[2024-07-27T06:21:52Z DEBUG naga::proc::constant_evaluator] check: SubexpressionsAreNotConstant
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [115] = AccessIndex { base: [2], index: 6 } : Value(Pointer { base: [5], space: Function })
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [116] = AccessIndex { base: [1], index: 6 } : Handle([5])
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [117] = GlobalVariable([1]) : Value(Pointer { base: [3], space: Uniform })
[2024-07-27T06:21:52Z DEBUG naga::proc::constant_evaluator] check: SubexpressionsAreNotConstant
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [118] = AccessIndex { base: [117], index: 1 } : Value(Pointer { base: [2], space: Uniform })
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [119] = Load { pointer: [118] } : Handle([2])
[2024-07-27T06:21:52Z DEBUG naga::front::wgsl::lower::conversion] wgsl automatic_conversion_consensus: ["vec4<f32>", "f32"]
[2024-07-27T06:21:52Z DEBUG naga::front::wgsl::lower::conversion]     consensus: "f32"
[2024-07-27T06:21:52Z DEBUG naga::proc::constant_evaluator] check: SubexpressionsAreNotConstant
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [120] = Binary { op: Multiply, left: [116], right: [119] } : Handle([5])
[2024-07-27T06:21:52Z DEBUG naga::proc::constant_evaluator] check: SubexpressionsAreNotConstant
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [121] = AccessIndex { base: [2], index: 7 } : Value(Pointer { base: [5], space: Function })
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [122] = Load { pointer: [9] } : Handle([4])
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [123] = Load { pointer: [16] } : Handle([4])
[2024-07-27T06:21:52Z DEBUG naga::proc::constant_evaluator] check: SubexpressionsAreNotConstant
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [124] = Compose { ty: [5], components: [[122], [123]] } : Handle([5])
[2024-07-27T06:21:52Z DEBUG naga::proc::constant_evaluator] check: SubexpressionsAreNotConstant
[2024-07-27T06:21:52Z DEBUG naga::proc::constant_evaluator] check: SubexpressionsAreNotConstant
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [125] = AccessIndex { base: [2], index: 8 } : Value(Pointer { base: [5], space: Function })
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [126] = AccessIndex { base: [1], index: 8 } : Handle([5])
[2024-07-27T06:21:52Z DEBUG naga::proc::constant_evaluator] check: SubexpressionsAreNotConstant
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [127] = AccessIndex { base: [2], index: 9 } : Value(Pointer { base: [5], space: Function })
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [128] = Load { pointer: [43] } : Handle([5])
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [129] = GlobalVariable([1]) : Value(Pointer { base: [3], space: Uniform })
[2024-07-27T06:21:52Z DEBUG naga::proc::constant_evaluator] check: SubexpressionsAreNotConstant
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [130] = AccessIndex { base: [129], index: 1 } : Value(Pointer { base: [2], space: Uniform })
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [131] = Load { pointer: [130] } : Handle([2])
[2024-07-27T06:21:52Z DEBUG naga::front::wgsl::lower::conversion] wgsl automatic_conversion_consensus: ["vec4<f32>", "f32"]
[2024-07-27T06:21:52Z DEBUG naga::front::wgsl::lower::conversion]     consensus: "f32"
[2024-07-27T06:21:52Z DEBUG naga::proc::constant_evaluator] check: SubexpressionsAreNotConstant
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [132] = Binary { op: Multiply, left: [128], right: [131] } : Handle([5])
[2024-07-27T06:21:52Z DEBUG naga::proc::constant_evaluator] check: SubexpressionsAreNotConstant
[2024-07-27T06:21:52Z DEBUG naga::proc::constant_evaluator] check: SubexpressionsAreNotConstant
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [133] = AccessIndex { base: [2], index: 10 } : Value(Pointer { base: [2], space: Function })
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [134] = AccessIndex { base: [1], index: 10 } : Handle([2])
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [135] = GlobalVariable([1]) : Value(Pointer { base: [3], space: Uniform })
[2024-07-27T06:21:52Z DEBUG naga::proc::constant_evaluator] check: SubexpressionsAreNotConstant
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [136] = AccessIndex { base: [135], index: 1 } : Value(Pointer { base: [2], space: Uniform })
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [137] = Load { pointer: [136] } : Handle([2])
[2024-07-27T06:21:52Z DEBUG naga::front::wgsl::lower::conversion] wgsl automatic_conversion_consensus: ["f32", "f32"]
[2024-07-27T06:21:52Z DEBUG naga::front::wgsl::lower::conversion]     consensus: "f32"
[2024-07-27T06:21:52Z DEBUG naga::proc::constant_evaluator] check: SubexpressionsAreNotConstant
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [138] = Binary { op: Multiply, left: [134], right: [137] } : Handle([2])
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [139] = Load { pointer: [2] } : Handle([10])
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [1] = FunctionArgument(0) : Handle([4])
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [2] = Literal(AbstractFloat(12.9898)) : Value(Scalar(Scalar { kind: AbstractFloat, width: 8 }))
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [3] = Literal(AbstractFloat(78.233)) : Value(Scalar(Scalar { kind: AbstractFloat, width: 8 }))
[2024-07-27T06:21:52Z DEBUG naga::front::wgsl::lower::conversion] wgsl automatic_conversion_consensus: ["{AbstractFloat}", "{AbstractFloat}"]
[2024-07-27T06:21:52Z DEBUG naga::front::wgsl::lower::conversion]     consensus: "{AbstractFloat}"
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [4] = Compose { ty: [11], components: [[2], [3]] } : Handle([11])
[2024-07-27T06:21:52Z DEBUG naga::proc::constant_evaluator] check: SubexpressionsAreNotConstant
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [5] = Literal(F32(12.9898)) : Value(Scalar(Scalar { kind: Float, width: 4 }))
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [6] = Literal(F32(78.233)) : Value(Scalar(Scalar { kind: Float, width: 4 }))
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [7] = Compose { ty: [4], components: [[5], [6]] } : Handle([4])
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [8] = Math { fun: Dot, arg: [1], arg1: Some([7]), arg2: None, arg3: None } : Value(Scalar(Scalar { kind: Float, width: 4 }))
[2024-07-27T06:21:52Z DEBUG naga::proc::constant_evaluator] check: SubexpressionsAreNotConstant
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [9] = Math { fun: Sin, arg: [8], arg1: None, arg2: None, arg3: None } : Value(Scalar(Scalar { kind: Float, width: 4 }))
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [10] = Literal(AbstractFloat(43758.5453)) : Value(Scalar(Scalar { kind: AbstractFloat, width: 8 }))
[2024-07-27T06:21:52Z DEBUG naga::front::wgsl::lower::conversion] wgsl automatic_conversion_consensus: ["f32", "{AbstractFloat}"]
[2024-07-27T06:21:52Z DEBUG naga::front::wgsl::lower::conversion]     consensus: "f32"
[2024-07-27T06:21:52Z DEBUG naga::proc::constant_evaluator] check: SubexpressionsAreNotConstant
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [11] = Literal(F32(43758.547)) : Value(Scalar(Scalar { kind: Float, width: 4 }))
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [12] = Binary { op: Multiply, left: [9], right: [11] } : Value(Scalar(Scalar { kind: Float, width: 4 }))
[2024-07-27T06:21:52Z DEBUG naga::proc::constant_evaluator] check: SubexpressionsAreNotConstant
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [13] = Math { fun: Fract, arg: [12], arg1: None, arg2: None, arg3: None } : Value(Scalar(Scalar { kind: Float, width: 4 }))
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [44] = Literal(I32(10)) : Value(Scalar(Scalar { kind: Sint, width: 4 }))
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [45] = Literal(AbstractFloat(0.412165612)) : Value(Scalar(Scalar { kind: AbstractFloat, width: 8 }))
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [46] = Literal(AbstractFloat(0.211859107)) : Value(Scalar(Scalar { kind: AbstractFloat, width: 8 }))
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [47] = Literal(AbstractFloat(0.0883097947)) : Value(Scalar(Scalar { kind: AbstractFloat, width: 8 }))
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [48] = Literal(AbstractFloat(0.0)) : Value(Scalar(Scalar { kind: AbstractFloat, width: 8 }))
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [49] = Literal(F32(0.4121656)) : Value(Scalar(Scalar { kind: Float, width: 4 }))
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [50] = Literal(F32(0.2118591)) : Value(Scalar(Scalar { kind: Float, width: 4 }))
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [51] = Literal(F32(0.088309795)) : Value(Scalar(Scalar { kind: Float, width: 4 }))
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [52] = Literal(F32(0.0)) : Value(Scalar(Scalar { kind: Float, width: 4 }))
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [53] = Compose { ty: [5], components: [[49], [50], [51], [52]] } : Handle([5])
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [54] = Literal(AbstractFloat(0.536275208)) : Value(Scalar(Scalar { kind: AbstractFloat, width: 8 }))
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [55] = Literal(AbstractFloat(0.6807189584)) : Value(Scalar(Scalar { kind: AbstractFloat, width: 8 }))
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [56] = Literal(AbstractFloat(0.2818474174)) : Value(Scalar(Scalar { kind: AbstractFloat, width: 8 }))
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [57] = Literal(AbstractFloat(0.0)) : Value(Scalar(Scalar { kind: AbstractFloat, width: 8 }))
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [58] = Literal(F32(0.5362752)) : Value(Scalar(Scalar { kind: Float, width: 4 }))
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [59] = Literal(F32(0.68071896)) : Value(Scalar(Scalar { kind: Float, width: 4 }))
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [60] = Literal(F32(0.28184742)) : Value(Scalar(Scalar { kind: Float, width: 4 }))
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [61] = Literal(F32(0.0)) : Value(Scalar(Scalar { kind: Float, width: 4 }))
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [62] = Compose { ty: [5], components: [[58], [59], [60], [61]] } : Handle([5])
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [63] = Literal(AbstractFloat(0.0514575653)) : Value(Scalar(Scalar { kind: AbstractFloat, width: 8 }))
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [64] = Literal(AbstractFloat(0.107406579)) : Value(Scalar(Scalar { kind: AbstractFloat, width: 8 }))
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [65] = Literal(AbstractFloat(0.6302613616)) : Value(Scalar(Scalar { kind: AbstractFloat, width: 8 }))
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [66] = Literal(AbstractFloat(0.0)) : Value(Scalar(Scalar { kind: AbstractFloat, width: 8 }))
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [67] = Literal(F32(0.051457565)) : Value(Scalar(Scalar { kind: Float, width: 4 }))
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [68] = Literal(F32(0.10740658)) : Value(Scalar(Scalar { kind: Float, width: 4 }))
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [69] = Literal(F32(0.63026136)) : Value(Scalar(Scalar { kind: Float, width: 4 }))
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [70] = Literal(F32(0.0)) : Value(Scalar(Scalar { kind: Float, width: 4 }))
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [71] = Compose { ty: [5], components: [[67], [68], [69], [70]] } : Handle([5])
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [72] = Compose { ty: [12], components: [[53], [62], [71]] } : Handle([12])
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [73] = Literal(AbstractFloat(4.0767245293)) : Value(Scalar(Scalar { kind: AbstractFloat, width: 8 }))
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [74] = Literal(AbstractFloat(3.3072168827)) : Value(Scalar(Scalar { kind: AbstractFloat, width: 8 }))
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [75] = Literal(AbstractFloat(-3.3072168827)) : Value(Scalar(Scalar { kind: AbstractFloat, width: 8 }))
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [76] = Literal(AbstractFloat(0.2307590544)) : Value(Scalar(Scalar { kind: AbstractFloat, width: 8 }))
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [77] = Literal(AbstractFloat(0.0)) : Value(Scalar(Scalar { kind: AbstractFloat, width: 8 }))
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [78] = Literal(F32(4.0767245)) : Value(Scalar(Scalar { kind: Float, width: 4 }))
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [79] = Literal(F32(-3.307217)) : Value(Scalar(Scalar { kind: Float, width: 4 }))
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [80] = Literal(F32(0.23075905)) : Value(Scalar(Scalar { kind: Float, width: 4 }))
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [81] = Literal(F32(0.0)) : Value(Scalar(Scalar { kind: Float, width: 4 }))
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [82] = Compose { ty: [5], components: [[78], [79], [80], [81]] } : Handle([5])
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [83] = Literal(AbstractFloat(1.2681437731)) : Value(Scalar(Scalar { kind: AbstractFloat, width: 8 }))
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [84] = Literal(AbstractFloat(-1.2681437731)) : Value(Scalar(Scalar { kind: AbstractFloat, width: 8 }))
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [85] = Literal(AbstractFloat(2.6093323231)) : Value(Scalar(Scalar { kind: AbstractFloat, width: 8 }))
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [86] = Literal(AbstractFloat(0.341134429)) : Value(Scalar(Scalar { kind: AbstractFloat, width: 8 }))
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [87] = Literal(AbstractFloat(-0.341134429)) : Value(Scalar(Scalar { kind: AbstractFloat, width: 8 }))
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [88] = Literal(AbstractFloat(0.0)) : Value(Scalar(Scalar { kind: AbstractFloat, width: 8 }))
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [89] = Literal(F32(-1.2681438)) : Value(Scalar(Scalar { kind: Float, width: 4 }))
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [90] = Literal(F32(2.6093323)) : Value(Scalar(Scalar { kind: Float, width: 4 }))
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [91] = Literal(F32(-0.34113443)) : Value(Scalar(Scalar { kind: Float, width: 4 }))
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [92] = Literal(F32(0.0)) : Value(Scalar(Scalar { kind: Float, width: 4 }))
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [93] = Compose { ty: [5], components: [[89], [90], [91], [92]] } : Handle([5])
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [94] = Literal(AbstractFloat(0.0041119885)) : Value(Scalar(Scalar { kind: AbstractFloat, width: 8 }))
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [95] = Literal(AbstractFloat(-0.0041119885)) : Value(Scalar(Scalar { kind: AbstractFloat, width: 8 }))
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [96] = Literal(AbstractFloat(0.7034763098)) : Value(Scalar(Scalar { kind: AbstractFloat, width: 8 }))
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [97] = Literal(AbstractFloat(-0.7034763098)) : Value(Scalar(Scalar { kind: AbstractFloat, width: 8 }))
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [98] = Literal(AbstractFloat(1.7068625689)) : Value(Scalar(Scalar { kind: AbstractFloat, width: 8 }))
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [99] = Literal(AbstractFloat(0.0)) : Value(Scalar(Scalar { kind: AbstractFloat, width: 8 }))
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [100] = Literal(F32(-0.0041119885)) : Value(Scalar(Scalar { kind: Float, width: 4 }))
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [101] = Literal(F32(-0.7034763)) : Value(Scalar(Scalar { kind: Float, width: 4 }))
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [102] = Literal(F32(1.7068626)) : Value(Scalar(Scalar { kind: Float, width: 4 }))
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [103] = Literal(F32(0.0)) : Value(Scalar(Scalar { kind: Float, width: 4 }))
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [104] = Compose { ty: [5], components: [[100], [101], [102], [103]] } : Handle([5])
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [105] = Compose { ty: [12], components: [[82], [93], [104]] } : Handle([12])
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [1] = FunctionArgument(0) : Handle([5])
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [2] = FunctionArgument(1) : Handle([5])
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [3] = FunctionArgument(2) : Handle([2])
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [4] = Constant([1]) : Handle([12])
[2024-07-27T06:21:52Z DEBUG naga::front::wgsl::lower::conversion] wgsl automatic_conversion_consensus: ["vec4<f32>", "mat3x4<f32>"]
[2024-07-27T06:21:52Z DEBUG naga::front::wgsl::lower::conversion]     consensus: "f32"
[2024-07-27T06:21:52Z DEBUG naga::proc::constant_evaluator] check: SubexpressionsAreNotConstant
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [5] = Binary { op: Multiply, left: [1], right: [4] } : Value(Vector { size: Tri, scalar: Scalar { kind: Float, width: 4 } })
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [6] = Literal(AbstractFloat(1.0)) : Value(Scalar(Scalar { kind: AbstractFloat, width: 8 }))
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [7] = Literal(AbstractFloat(3.0)) : Value(Scalar(Scalar { kind: AbstractFloat, width: 8 }))
[2024-07-27T06:21:52Z DEBUG naga::front::wgsl::lower::conversion] wgsl automatic_conversion_consensus: ["{AbstractFloat}", "{AbstractFloat}"]
[2024-07-27T06:21:52Z DEBUG naga::front::wgsl::lower::conversion]     consensus: "{AbstractFloat}"
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [8] = Literal(AbstractFloat(0.3333333333333333)) : Value(Scalar(Scalar { kind: AbstractFloat, width: 8 }))
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [9] = Literal(AbstractFloat(1.0)) : Value(Scalar(Scalar { kind: AbstractFloat, width: 8 }))
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [10] = Literal(AbstractFloat(3.0)) : Value(Scalar(Scalar { kind: AbstractFloat, width: 8 }))
[2024-07-27T06:21:52Z DEBUG naga::front::wgsl::lower::conversion] wgsl automatic_conversion_consensus: ["{AbstractFloat}", "{AbstractFloat}"]
[2024-07-27T06:21:52Z DEBUG naga::front::wgsl::lower::conversion]     consensus: "{AbstractFloat}"
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [11] = Literal(AbstractFloat(0.3333333333333333)) : Value(Scalar(Scalar { kind: AbstractFloat, width: 8 }))
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [12] = Literal(AbstractFloat(1.0)) : Value(Scalar(Scalar { kind: AbstractFloat, width: 8 }))
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [13] = Literal(AbstractFloat(3.0)) : Value(Scalar(Scalar { kind: AbstractFloat, width: 8 }))
[2024-07-27T06:21:52Z DEBUG naga::front::wgsl::lower::conversion] wgsl automatic_conversion_consensus: ["{AbstractFloat}", "{AbstractFloat}"]
[2024-07-27T06:21:52Z DEBUG naga::front::wgsl::lower::conversion]     consensus: "{AbstractFloat}"
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [14] = Literal(AbstractFloat(0.3333333333333333)) : Value(Scalar(Scalar { kind: AbstractFloat, width: 8 }))
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [15] = Literal(F32(0.33333334)) : Value(Scalar(Scalar { kind: Float, width: 4 }))
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [16] = Literal(F32(0.33333334)) : Value(Scalar(Scalar { kind: Float, width: 4 }))
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [17] = Literal(F32(0.33333334)) : Value(Scalar(Scalar { kind: Float, width: 4 }))
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [18] = Compose { ty: [13], components: [[15], [16], [17]] } : Handle([13])
[2024-07-27T06:21:52Z DEBUG naga::proc::constant_evaluator] check: SubexpressionsAreNotConstant
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [19] = Math { fun: Pow, arg: [5], arg1: Some([18]), arg2: None, arg3: None } : Value(Vector { size: Tri, scalar: Scalar { kind: Float, width: 4 } })
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [20] = Constant([1]) : Handle([12])
[2024-07-27T06:21:52Z DEBUG naga::front::wgsl::lower::conversion] wgsl automatic_conversion_consensus: ["vec4<f32>", "mat3x4<f32>"]
[2024-07-27T06:21:52Z DEBUG naga::front::wgsl::lower::conversion]     consensus: "f32"
[2024-07-27T06:21:52Z DEBUG naga::proc::constant_evaluator] check: SubexpressionsAreNotConstant
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [21] = Binary { op: Multiply, left: [2], right: [20] } : Value(Vector { size: Tri, scalar: Scalar { kind: Float, width: 4 } })
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [22] = Literal(AbstractFloat(1.0)) : Value(Scalar(Scalar { kind: AbstractFloat, width: 8 }))
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [23] = Literal(AbstractFloat(3.0)) : Value(Scalar(Scalar { kind: AbstractFloat, width: 8 }))
[2024-07-27T06:21:52Z DEBUG naga::front::wgsl::lower::conversion] wgsl automatic_conversion_consensus: ["{AbstractFloat}", "{AbstractFloat}"]
[2024-07-27T06:21:52Z DEBUG naga::front::wgsl::lower::conversion]     consensus: "{AbstractFloat}"
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [24] = Literal(AbstractFloat(0.3333333333333333)) : Value(Scalar(Scalar { kind: AbstractFloat, width: 8 }))
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [25] = Literal(AbstractFloat(1.0)) : Value(Scalar(Scalar { kind: AbstractFloat, width: 8 }))
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [26] = Literal(AbstractFloat(3.0)) : Value(Scalar(Scalar { kind: AbstractFloat, width: 8 }))
[2024-07-27T06:21:52Z DEBUG naga::front::wgsl::lower::conversion] wgsl automatic_conversion_consensus: ["{AbstractFloat}", "{AbstractFloat}"]
[2024-07-27T06:21:52Z DEBUG naga::front::wgsl::lower::conversion]     consensus: "{AbstractFloat}"
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [27] = Literal(AbstractFloat(0.3333333333333333)) : Value(Scalar(Scalar { kind: AbstractFloat, width: 8 }))
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [28] = Literal(AbstractFloat(1.0)) : Value(Scalar(Scalar { kind: AbstractFloat, width: 8 }))
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [29] = Literal(AbstractFloat(3.0)) : Value(Scalar(Scalar { kind: AbstractFloat, width: 8 }))
[2024-07-27T06:21:52Z DEBUG naga::front::wgsl::lower::conversion] wgsl automatic_conversion_consensus: ["{AbstractFloat}", "{AbstractFloat}"]
[2024-07-27T06:21:52Z DEBUG naga::front::wgsl::lower::conversion]     consensus: "{AbstractFloat}"
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [30] = Literal(AbstractFloat(0.3333333333333333)) : Value(Scalar(Scalar { kind: AbstractFloat, width: 8 }))
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [31] = Literal(F32(0.33333334)) : Value(Scalar(Scalar { kind: Float, width: 4 }))
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [32] = Literal(F32(0.33333334)) : Value(Scalar(Scalar { kind: Float, width: 4 }))
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [33] = Literal(F32(0.33333334)) : Value(Scalar(Scalar { kind: Float, width: 4 }))
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [34] = Compose { ty: [13], components: [[31], [32], [33]] } : Handle([13])
[2024-07-27T06:21:52Z DEBUG naga::proc::constant_evaluator] check: SubexpressionsAreNotConstant
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [35] = Math { fun: Pow, arg: [21], arg1: Some([34]), arg2: None, arg3: None } : Value(Vector { size: Tri, scalar: Scalar { kind: Float, width: 4 } })
[2024-07-27T06:21:52Z DEBUG naga::proc::constant_evaluator] check: SubexpressionsAreNotConstant
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [36] = Math { fun: Mix, arg: [19], arg1: Some([35]), arg2: Some([3]), arg3: None } : Value(Vector { size: Tri, scalar: Scalar { kind: Float, width: 4 } })
[2024-07-27T06:21:52Z DEBUG naga::front::wgsl::lower::conversion] wgsl automatic_conversion_consensus: ["vec3<f32>", "vec3<f32>"]
[2024-07-27T06:21:52Z DEBUG naga::front::wgsl::lower::conversion]     consensus: "f32"
[2024-07-27T06:21:52Z DEBUG naga::proc::constant_evaluator] check: SubexpressionsAreNotConstant
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [37] = Constant([2]) : Handle([12])
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [38] = Binary { op: Multiply, left: [36], right: [36] } : Value(Vector { size: Tri, scalar: Scalar { kind: Float, width: 4 } })
[2024-07-27T06:21:52Z DEBUG naga::front::wgsl::lower::conversion] wgsl automatic_conversion_consensus: ["vec3<f32>", "vec3<f32>"]
[2024-07-27T06:21:52Z DEBUG naga::front::wgsl::lower::conversion]     consensus: "f32"
[2024-07-27T06:21:52Z DEBUG naga::proc::constant_evaluator] check: SubexpressionsAreNotConstant
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [39] = Binary { op: Multiply, left: [38], right: [36] } : Value(Vector { size: Tri, scalar: Scalar { kind: Float, width: 4 } })
[2024-07-27T06:21:52Z DEBUG naga::front::wgsl::lower::conversion] wgsl automatic_conversion_consensus: ["mat3x4<f32>", "vec3<f32>"]
[2024-07-27T06:21:52Z DEBUG naga::front::wgsl::lower::conversion]     consensus: "f32"
[2024-07-27T06:21:52Z DEBUG naga::proc::constant_evaluator] check: SubexpressionsAreNotConstant
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [40] = Literal(F32(4.0767245)) : Value(Scalar(Scalar { kind: Float, width: 4 }))
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [41] = Literal(F32(-3.307217)) : Value(Scalar(Scalar { kind: Float, width: 4 }))
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [42] = Literal(F32(0.23075905)) : Value(Scalar(Scalar { kind: Float, width: 4 }))
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [43] = Literal(F32(0.0)) : Value(Scalar(Scalar { kind: Float, width: 4 }))
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [44] = Compose { ty: [5], components: [[40], [41], [42], [43]] } : Handle([5])
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [45] = Literal(F32(-1.2681438)) : Value(Scalar(Scalar { kind: Float, width: 4 }))
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [46] = Literal(F32(2.6093323)) : Value(Scalar(Scalar { kind: Float, width: 4 }))
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [47] = Literal(F32(-0.34113443)) : Value(Scalar(Scalar { kind: Float, width: 4 }))
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [48] = Literal(F32(0.0)) : Value(Scalar(Scalar { kind: Float, width: 4 }))
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [49] = Compose { ty: [5], components: [[45], [46], [47], [48]] } : Handle([5])
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [50] = Literal(F32(-0.0041119885)) : Value(Scalar(Scalar { kind: Float, width: 4 }))
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [51] = Literal(F32(-0.7034763)) : Value(Scalar(Scalar { kind: Float, width: 4 }))
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [52] = Literal(F32(1.7068626)) : Value(Scalar(Scalar { kind: Float, width: 4 }))
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [53] = Literal(F32(0.0)) : Value(Scalar(Scalar { kind: Float, width: 4 }))
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [54] = Compose { ty: [5], components: [[50], [51], [52], [53]] } : Handle([5])
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [55] = Compose { ty: [12], components: [[44], [49], [54]] } : Handle([12])
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [56] = Binary { op: Multiply, left: [37], right: [39] } : Value(Vector { size: Quad, scalar: Scalar { kind: Float, width: 4 } })
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [57] = LocalVariable([1]) : Value(Pointer { base: [5], space: Function })
[2024-07-27T06:21:52Z DEBUG naga::proc::constant_evaluator] check: SubexpressionsAreNotConstant
[2024-07-27T06:21:52Z DEBUG naga::proc::constant_evaluator] check: SubexpressionsAreNotConstant
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [58] = AccessIndex { base: [57], index: 3 } : Value(ValuePointer { size: None, scalar: Scalar { kind: Float, width: 4 }, space: Function })
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [59] = AccessIndex { base: [1], index: 3 } : Value(Scalar(Scalar { kind: Float, width: 4 }))
[2024-07-27T06:21:52Z DEBUG naga::proc::constant_evaluator] check: SubexpressionsAreNotConstant
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [60] = AccessIndex { base: [2], index: 3 } : Value(Scalar(Scalar { kind: Float, width: 4 }))
[2024-07-27T06:21:52Z DEBUG naga::proc::constant_evaluator] check: SubexpressionsAreNotConstant
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [61] = Math { fun: Mix, arg: [59], arg1: Some([60]), arg2: Some([3]), arg3: None } : Value(Scalar(Scalar { kind: Float, width: 4 }))
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [62] = Load { pointer: [57] } : Handle([5])
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [106] = Literal(AbstractInt(8)) : Value(Scalar(Scalar { kind: AbstractInt, width: 8 }))
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [107] = Literal(I32(8)) : Value(Scalar(Scalar { kind: Sint, width: 4 }))
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [108] = Literal(AbstractInt(8)) : Value(Scalar(Scalar { kind: AbstractInt, width: 8 }))
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [1] = FunctionArgument(0) : Handle([4])
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [2] = FunctionArgument(1) : Handle([5])
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [3] = FunctionArgument(2) : Handle([14])
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [4] = FunctionArgument(3) : Handle([15])
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [5] = FunctionArgument(4) : Handle([16])
[2024-07-27T06:21:52Z DEBUG naga::proc::constant_evaluator] check: SubexpressionsAreNotConstant
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [6] = Swizzle { size: Bi, vector: [2], pattern: [X, Y, X, X] } : Value(Vector { size: Bi, scalar: Scalar { kind: Float, width: 4 } })
[2024-07-27T06:21:52Z DEBUG naga::proc::constant_evaluator] check: SubexpressionsAreNotConstant
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [7] = Swizzle { size: Bi, vector: [2], pattern: [Z, W, X, X] } : Value(Vector { size: Bi, scalar: Scalar { kind: Float, width: 4 } })
[2024-07-27T06:21:52Z DEBUG naga::front::wgsl::lower::conversion] wgsl automatic_conversion_consensus: ["vec2<f32>", "vec2<f32>"]
[2024-07-27T06:21:52Z DEBUG naga::front::wgsl::lower::conversion]     consensus: "f32"
[2024-07-27T06:21:52Z DEBUG naga::proc::constant_evaluator] check: SubexpressionsAreNotConstant
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [8] = Binary { op: Subtract, left: [7], right: [6] } : Value(Vector { size: Bi, scalar: Scalar { kind: Float, width: 4 } })
[2024-07-27T06:21:52Z DEBUG naga::front::wgsl::lower::conversion] wgsl automatic_conversion_consensus: ["vec2<f32>", "vec2<f32>"]
[2024-07-27T06:21:52Z DEBUG naga::front::wgsl::lower::conversion]     consensus: "f32"
[2024-07-27T06:21:52Z DEBUG naga::proc::constant_evaluator] check: SubexpressionsAreNotConstant
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [9] = Binary { op: Subtract, left: [1], right: [6] } : Handle([4])
[2024-07-27T06:21:52Z DEBUG naga::proc::constant_evaluator] check: SubexpressionsAreNotConstant
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [10] = Math { fun: Normalize, arg: [8], arg1: None, arg2: None, arg3: None } : Value(Vector { size: Bi, scalar: Scalar { kind: Float, width: 4 } })
[2024-07-27T06:21:52Z DEBUG naga::proc::constant_evaluator] check: SubexpressionsAreNotConstant
[2024-07-27T06:21:52Z DEBUG naga::proc::constant_evaluator] check: SubexpressionsAreNotConstant
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [11] = Math { fun: Dot, arg: [10], arg1: Some([9]), arg2: None, arg3: None } : Value(Scalar(Scalar { kind: Float, width: 4 }))
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [12] = Math { fun: Length, arg: [8], arg1: None, arg2: None, arg3: None } : Value(Scalar(Scalar { kind: Float, width: 4 }))
[2024-07-27T06:21:52Z DEBUG naga::front::wgsl::lower::conversion] wgsl automatic_conversion_consensus: ["f32", "f32"]
[2024-07-27T06:21:52Z DEBUG naga::front::wgsl::lower::conversion]     consensus: "f32"
[2024-07-27T06:21:52Z DEBUG naga::proc::constant_evaluator] check: SubexpressionsAreNotConstant
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [13] = Binary { op: Divide, left: [11], right: [12] } : Value(Scalar(Scalar { kind: Float, width: 4 }))
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [14] = LocalVariable([1]) : Value(Pointer { base: [14], space: Function })
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [15] = LocalVariable([2]) : Value(Pointer { base: [15], space: Function })
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [16] = LocalVariable([3]) : Value(Pointer { base: [5], space: Function })
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [17] = Literal(AbstractFloat(0.3)) : Value(Scalar(Scalar { kind: AbstractFloat, width: 8 }))
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [18] = Literal(AbstractFloat(255.0)) : Value(Scalar(Scalar { kind: AbstractFloat, width: 8 }))
[2024-07-27T06:21:52Z DEBUG naga::front::wgsl::lower::conversion] wgsl automatic_conversion_consensus: ["{AbstractFloat}", "{AbstractFloat}"]
[2024-07-27T06:21:52Z DEBUG naga::front::wgsl::lower::conversion]     consensus: "{AbstractFloat}"
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [19] = Literal(AbstractFloat(0.001176470588235294)) : Value(Scalar(Scalar { kind: AbstractFloat, width: 8 }))
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [20] = Literal(F32(0.0011764705)) : Value(Scalar(Scalar { kind: Float, width: 4 }))
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [21] = Literal(AbstractInt(0)) : Value(Scalar(Scalar { kind: AbstractInt, width: 8 }))
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [22] = Literal(I32(0)) : Value(Scalar(Scalar { kind: Sint, width: 4 }))
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [23] = LocalVariable([4]) : Value(Pointer { base: [16], space: Function })
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [24] = Load { pointer: [23] } : Handle([16])
[2024-07-27T06:21:52Z DEBUG naga::front::wgsl::lower::conversion] wgsl automatic_conversion_consensus: ["i32", "i32"]
[2024-07-27T06:21:52Z DEBUG naga::front::wgsl::lower::conversion]     consensus: "i32"
[2024-07-27T06:21:52Z DEBUG naga::proc::constant_evaluator] check: SubexpressionsAreNotConstant
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [25] = Binary { op: Less, left: [24], right: [5] } : Value(Scalar(Scalar { kind: Bool, width: 1 }))
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [26] = Load { pointer: [23] } : Handle([16])
[2024-07-27T06:21:52Z DEBUG naga::proc::constant_evaluator] check: SubexpressionsAreNotConstant
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [27] = Access { base: [15], index: [26] } : Value(Pointer { base: [2], space: Function })
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [28] = Load { pointer: [27] } : Handle([2])
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [29] = Load { pointer: [23] } : Handle([16])
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [30] = Literal(AbstractInt(1)) : Value(Scalar(Scalar { kind: AbstractInt, width: 8 }))
[2024-07-27T06:21:52Z DEBUG naga::front::wgsl::lower::conversion] wgsl automatic_conversion_consensus: ["i32", "{AbstractInt}"]
[2024-07-27T06:21:52Z DEBUG naga::front::wgsl::lower::conversion]     consensus: "i32"
[2024-07-27T06:21:52Z DEBUG naga::proc::constant_evaluator] check: SubexpressionsAreNotConstant
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [31] = Literal(I32(1)) : Value(Scalar(Scalar { kind: Sint, width: 4 }))
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [32] = Binary { op: Add, left: [29], right: [31] } : Handle([16])
[2024-07-27T06:21:52Z DEBUG naga::proc::constant_evaluator] check: SubexpressionsAreNotConstant
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [33] = Access { base: [15], index: [32] } : Value(Pointer { base: [2], space: Function })
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [34] = Load { pointer: [33] } : Handle([2])
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [35] = Literal(AbstractInt(0)) : Value(Scalar(Scalar { kind: AbstractInt, width: 8 }))
[2024-07-27T06:21:52Z DEBUG naga::proc::constant_evaluator] check: SubexpressionsAreNotConstant
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [36] = Literal(I32(0)) : Value(Scalar(Scalar { kind: Sint, width: 4 }))
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [37] = AccessIndex { base: [15], index: 0 } : Value(Pointer { base: [2], space: Function })
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [38] = Load { pointer: [37] } : Handle([2])
[2024-07-27T06:21:52Z DEBUG naga::front::wgsl::lower::conversion] wgsl automatic_conversion_consensus: ["f32", "f32"]
[2024-07-27T06:21:52Z DEBUG naga::front::wgsl::lower::conversion]     consensus: "f32"
[2024-07-27T06:21:52Z DEBUG naga::proc::constant_evaluator] check: SubexpressionsAreNotConstant
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [39] = Binary { op: LessEqual, left: [13], right: [38] } : Value(Scalar(Scalar { kind: Bool, width: 1 }))
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [40] = Literal(AbstractInt(0)) : Value(Scalar(Scalar { kind: AbstractInt, width: 8 }))
[2024-07-27T06:21:52Z DEBUG naga::proc::constant_evaluator] check: SubexpressionsAreNotConstant
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [41] = Literal(I32(0)) : Value(Scalar(Scalar { kind: Sint, width: 4 }))
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [42] = AccessIndex { base: [14], index: 0 } : Value(Pointer { base: [5], space: Function })
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [43] = Load { pointer: [42] } : Handle([5])
[2024-07-27T06:21:52Z DEBUG naga::front::wgsl::lower::conversion] wgsl automatic_conversion_consensus: ["f32", "f32"]
[2024-07-27T06:21:52Z DEBUG naga::front::wgsl::lower::conversion]     consensus: "f32"
[2024-07-27T06:21:52Z DEBUG naga::proc::constant_evaluator] check: SubexpressionsAreNotConstant
[2024-07-27T06:21:52Z DEBUG naga::front::wgsl::lower::conversion] wgsl automatic_conversion_consensus: ["f32", "f32"]
[2024-07-27T06:21:52Z DEBUG naga::front::wgsl::lower::conversion]     consensus: "f32"
[2024-07-27T06:21:52Z DEBUG naga::proc::constant_evaluator] check: SubexpressionsAreNotConstant
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [44] = Binary { op: LessEqual, left: [28], right: [13] } : Value(Scalar(Scalar { kind: Bool, width: 1 }))
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [45] = Binary { op: LessEqual, left: [13], right: [34] } : Value(Scalar(Scalar { kind: Bool, width: 1 }))
[2024-07-27T06:21:52Z DEBUG naga::front::wgsl::lower::conversion] wgsl automatic_conversion_consensus: ["bool", "bool"]
[2024-07-27T06:21:52Z DEBUG naga::front::wgsl::lower::conversion]     consensus: "bool"
[2024-07-27T06:21:52Z DEBUG naga::proc::constant_evaluator] check: SubexpressionsAreNotConstant
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [46] = Binary { op: LogicalAnd, left: [44], right: [45] } : Value(Scalar(Scalar { kind: Bool, width: 1 }))
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [47] = Load { pointer: [23] } : Handle([16])
[2024-07-27T06:21:52Z DEBUG naga::proc::constant_evaluator] check: SubexpressionsAreNotConstant
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [48] = Access { base: [14], index: [47] } : Value(Pointer { base: [5], space: Function })
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [49] = Load { pointer: [48] } : Handle([5])
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [50] = Load { pointer: [23] } : Handle([16])
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [51] = Literal(AbstractInt(1)) : Value(Scalar(Scalar { kind: AbstractInt, width: 8 }))
[2024-07-27T06:21:52Z DEBUG naga::front::wgsl::lower::conversion] wgsl automatic_conversion_consensus: ["i32", "{AbstractInt}"]
[2024-07-27T06:21:52Z DEBUG naga::front::wgsl::lower::conversion]     consensus: "i32"
[2024-07-27T06:21:52Z DEBUG naga::proc::constant_evaluator] check: SubexpressionsAreNotConstant
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [52] = Literal(I32(1)) : Value(Scalar(Scalar { kind: Sint, width: 4 }))
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [53] = Binary { op: Add, left: [50], right: [52] } : Handle([16])
[2024-07-27T06:21:52Z DEBUG naga::proc::constant_evaluator] check: SubexpressionsAreNotConstant
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [54] = Access { base: [14], index: [53] } : Value(Pointer { base: [5], space: Function })
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [55] = Load { pointer: [54] } : Handle([5])
[2024-07-27T06:21:52Z DEBUG naga::proc::constant_evaluator] check: SubexpressionsAreNotConstant
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [56] = Math { fun: SmoothStep, arg: [28], arg1: Some([34]), arg2: Some([13]), arg3: None } : Handle([2])
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [57] = CallResult([6]) : Handle([5])
[2024-07-27T06:21:52Z DEBUG naga::proc::constant_evaluator] check: SubexpressionsAreNotConstant
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [58] = Access { base: [15], index: [5] } : Value(Pointer { base: [2], space: Function })
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [59] = Load { pointer: [58] } : Handle([2])
[2024-07-27T06:21:52Z DEBUG naga::front::wgsl::lower::conversion] wgsl automatic_conversion_consensus: ["f32", "f32"]
[2024-07-27T06:21:52Z DEBUG naga::front::wgsl::lower::conversion]     consensus: "f32"
[2024-07-27T06:21:52Z DEBUG naga::proc::constant_evaluator] check: SubexpressionsAreNotConstant
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [60] = Binary { op: GreaterEqual, left: [13], right: [59] } : Value(Scalar(Scalar { kind: Bool, width: 1 }))
[2024-07-27T06:21:52Z DEBUG naga::proc::constant_evaluator] check: SubexpressionsAreNotConstant
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [61] = Access { base: [14], index: [5] } : Value(Pointer { base: [5], space: Function })
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [62] = Load { pointer: [61] } : Handle([5])
[2024-07-27T06:21:52Z DEBUG naga::proc::constant_evaluator] check: SubexpressionsAreNotConstant
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [63] = Literal(I32(1)) : Value(Scalar(Scalar { kind: Sint, width: 4 }))
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [64] = Load { pointer: [23] } : Handle([16])
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [65] = Binary { op: Add, left: [64], right: [63] } : Handle([16])
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [66] = Load { pointer: [16] } : Handle([5])
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [67] = Unary { op: Negate, expr: [20] } : Value(Scalar(Scalar { kind: Float, width: 4 }))
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [68] = CallResult([5]) : Handle([2])
[2024-07-27T06:21:52Z DEBUG naga::proc::constant_evaluator] check: SubexpressionsAreNotConstant
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [69] = Math { fun: Mix, arg: [67], arg1: Some([20]), arg2: Some([68]), arg3: None } : Value(Scalar(Scalar { kind: Float, width: 4 }))
[2024-07-27T06:21:52Z DEBUG naga::proc::constant_evaluator] check: SubexpressionsAreNotConstant
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [70] = Splat { size: Quad, value: [69] } : Value(Vector { size: Quad, scalar: Scalar { kind: Float, width: 4 } })
[2024-07-27T06:21:52Z DEBUG naga::front::wgsl::lower::conversion] wgsl automatic_conversion_consensus: ["vec4<f32>", "vec4<f32>"]
[2024-07-27T06:21:52Z DEBUG naga::front::wgsl::lower::conversion]     consensus: "f32"
[2024-07-27T06:21:52Z DEBUG naga::proc::constant_evaluator] check: SubexpressionsAreNotConstant
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [71] = Binary { op: Add, left: [66], right: [70] } : Handle([5])
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [1] = FunctionArgument(0) : Handle([7])
[2024-07-27T06:21:52Z DEBUG naga::proc::constant_evaluator] check: SubexpressionsAreNotConstant
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [2] = AccessIndex { base: [1], index: 0 } : Value(Scalar(Scalar { kind: Uint, width: 4 }))
[2024-07-27T06:21:52Z DEBUG naga::proc::constant_evaluator] check: SubexpressionsAreNotConstant
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [3] = Math { fun: Unpack2x16float, arg: [2], arg1: None, arg2: None, arg3: None } : Value(Vector { size: Bi, scalar: Scalar { kind: Float, width: 4 } })
[2024-07-27T06:21:52Z DEBUG naga::proc::constant_evaluator] check: SubexpressionsAreNotConstant
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [4] = AccessIndex { base: [1], index: 1 } : Value(Scalar(Scalar { kind: Uint, width: 4 }))
[2024-07-27T06:21:52Z DEBUG naga::proc::constant_evaluator] check: SubexpressionsAreNotConstant
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [5] = Math { fun: Unpack2x16float, arg: [4], arg1: None, arg2: None, arg3: None } : Value(Vector { size: Bi, scalar: Scalar { kind: Float, width: 4 } })
[2024-07-27T06:21:52Z DEBUG naga::proc::constant_evaluator] check: SubexpressionsAreNotConstant
[2024-07-27T06:21:52Z DEBUG naga::proc::constant_evaluator] check: SubexpressionsAreNotConstant
[2024-07-27T06:21:52Z DEBUG naga::proc::constant_evaluator] check: SubexpressionsAreNotConstant
[2024-07-27T06:21:52Z DEBUG naga::proc::constant_evaluator] check: SubexpressionsAreNotConstant
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [6] = AccessIndex { base: [3], index: 1 } : Value(Scalar(Scalar { kind: Float, width: 4 }))
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [7] = AccessIndex { base: [3], index: 0 } : Value(Scalar(Scalar { kind: Float, width: 4 }))
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [8] = AccessIndex { base: [5], index: 1 } : Value(Scalar(Scalar { kind: Float, width: 4 }))
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [9] = AccessIndex { base: [5], index: 0 } : Value(Scalar(Scalar { kind: Float, width: 4 }))
[2024-07-27T06:21:52Z DEBUG naga::proc::constant_evaluator] check: SubexpressionsAreNotConstant
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [10] = Compose { ty: [5], components: [[6], [7], [8], [9]] } : Handle([5])
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [109] = Literal(I32(8)) : Value(Scalar(Scalar { kind: Sint, width: 4 }))
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [110] = Literal(AbstractInt(0)) : Value(Scalar(Scalar { kind: AbstractInt, width: 8 }))
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [111] = Literal(I32(0)) : Value(Scalar(Scalar { kind: Sint, width: 4 }))
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [112] = Literal(AbstractInt(8)) : Value(Scalar(Scalar { kind: AbstractInt, width: 8 }))
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [1] = FunctionArgument(0) : Handle([10])
[2024-07-27T06:21:52Z DEBUG naga::proc::constant_evaluator] check: SubexpressionsAreNotConstant
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [2] = AccessIndex { base: [1], index: 1 } : Handle([8])
[2024-07-27T06:21:52Z DEBUG naga::proc::constant_evaluator] check: SubexpressionsAreNotConstant
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [3] = Swizzle { size: Bi, vector: [2], pattern: [X, Y, X, X] } : Value(Vector { size: Bi, scalar: Scalar { kind: Uint, width: 4 } })
[2024-07-27T06:21:52Z DEBUG naga::proc::constant_evaluator] check: SubexpressionsAreNotConstant
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [4] = CallResult([8]) : Handle([5])
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [5] = AccessIndex { base: [1], index: 1 } : Handle([8])
[2024-07-27T06:21:52Z DEBUG naga::proc::constant_evaluator] check: SubexpressionsAreNotConstant
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [6] = Swizzle { size: Bi, vector: [5], pattern: [Z, W, X, X] } : Value(Vector { size: Bi, scalar: Scalar { kind: Uint, width: 4 } })
[2024-07-27T06:21:52Z DEBUG naga::proc::constant_evaluator] check: SubexpressionsAreNotConstant
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [7] = CallResult([8]) : Handle([5])
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [8] = AccessIndex { base: [1], index: 2 } : Handle([8])
[2024-07-27T06:21:52Z DEBUG naga::proc::constant_evaluator] check: SubexpressionsAreNotConstant
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [9] = Swizzle { size: Bi, vector: [8], pattern: [X, Y, X, X] } : Value(Vector { size: Bi, scalar: Scalar { kind: Uint, width: 4 } })
[2024-07-27T06:21:52Z DEBUG naga::proc::constant_evaluator] check: SubexpressionsAreNotConstant
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [10] = CallResult([8]) : Handle([5])
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [11] = AccessIndex { base: [1], index: 2 } : Handle([8])
[2024-07-27T06:21:52Z DEBUG naga::proc::constant_evaluator] check: SubexpressionsAreNotConstant
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [12] = Swizzle { size: Bi, vector: [11], pattern: [Z, W, X, X] } : Value(Vector { size: Bi, scalar: Scalar { kind: Uint, width: 4 } })
[2024-07-27T06:21:52Z DEBUG naga::proc::constant_evaluator] check: SubexpressionsAreNotConstant
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [13] = CallResult([8]) : Handle([5])
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [14] = AccessIndex { base: [1], index: 3 } : Handle([8])
[2024-07-27T06:21:52Z DEBUG naga::proc::constant_evaluator] check: SubexpressionsAreNotConstant
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [15] = Swizzle { size: Bi, vector: [14], pattern: [X, Y, X, X] } : Value(Vector { size: Bi, scalar: Scalar { kind: Uint, width: 4 } })
[2024-07-27T06:21:52Z DEBUG naga::proc::constant_evaluator] check: SubexpressionsAreNotConstant
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [16] = CallResult([8]) : Handle([5])
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [17] = AccessIndex { base: [1], index: 3 } : Handle([8])
[2024-07-27T06:21:52Z DEBUG naga::proc::constant_evaluator] check: SubexpressionsAreNotConstant
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [18] = Swizzle { size: Bi, vector: [17], pattern: [Z, W, X, X] } : Value(Vector { size: Bi, scalar: Scalar { kind: Uint, width: 4 } })
[2024-07-27T06:21:52Z DEBUG naga::proc::constant_evaluator] check: SubexpressionsAreNotConstant
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [19] = CallResult([8]) : Handle([5])
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [20] = AccessIndex { base: [1], index: 4 } : Handle([8])
[2024-07-27T06:21:52Z DEBUG naga::proc::constant_evaluator] check: SubexpressionsAreNotConstant
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [21] = Swizzle { size: Bi, vector: [20], pattern: [X, Y, X, X] } : Value(Vector { size: Bi, scalar: Scalar { kind: Uint, width: 4 } })
[2024-07-27T06:21:52Z DEBUG naga::proc::constant_evaluator] check: SubexpressionsAreNotConstant
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [22] = CallResult([8]) : Handle([5])
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [23] = AccessIndex { base: [1], index: 4 } : Handle([8])
[2024-07-27T06:21:52Z DEBUG naga::proc::constant_evaluator] check: SubexpressionsAreNotConstant
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [24] = Swizzle { size: Bi, vector: [23], pattern: [Z, W, X, X] } : Value(Vector { size: Bi, scalar: Scalar { kind: Uint, width: 4 } })
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [25] = CallResult([8]) : Handle([5])
[2024-07-27T06:21:52Z DEBUG naga::proc::constant_evaluator] check: SubexpressionsAreNotConstant
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [26] = Compose { ty: [14], components: [[4], [7], [10], [13], [16], [19], [22], [25]] } : Handle([14])
[2024-07-27T06:21:52Z DEBUG naga::proc::constant_evaluator] check: SubexpressionsAreNotConstant
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [27] = AccessIndex { base: [1], index: 5 } : Handle([8])
[2024-07-27T06:21:52Z DEBUG naga::proc::constant_evaluator] check: SubexpressionsAreNotConstant
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [28] = Swizzle { size: Bi, vector: [27], pattern: [X, Y, X, X] } : Value(Vector { size: Bi, scalar: Scalar { kind: Uint, width: 4 } })
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [29] = CallResult([8]) : Handle([5])
[2024-07-27T06:21:52Z DEBUG naga::proc::constant_evaluator] check: SubexpressionsAreNotConstant
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [30] = AccessIndex { base: [1], index: 5 } : Handle([8])
[2024-07-27T06:21:52Z DEBUG naga::proc::constant_evaluator] check: SubexpressionsAreNotConstant
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [31] = Swizzle { size: Bi, vector: [30], pattern: [Z, W, X, X] } : Value(Vector { size: Bi, scalar: Scalar { kind: Uint, width: 4 } })
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [32] = CallResult([8]) : Handle([5])
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [113] = Literal(I32(8)) : Value(Scalar(Scalar { kind: Sint, width: 4 }))
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [114] = Literal(AbstractInt(8)) : Value(Scalar(Scalar { kind: AbstractInt, width: 8 }))
[2024-07-27T06:21:52Z DEBUG naga::proc::constant_evaluator] check: SubexpressionsAreNotConstant
[2024-07-27T06:21:52Z DEBUG naga::proc::constant_evaluator] check: SubexpressionsAreNotConstant
[2024-07-27T06:21:52Z DEBUG naga::proc::constant_evaluator] check: SubexpressionsAreNotConstant
[2024-07-27T06:21:52Z DEBUG naga::proc::constant_evaluator] check: SubexpressionsAreNotConstant
[2024-07-27T06:21:52Z DEBUG naga::proc::constant_evaluator] check: SubexpressionsAreNotConstant
[2024-07-27T06:21:52Z DEBUG naga::proc::constant_evaluator] check: SubexpressionsAreNotConstant
[2024-07-27T06:21:52Z DEBUG naga::proc::constant_evaluator] check: SubexpressionsAreNotConstant
[2024-07-27T06:21:52Z DEBUG naga::proc::constant_evaluator] check: SubexpressionsAreNotConstant
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [33] = AccessIndex { base: [29], index: 0 } : Value(Scalar(Scalar { kind: Float, width: 4 }))
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [34] = AccessIndex { base: [29], index: 1 } : Value(Scalar(Scalar { kind: Float, width: 4 }))
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [35] = AccessIndex { base: [29], index: 2 } : Value(Scalar(Scalar { kind: Float, width: 4 }))
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [36] = AccessIndex { base: [29], index: 3 } : Value(Scalar(Scalar { kind: Float, width: 4 }))
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [37] = AccessIndex { base: [32], index: 0 } : Value(Scalar(Scalar { kind: Float, width: 4 }))
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [38] = AccessIndex { base: [32], index: 1 } : Value(Scalar(Scalar { kind: Float, width: 4 }))
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [39] = AccessIndex { base: [32], index: 2 } : Value(Scalar(Scalar { kind: Float, width: 4 }))
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [40] = AccessIndex { base: [32], index: 3 } : Value(Scalar(Scalar { kind: Float, width: 4 }))
[2024-07-27T06:21:52Z DEBUG naga::proc::constant_evaluator] check: SubexpressionsAreNotConstant
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [41] = Compose { ty: [15], components: [[33], [34], [35], [36], [37], [38], [39], [40]] } : Handle([15])
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [42] = LocalVariable([1]) : Value(Pointer { base: [15], space: Function })
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [43] = Literal(AbstractInt(7)) : Value(Scalar(Scalar { kind: AbstractInt, width: 8 }))
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [44] = Literal(I32(7)) : Value(Scalar(Scalar { kind: Sint, width: 4 }))
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [45] = LocalVariable([2]) : Value(Pointer { base: [16], space: Function })
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [46] = Literal(AbstractInt(0)) : Value(Scalar(Scalar { kind: AbstractInt, width: 8 }))
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [47] = Literal(I32(0)) : Value(Scalar(Scalar { kind: Sint, width: 4 }))
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [48] = LocalVariable([3]) : Value(Pointer { base: [16], space: Function })
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [49] = Load { pointer: [48] } : Handle([16])
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [50] = Literal(AbstractInt(7)) : Value(Scalar(Scalar { kind: AbstractInt, width: 8 }))
[2024-07-27T06:21:52Z DEBUG naga::front::wgsl::lower::conversion] wgsl automatic_conversion_consensus: ["i32", "{AbstractInt}"]
[2024-07-27T06:21:52Z DEBUG naga::front::wgsl::lower::conversion]     consensus: "i32"
[2024-07-27T06:21:52Z DEBUG naga::proc::constant_evaluator] check: SubexpressionsAreNotConstant
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [51] = Literal(I32(7)) : Value(Scalar(Scalar { kind: Sint, width: 4 }))
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [52] = Binary { op: LessEqual, left: [49], right: [51] } : Value(Scalar(Scalar { kind: Bool, width: 1 }))
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [53] = Load { pointer: [48] } : Handle([16])
[2024-07-27T06:21:52Z DEBUG naga::proc::constant_evaluator] check: SubexpressionsAreNotConstant
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [54] = Access { base: [42], index: [53] } : Value(Pointer { base: [2], space: Function })
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [55] = Load { pointer: [54] } : Handle([2])
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [56] = Literal(AbstractFloat(1.0)) : Value(Scalar(Scalar { kind: AbstractFloat, width: 8 }))
[2024-07-27T06:21:52Z DEBUG naga::front::wgsl::lower::conversion] wgsl automatic_conversion_consensus: ["f32", "{AbstractFloat}"]
[2024-07-27T06:21:52Z DEBUG naga::front::wgsl::lower::conversion]     consensus: "f32"
[2024-07-27T06:21:52Z DEBUG naga::proc::constant_evaluator] check: SubexpressionsAreNotConstant
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [57] = Literal(F32(1.0)) : Value(Scalar(Scalar { kind: Float, width: 4 }))
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [58] = Binary { op: Greater, left: [55], right: [57] } : Value(Scalar(Scalar { kind: Bool, width: 1 }))
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [59] = Load { pointer: [48] } : Handle([16])
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [60] = Literal(AbstractInt(1)) : Value(Scalar(Scalar { kind: AbstractInt, width: 8 }))
[2024-07-27T06:21:52Z DEBUG naga::front::wgsl::lower::conversion] wgsl automatic_conversion_consensus: ["i32", "{AbstractInt}"]
[2024-07-27T06:21:52Z DEBUG naga::front::wgsl::lower::conversion]     consensus: "i32"
[2024-07-27T06:21:52Z DEBUG naga::proc::constant_evaluator] check: SubexpressionsAreNotConstant
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [61] = Literal(I32(1)) : Value(Scalar(Scalar { kind: Sint, width: 4 }))
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [62] = Binary { op: Subtract, left: [59], right: [61] } : Handle([16])
[2024-07-27T06:21:52Z DEBUG naga::proc::constant_evaluator] check: SubexpressionsAreNotConstant
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [63] = Literal(I32(1)) : Value(Scalar(Scalar { kind: Sint, width: 4 }))
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [64] = Load { pointer: [48] } : Handle([16])
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [65] = Binary { op: Add, left: [64], right: [63] } : Handle([16])
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [66] = AccessIndex { base: [1], index: 0 } : Handle([5])
[2024-07-27T06:21:52Z DEBUG naga::proc::constant_evaluator] check: SubexpressionsAreNotConstant
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [67] = Swizzle { size: Bi, vector: [66], pattern: [X, Y, X, X] } : Value(Vector { size: Bi, scalar: Scalar { kind: Float, width: 4 } })
[2024-07-27T06:21:52Z DEBUG naga::proc::constant_evaluator] check: SubexpressionsAreNotConstant
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [68] = AccessIndex { base: [1], index: 6 } : Handle([5])
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [69] = Load { pointer: [42] } : Handle([15])
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [70] = Load { pointer: [45] } : Handle([16])
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [71] = CallResult([7]) : Handle([5])
[2024-07-27T06:21:52Z DEBUG naga::proc::constant_evaluator] check: SubexpressionsAreNotConstant
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [72] = LocalVariable([4]) : Value(Pointer { base: [5], space: Function })
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [73] = AccessIndex { base: [1], index: 7 } : Handle([5])
[2024-07-27T06:21:52Z DEBUG naga::proc::constant_evaluator] check: SubexpressionsAreNotConstant
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [74] = Swizzle { size: Bi, vector: [73], pattern: [X, Y, X, X] } : Value(Vector { size: Bi, scalar: Scalar { kind: Float, width: 4 } })
[2024-07-27T06:21:52Z DEBUG naga::proc::constant_evaluator] check: SubexpressionsAreNotConstant
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [75] = AccessIndex { base: [1], index: 7 } : Handle([5])
[2024-07-27T06:21:52Z DEBUG naga::proc::constant_evaluator] check: SubexpressionsAreNotConstant
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [76] = Swizzle { size: Bi, vector: [75], pattern: [Z, W, X, X] } : Value(Vector { size: Bi, scalar: Scalar { kind: Float, width: 4 } })
[2024-07-27T06:21:52Z DEBUG naga::proc::constant_evaluator] check: SubexpressionsAreNotConstant
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [77] = AccessIndex { base: [1], index: 9 } : Handle([5])
[2024-07-27T06:21:52Z DEBUG naga::proc::constant_evaluator] check: SubexpressionsAreNotConstant
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [78] = AccessIndex { base: [1], index: 0 } : Handle([5])
[2024-07-27T06:21:52Z DEBUG naga::proc::constant_evaluator] check: SubexpressionsAreNotConstant
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [79] = Swizzle { size: Bi, vector: [78], pattern: [X, Y, X, X] } : Value(Vector { size: Bi, scalar: Scalar { kind: Float, width: 4 } })
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [80] = Literal(AbstractFloat(0.5)) : Value(Scalar(Scalar { kind: AbstractFloat, width: 8 }))
[2024-07-27T06:21:52Z DEBUG naga::front::wgsl::lower::conversion] wgsl automatic_conversion_consensus: ["vec2<f32>", "{AbstractFloat}"]
[2024-07-27T06:21:52Z DEBUG naga::front::wgsl::lower::conversion]     consensus: "f32"
[2024-07-27T06:21:52Z DEBUG naga::proc::constant_evaluator] check: SubexpressionsAreNotConstant
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [81] = Literal(F32(0.5)) : Value(Scalar(Scalar { kind: Float, width: 4 }))
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [82] = Binary { op: Multiply, left: [76], right: [81] } : Value(Vector { size: Bi, scalar: Scalar { kind: Float, width: 4 } })
[2024-07-27T06:21:52Z DEBUG naga::front::wgsl::lower::conversion] wgsl automatic_conversion_consensus: ["vec2<f32>", "vec2<f32>"]
[2024-07-27T06:21:52Z DEBUG naga::front::wgsl::lower::conversion]     consensus: "f32"
[2024-07-27T06:21:52Z DEBUG naga::proc::constant_evaluator] check: SubexpressionsAreNotConstant
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [83] = Binary { op: Add, left: [74], right: [82] } : Value(Vector { size: Bi, scalar: Scalar { kind: Float, width: 4 } })
[2024-07-27T06:21:52Z DEBUG naga::proc::constant_evaluator] check: SubexpressionsAreNotConstant
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [84] = Swizzle { size: Bi, vector: [83], pattern: [X, Y, X, X] } : Value(Vector { size: Bi, scalar: Scalar { kind: Float, width: 4 } })
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [85] = CallResult([3]) : Handle([2])
[2024-07-27T06:21:52Z DEBUG naga::proc::constant_evaluator] check: SubexpressionsAreNotConstant
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [86] = LocalVariable([5]) : Value(Pointer { base: [2], space: Function })
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [87] = AccessIndex { base: [1], index: 10 } : Handle([2])
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [88] = Literal(AbstractFloat(0.0)) : Value(Scalar(Scalar { kind: AbstractFloat, width: 8 }))
[2024-07-27T06:21:52Z DEBUG naga::front::wgsl::lower::conversion] wgsl automatic_conversion_consensus: ["f32", "{AbstractFloat}"]
[2024-07-27T06:21:52Z DEBUG naga::front::wgsl::lower::conversion]     consensus: "f32"
[2024-07-27T06:21:52Z DEBUG naga::proc::constant_evaluator] check: SubexpressionsAreNotConstant
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [89] = Literal(F32(0.0)) : Value(Scalar(Scalar { kind: Float, width: 4 }))
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [90] = Binary { op: Greater, left: [87], right: [89] } : Value(Scalar(Scalar { kind: Bool, width: 1 }))
[2024-07-27T06:21:52Z DEBUG naga::proc::constant_evaluator] check: SubexpressionsAreNotConstant
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [91] = Load { pointer: [86] } : Handle([2])
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [92] = AccessIndex { base: [1], index: 10 } : Handle([2])
[2024-07-27T06:21:52Z DEBUG naga::front::wgsl::lower::conversion] wgsl automatic_conversion_consensus: ["f32", "f32"]
[2024-07-27T06:21:52Z DEBUG naga::front::wgsl::lower::conversion]     consensus: "f32"
[2024-07-27T06:21:52Z DEBUG naga::proc::constant_evaluator] check: SubexpressionsAreNotConstant
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [93] = Binary { op: Subtract, left: [91], right: [92] } : Handle([2])
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [94] = Literal(AbstractFloat(0.0)) : Value(Scalar(Scalar { kind: AbstractFloat, width: 8 }))
[2024-07-27T06:21:52Z DEBUG naga::proc::constant_evaluator] check: SubexpressionsAreNotConstant
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [95] = Literal(F32(0.0)) : Value(Scalar(Scalar { kind: Float, width: 4 }))
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [96] = Math { fun: Max, arg: [93], arg1: Some([95]), arg2: None, arg3: None } : Handle([2])
[2024-07-27T06:21:52Z DEBUG naga::proc::constant_evaluator] check: SubexpressionsAreNotConstant
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [97] = LocalVariable([6]) : Value(Pointer { base: [2], space: Function })
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [98] = AccessIndex { base: [1], index: 0 } : Handle([5])
[2024-07-27T06:21:52Z DEBUG naga::proc::constant_evaluator] check: SubexpressionsAreNotConstant
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [99] = Swizzle { size: Bi, vector: [98], pattern: [X, Y, X, X] } : Value(Vector { size: Bi, scalar: Scalar { kind: Float, width: 4 } })
[2024-07-27T06:21:52Z DEBUG naga::proc::constant_evaluator] check: SubexpressionsAreNotConstant
[2024-07-27T06:21:52Z DEBUG naga::proc::constant_evaluator] check: SubexpressionsAreNotConstant
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [100] = AccessIndex { base: [1], index: 10 } : Handle([2])
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [101] = AccessIndex { base: [1], index: 10 } : Handle([2])
[2024-07-27T06:21:52Z DEBUG naga::proc::constant_evaluator] check: SubexpressionsAreNotConstant
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [102] = Compose { ty: [4], components: [[100], [101]] } : Handle([4])
[2024-07-27T06:21:52Z DEBUG naga::front::wgsl::lower::conversion] wgsl automatic_conversion_consensus: ["vec2<f32>", "vec2<f32>"]
[2024-07-27T06:21:52Z DEBUG naga::front::wgsl::lower::conversion]     consensus: "f32"
[2024-07-27T06:21:52Z DEBUG naga::proc::constant_evaluator] check: SubexpressionsAreNotConstant
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [103] = Binary { op: Add, left: [74], right: [102] } : Value(Vector { size: Bi, scalar: Scalar { kind: Float, width: 4 } })
[2024-07-27T06:21:52Z DEBUG naga::proc::constant_evaluator] check: SubexpressionsAreNotConstant
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [104] = AccessIndex { base: [1], index: 10 } : Handle([2])
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [105] = Literal(AbstractFloat(2.0)) : Value(Scalar(Scalar { kind: AbstractFloat, width: 8 }))
[2024-07-27T06:21:52Z DEBUG naga::front::wgsl::lower::conversion] wgsl automatic_conversion_consensus: ["f32", "{AbstractFloat}"]
[2024-07-27T06:21:52Z DEBUG naga::front::wgsl::lower::conversion]     consensus: "f32"
[2024-07-27T06:21:52Z DEBUG naga::proc::constant_evaluator] check: SubexpressionsAreNotConstant
[2024-07-27T06:21:52Z DEBUG naga::proc::constant_evaluator] check: SubexpressionsAreNotConstant
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [106] = Literal(F32(2.0)) : Value(Scalar(Scalar { kind: Float, width: 4 }))
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [107] = Binary { op: Multiply, left: [104], right: [106] } : Value(Scalar(Scalar { kind: Float, width: 4 }))
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [108] = AccessIndex { base: [1], index: 10 } : Handle([2])
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [109] = Literal(AbstractFloat(2.0)) : Value(Scalar(Scalar { kind: AbstractFloat, width: 8 }))
[2024-07-27T06:21:52Z DEBUG naga::front::wgsl::lower::conversion] wgsl automatic_conversion_consensus: ["f32", "{AbstractFloat}"]
[2024-07-27T06:21:52Z DEBUG naga::front::wgsl::lower::conversion]     consensus: "f32"
[2024-07-27T06:21:52Z DEBUG naga::proc::constant_evaluator] check: SubexpressionsAreNotConstant
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [110] = Literal(F32(2.0)) : Value(Scalar(Scalar { kind: Float, width: 4 }))
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [111] = Binary { op: Multiply, left: [108], right: [110] } : Value(Scalar(Scalar { kind: Float, width: 4 }))
[2024-07-27T06:21:52Z DEBUG naga::proc::constant_evaluator] check: SubexpressionsAreNotConstant
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [112] = Compose { ty: [4], components: [[107], [111]] } : Handle([4])
[2024-07-27T06:21:52Z DEBUG naga::front::wgsl::lower::conversion] wgsl automatic_conversion_consensus: ["vec2<f32>", "vec2<f32>"]
[2024-07-27T06:21:52Z DEBUG naga::front::wgsl::lower::conversion]     consensus: "f32"
[2024-07-27T06:21:52Z DEBUG naga::proc::constant_evaluator] check: SubexpressionsAreNotConstant
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [113] = Binary { op: Subtract, left: [76], right: [112] } : Value(Vector { size: Bi, scalar: Scalar { kind: Float, width: 4 } })
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [114] = Load { pointer: [97] } : Handle([2])
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [115] = CallResult([2]) : Handle([2])
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [116] = LocalVariable([7]) : Value(Pointer { base: [2], space: Function })
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [117] = Load { pointer: [97] } : Handle([2])
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [118] = Literal(AbstractFloat(0.5)) : Value(Scalar(Scalar { kind: AbstractFloat, width: 8 }))
[2024-07-27T06:21:52Z DEBUG naga::front::wgsl::lower::conversion] wgsl automatic_conversion_consensus: ["f32", "{AbstractFloat}"]
[2024-07-27T06:21:52Z DEBUG naga::front::wgsl::lower::conversion]     consensus: "f32"
[2024-07-27T06:21:52Z DEBUG naga::proc::constant_evaluator] check: SubexpressionsAreNotConstant
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [119] = Literal(F32(0.5)) : Value(Scalar(Scalar { kind: Float, width: 4 }))
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [120] = Binary { op: Subtract, left: [117], right: [119] } : Handle([2])
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [121] = Literal(AbstractFloat(0.0)) : Value(Scalar(Scalar { kind: AbstractFloat, width: 8 }))
[2024-07-27T06:21:52Z DEBUG naga::proc::constant_evaluator] check: SubexpressionsAreNotConstant
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [122] = Literal(F32(0.0)) : Value(Scalar(Scalar { kind: Float, width: 4 }))
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [123] = Math { fun: Max, arg: [120], arg1: Some([122]), arg2: None, arg3: None } : Handle([2])
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [124] = Load { pointer: [97] } : Handle([2])
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [125] = Literal(AbstractFloat(0.5)) : Value(Scalar(Scalar { kind: AbstractFloat, width: 8 }))
[2024-07-27T06:21:52Z DEBUG naga::front::wgsl::lower::conversion] wgsl automatic_conversion_consensus: ["f32", "{AbstractFloat}"]
[2024-07-27T06:21:52Z DEBUG naga::front::wgsl::lower::conversion]     consensus: "f32"
[2024-07-27T06:21:52Z DEBUG naga::proc::constant_evaluator] check: SubexpressionsAreNotConstant
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [126] = Literal(F32(0.5)) : Value(Scalar(Scalar { kind: Float, width: 4 }))
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [127] = Binary { op: Add, left: [124], right: [126] } : Handle([2])
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [128] = Load { pointer: [116] } : Handle([2])
[2024-07-27T06:21:52Z DEBUG naga::proc::constant_evaluator] check: SubexpressionsAreNotConstant
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [129] = Math { fun: SmoothStep, arg: [123], arg1: Some([127]), arg2: Some([128]), arg3: None } : Handle([2])
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [130] = LocalVariable([8]) : Value(Pointer { base: [2], space: Function })
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [131] = Load { pointer: [72] } : Handle([5])
[2024-07-27T06:21:52Z DEBUG naga::proc::constant_evaluator] check: SubexpressionsAreNotConstant
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [132] = AccessIndex { base: [1], index: 8 } : Handle([5])
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [133] = Load { pointer: [130] } : Handle([2])
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [134] = Load { pointer: [130] } : Handle([2])
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [135] = Load { pointer: [130] } : Handle([2])
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [136] = Load { pointer: [130] } : Handle([2])
[2024-07-27T06:21:52Z DEBUG naga::proc::constant_evaluator] check: SubexpressionsAreNotConstant
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [137] = Compose { ty: [5], components: [[133], [134], [135], [136]] } : Handle([5])
[2024-07-27T06:21:52Z DEBUG naga::proc::constant_evaluator] check: SubexpressionsAreNotConstant
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [138] = Math { fun: Mix, arg: [131], arg1: Some([132]), arg2: Some([137]), arg3: None } : Handle([5])
[2024-07-27T06:21:52Z DEBUG naga::proc::constant_evaluator] check: SubexpressionsAreNotConstant
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [139] = AccessIndex { base: [1], index: 0 } : Handle([5])
[2024-07-27T06:21:52Z DEBUG naga::proc::constant_evaluator] check: SubexpressionsAreNotConstant
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [140] = Swizzle { size: Bi, vector: [139], pattern: [X, Y, X, X] } : Value(Vector { size: Bi, scalar: Scalar { kind: Float, width: 4 } })
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [141] = Load { pointer: [86] } : Handle([2])
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [142] = CallResult([2]) : Handle([2])
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [143] = LocalVariable([9]) : Value(Pointer { base: [2], space: Function })
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [144] = Literal(AbstractFloat(1.0)) : Value(Scalar(Scalar { kind: AbstractFloat, width: 8 }))
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [145] = Load { pointer: [86] } : Handle([2])
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [146] = Literal(AbstractFloat(0.5)) : Value(Scalar(Scalar { kind: AbstractFloat, width: 8 }))
[2024-07-27T06:21:52Z DEBUG naga::front::wgsl::lower::conversion] wgsl automatic_conversion_consensus: ["f32", "{AbstractFloat}"]
[2024-07-27T06:21:52Z DEBUG naga::front::wgsl::lower::conversion]     consensus: "f32"
[2024-07-27T06:21:52Z DEBUG naga::proc::constant_evaluator] check: SubexpressionsAreNotConstant
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [147] = Literal(F32(0.5)) : Value(Scalar(Scalar { kind: Float, width: 4 }))
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [148] = Binary { op: Subtract, left: [145], right: [147] } : Handle([2])
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [149] = Literal(AbstractFloat(0.0)) : Value(Scalar(Scalar { kind: AbstractFloat, width: 8 }))
[2024-07-27T06:21:52Z DEBUG naga::proc::constant_evaluator] check: SubexpressionsAreNotConstant
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [150] = Literal(F32(0.0)) : Value(Scalar(Scalar { kind: Float, width: 4 }))
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [151] = Math { fun: Max, arg: [148], arg1: Some([150]), arg2: None, arg3: None } : Handle([2])
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [152] = Load { pointer: [86] } : Handle([2])
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [153] = Literal(AbstractFloat(0.5)) : Value(Scalar(Scalar { kind: AbstractFloat, width: 8 }))
[2024-07-27T06:21:52Z DEBUG naga::front::wgsl::lower::conversion] wgsl automatic_conversion_consensus: ["f32", "{AbstractFloat}"]
[2024-07-27T06:21:52Z DEBUG naga::front::wgsl::lower::conversion]     consensus: "f32"
[2024-07-27T06:21:52Z DEBUG naga::proc::constant_evaluator] check: SubexpressionsAreNotConstant
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [154] = Literal(F32(0.5)) : Value(Scalar(Scalar { kind: Float, width: 4 }))
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [155] = Binary { op: Add, left: [152], right: [154] } : Handle([2])
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [156] = Load { pointer: [143] } : Handle([2])
[2024-07-27T06:21:52Z DEBUG naga::proc::constant_evaluator] check: SubexpressionsAreNotConstant
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [157] = Math { fun: SmoothStep, arg: [151], arg1: Some([155]), arg2: Some([156]), arg3: None } : Handle([2])
[2024-07-27T06:21:52Z DEBUG naga::front::wgsl::lower::conversion] wgsl automatic_conversion_consensus: ["{AbstractFloat}", "f32"]
[2024-07-27T06:21:52Z DEBUG naga::front::wgsl::lower::conversion]     consensus: "f32"
[2024-07-27T06:21:52Z DEBUG naga::proc::constant_evaluator] check: SubexpressionsAreNotConstant
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [158] = Literal(F32(1.0)) : Value(Scalar(Scalar { kind: Float, width: 4 }))
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [159] = Binary { op: Subtract, left: [158], right: [157] } : Value(Scalar(Scalar { kind: Float, width: 4 }))
[2024-07-27T06:21:52Z DEBUG naga::proc::constant_evaluator] check: SubexpressionsAreNotConstant
[2024-07-27T06:21:52Z DEBUG naga::proc::constant_evaluator] check: SubexpressionsAreNotConstant
[2024-07-27T06:21:52Z DEBUG naga::proc::constant_evaluator] check: SubexpressionsAreNotConstant
[2024-07-27T06:21:52Z DEBUG naga::proc::constant_evaluator] check: SubexpressionsAreNotConstant
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [160] = LocalVariable([10]) : Value(Pointer { base: [2], space: Function })
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [161] = AccessIndex { base: [72], index: 0 } : Value(ValuePointer { size: None, scalar: Scalar { kind: Float, width: 4 }, space: Function })
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [162] = Load { pointer: [161] } : Value(Scalar(Scalar { kind: Float, width: 4 }))
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [163] = AccessIndex { base: [72], index: 1 } : Value(ValuePointer { size: None, scalar: Scalar { kind: Float, width: 4 }, space: Function })
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [164] = Load { pointer: [163] } : Value(Scalar(Scalar { kind: Float, width: 4 }))
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [165] = AccessIndex { base: [72], index: 2 } : Value(ValuePointer { size: None, scalar: Scalar { kind: Float, width: 4 }, space: Function })
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [166] = Load { pointer: [165] } : Value(Scalar(Scalar { kind: Float, width: 4 }))
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [167] = AccessIndex { base: [72], index: 3 } : Value(ValuePointer { size: None, scalar: Scalar { kind: Float, width: 4 }, space: Function })
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [168] = Load { pointer: [167] } : Value(Scalar(Scalar { kind: Float, width: 4 }))
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [169] = Load { pointer: [160] } : Handle([2])
[2024-07-27T06:21:52Z DEBUG naga::front::wgsl::lower::conversion] wgsl automatic_conversion_consensus: ["f32", "f32"]
[2024-07-27T06:21:52Z DEBUG naga::front::wgsl::lower::conversion]     consensus: "f32"
[2024-07-27T06:21:52Z DEBUG naga::proc::constant_evaluator] check: SubexpressionsAreNotConstant
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [170] = Binary { op: Multiply, left: [168], right: [169] } : Handle([2])
[2024-07-27T06:21:52Z DEBUG naga::proc::constant_evaluator] check: SubexpressionsAreNotConstant
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [171] = Compose { ty: [5], components: [[162], [164], [166], [170]] } : Handle([5])
[2024-07-27T06:21:52Z DEBUG naga::valid::interface] var GlobalVariable { name: Some("globals"), space: Uniform, binding: Some(ResourceBinding { group: 0, binding: 0 }), ty: [3], init: None }
[2024-07-27T06:21:52Z DEBUG naga::valid::function] var LocalVariable { name: Some("inner_half_size"), ty: [4], init: None }
[2024-07-27T06:21:52Z DEBUG naga::valid::function] var LocalVariable { name: Some("top_left"), ty: [4], init: None }
[2024-07-27T06:21:52Z DEBUG naga::valid::function] var LocalVariable { name: Some("rx"), ty: [2], init: None }
[2024-07-27T06:21:52Z DEBUG naga::valid::function] var LocalVariable { name: Some("ry"), ty: [2], init: None }
[2024-07-27T06:21:52Z DEBUG naga::valid::function] var LocalVariable { name: Some("color"), ty: [5], init: None }
[2024-07-27T06:21:52Z DEBUG naga::valid::function] var LocalVariable { name: Some("colors_arr"), ty: [13], init: None }
[2024-07-27T06:21:52Z DEBUG naga::valid::function] var LocalVariable { name: Some("offsets_arr"), ty: [14], init: None }
[2024-07-27T06:21:52Z DEBUG naga::valid::function] var LocalVariable { name: Some("color"), ty: [5], init: None }
[2024-07-27T06:21:52Z DEBUG naga::valid::function] var LocalVariable { name: Some("i"), ty: [15], init: Some([18]) }
[2024-07-27T06:21:52Z DEBUG naga::valid::function] var LocalVariable { name: Some("out"), ty: [10], init: None }
[2024-07-27T06:21:52Z DEBUG naga::valid::function] var LocalVariable { name: Some("pos"), ty: [4], init: None }
[2024-07-27T06:21:52Z DEBUG naga::valid::function] var LocalVariable { name: Some("scale"), ty: [4], init: None }
[2024-07-27T06:21:52Z DEBUG naga::valid::function] var LocalVariable { name: Some("min_border_radius"), ty: [2], init: None }
[2024-07-27T06:21:52Z DEBUG naga::valid::function] var LocalVariable { name: Some("border_radius"), ty: [5], init: None }
[2024-07-27T06:21:52Z DEBUG naga::valid::function] var LocalVariable { name: Some("transform"), ty: [1], init: None }
[2024-07-27T06:21:52Z DEBUG naga::valid::function] var LocalVariable { name: Some("offsets"), ty: [14], init: None }
[2024-07-27T06:21:52Z DEBUG naga::valid::function] var LocalVariable { name: Some("last_index"), ty: [15], init: Some([43]) }
[2024-07-27T06:21:52Z DEBUG naga::valid::function] var LocalVariable { name: Some("i"), ty: [15], init: Some([45]) }
[2024-07-27T06:21:52Z DEBUG naga::valid::function] var LocalVariable { name: Some("mixed_color"), ty: [5], init: None }
[2024-07-27T06:21:52Z DEBUG naga::valid::function] var LocalVariable { name: Some("border_radius"), ty: [2], init: None }
[2024-07-27T06:21:52Z DEBUG naga::valid::function] var LocalVariable { name: Some("internal_border"), ty: [2], init: None }
[2024-07-27T06:21:52Z DEBUG naga::valid::function] var LocalVariable { name: Some("internal_distance"), ty: [2], init: None }
[2024-07-27T06:21:52Z DEBUG naga::valid::function] var LocalVariable { name: Some("border_mix"), ty: [2], init: None }
[2024-07-27T06:21:52Z DEBUG naga::valid::function] var LocalVariable { name: Some("dist"), ty: [2], init: None }
[2024-07-27T06:21:52Z DEBUG naga::valid::function] var LocalVariable { name: Some("radius_alpha"), ty: [2], init: None }
[2024-07-27T06:21:52Z DEBUG wgpu_hal::gles::device] Naga generated shader:
    #version 320 es
    
    precision highp float;
    precision highp int;
    
    struct Globals {
        mat4x4 transform;
        float scale;
    };
    struct GradientVertexInput {
        uint vertex_index;
        uvec4 colors_1_;
        uvec4 colors_2_;
        uvec4 colors_3_;
        uvec4 colors_4_;
        uvec4 offsets;
        vec4 direction;
        vec4 position_and_scale;
        vec4 border_color;
        vec4 border_radius;
        float border_width;
    };
    struct GradientVertexOutput {
        vec4 position;
        uvec4 colors_1_;
        uvec4 colors_2_;
        uvec4 colors_3_;
        uvec4 colors_4_;
        uvec4 offsets;
        vec4 direction;
        vec4 position_and_scale;
        vec4 border_color;
        vec4 border_radius;
        float border_width;
    };
    const mat3x4 to_lms = mat3x4(vec4(0.4121656, 0.2118591, 0.088309795, 0.0), vec4(0.5362752, 0.68071896, 0.28184742, 0.0), vec4(0.051457565, 0.10740658, 0.63026136, 0.0));
    const mat3x4 to_rgb = mat3x4(vec4(4.0767245, -3.307217, 0.23075905, 0.0), vec4(-1.2681438, 2.6093323, -0.34113443, 0.0), vec4(-0.0041119885, -0.7034763, 1.7068626, 0.0));
    
    layout(std140, binding = 0) uniform Globals_block_0Vertex { Globals _group_0_binding_0_vs; };
    
    layout(location = 0) in uvec4 _p2vs_location0;
    layout(location = 1) in uvec4 _p2vs_location1;
    layout(location = 2) in uvec4 _p2vs_location2;
    layout(location = 3) in uvec4 _p2vs_location3;
    layout(location = 4) in uvec4 _p2vs_location4;
    layout(location = 5) in vec4 _p2vs_location5;
    layout(location = 6) in vec4 _p2vs_location6;
    layout(location = 7) in vec4 _p2vs_location7;
    layout(location = 8) in vec4 _p2vs_location8;
    layout(location = 9) in float _p2vs_location9;
    layout(location = 1) flat out uvec4 _vs2fs_location1;
    layout(location = 2) flat out uvec4 _vs2fs_location2;
    layout(location = 3) flat out uvec4 _vs2fs_location3;
    layout(location = 4) flat out uvec4 _vs2fs_location4;
    layout(location = 5) flat out uvec4 _vs2fs_location5;
    layout(location = 6) smooth out vec4 _vs2fs_location6;
    layout(location = 7) smooth out vec4 _vs2fs_location7;
    layout(location = 8) smooth out vec4 _vs2fs_location8;
    layout(location = 9) smooth out vec4 _vs2fs_location9;
    layout(location = 10) smooth out float _vs2fs_location10;
    
    float rounded_box_sdf(vec2 to_center, vec2 size, float radius) {
        return (length(max(((abs(to_center) - size) + vec2(radius, radius)), vec2(0.0, 0.0))) - radius);
    }
    
    float distance_alg(vec2 frag_coord, vec2 position, vec2 size_1, float radius_1) {
        vec2 inner_half_size = vec2(0.0);
        vec2 top_left = vec2(0.0);
        inner_half_size = ((size_1 - (vec2(radius_1, radius_1) * 2.0)) / vec2(2.0));
        top_left = (position + vec2(radius_1, radius_1));
        vec2 _e15 = top_left;
        vec2 _e17 = inner_half_size;
        vec2 _e19 = inner_half_size;
        float _e21 = rounded_box_sdf(((frag_coord - _e15) - _e17), _e19, 0.0);
        return _e21;
    }
    
    float select_border_radius(vec4 radi, vec2 position_1, vec2 center) {
        float rx = 0.0;
        float ry = 0.0;
        rx = radi.x;
        ry = radi.y;
        rx = ((position_1.x > center.x) ? radi.y : radi.x);
        ry = ((position_1.x > center.x) ? radi.z : radi.w);
        float _e19 = rx;
        float _e20 = ry;
        rx = ((position_1.y > center.y) ? _e20 : _e19);
        float _e25 = rx;
        return _e25;
    }
    
    vec2 vertex_position(uint vertex_index) {
        return vec2(lessThan(((uvec2(1u, 2u) + uvec2(vertex_index)) % uvec2(6u)), uvec2(3u)));
    }
    
    float random(vec2 coords) {
        return fract((sin(dot(coords, vec2(12.9898, 78.233))) * 43758.547));
    }
    
    vec4 interpolate_color(vec4 from, vec4 to, float factor) {
        vec4 color = vec4(0.0);
        vec3 lms_a = pow((from * to_lms), vec3(0.33333334, 0.33333334, 0.33333334));
        vec3 lms_b = pow((to * to_lms), vec3(0.33333334, 0.33333334, 0.33333334));
        vec3 mixed = mix(lms_a, lms_b, factor);
        color = (to_rgb * ((mixed * mixed) * mixed));
        color.w = mix(from.w, to.w, factor);
        vec4 _e27 = color;
        return _e27;
    }
    
    vec4 gradient(vec2 raw_position, vec4 direction, vec4 colors[8], float offsets_1[8], int last_index_1) {
        vec4 colors_arr[8] = vec4[8](vec4(0.0), vec4(0.0), vec4(0.0), vec4(0.0), vec4(0.0), vec4(0.0), vec4(0.0), vec4(0.0));
        float offsets_arr[8] = float[8](0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
        vec4 color_1 = vec4(0.0);
        int i_1 = 0;
        vec2 start = direction.xy;
        vec2 end = direction.zw;
        vec2 v1_ = (end - start);
        vec2 v2_ = (raw_position - start);
        vec2 unit = normalize(v1_);
        float coord_offset = (dot(unit, v2_) / length(v1_));
        colors_arr = colors;
        offsets_arr = offsets_1;
        bool loop_init = true;
        while(true) {
            if (!loop_init) {
                int _e53 = i_1;
                i_1 = (_e53 + 1);
            }
            loop_init = false;
            int _e19 = i_1;
            if ((_e19 < last_index_1)) {
            } else {
                break;
            }
            {
                int _e21 = i_1;
                float curr_offset = offsets_arr[_e21];
                int _e24 = i_1;
                float next_offset = offsets_arr[(_e24 + 1)];
                float _e30 = offsets_arr[0];
                if ((coord_offset <= _e30)) {
                    vec4 _e33 = colors_arr[0];
                    color_1 = _e33;
                }
                if (((curr_offset <= coord_offset) && (coord_offset <= next_offset))) {
                    int _e37 = i_1;
                    vec4 from_1 = colors_arr[_e37];
                    int _e40 = i_1;
                    vec4 to_1 = colors_arr[(_e40 + 1)];
                    float factor_1 = smoothstep(curr_offset, next_offset, coord_offset);
                    vec4 _e46 = interpolate_color(from_1, to_1, factor_1);
                    color_1 = _e46;
                }
                float _e48 = offsets_arr[last_index_1];
                if ((coord_offset >= _e48)) {
                    vec4 _e51 = colors_arr[last_index_1];
                    color_1 = _e51;
                }
            }
        }
        vec4 _e55 = color_1;
        float _e57 = random(raw_position);
        return (_e55 + vec4(mix(-(0.0011764705), 0.0011764705, _e57)));
    }
    
    vec4 unpack_u32_(uvec2 color_2) {
        vec2 rg = unpackHalf2x16(color_2.x);
        vec2 ba = unpackHalf2x16(color_2.y);
        return vec4(rg.y, rg.x, ba.y, ba.x);
    }
    
    void main() {
        GradientVertexInput input_ = GradientVertexInput(uint(gl_VertexID), _p2vs_location0, _p2vs_location1, _p2vs_location2, _p2vs_location3, _p2vs_location4, _p2vs_location5, _p2vs_location6, _p2vs_location7, _p2vs_location8, _p2vs_location9);
        GradientVertexOutput out_ = GradientVertexOutput(vec4(0.0), uvec4(0u), uvec4(0u), uvec4(0u), uvec4(0u), uvec4(0u), vec4(0.0), vec4(0.0), vec4(0.0), vec4(0.0), 0.0);
        vec2 pos = vec2(0.0);
        vec2 scale = vec2(0.0);
        float min_border_radius = 0.0;
        vec4 border_radius = vec4(0.0);
        mat4x4 transform = mat4x4(0.0);
        float _e6 = _group_0_binding_0_vs.scale;
        pos = (input_.position_and_scale.xy * _e6);
        float _e13 = _group_0_binding_0_vs.scale;
        scale = (input_.position_and_scale.zw * _e13);
        min_border_radius = (min(input_.position_and_scale.z, input_.position_and_scale.w) * 0.5);
        float _e26 = min_border_radius;
        float _e30 = min_border_radius;
        float _e34 = min_border_radius;
        float _e38 = min_border_radius;
        border_radius = vec4(min(input_.border_radius.x, _e26), min(input_.border_radius.y, _e30), min(input_.border_radius.z, _e34), min(input_.border_radius.w, _e38));
        float _e43 = scale.x;
        float _e51 = scale.y;
        vec2 _e63 = pos;
        transform = mat4x4(vec4((_e43 + 1.0), 0.0, 0.0, 0.0), vec4(0.0, (_e51 + 1.0), 0.0, 0.0), vec4(0.0, 0.0, 1.0, 0.0), vec4((_e63 - vec2(0.5, 0.5)), 0.0, 1.0));
        mat4x4 _e76 = _group_0_binding_0_vs.transform;
        mat4x4 _e77 = transform;
        vec2 _e80 = vertex_position(input_.vertex_index);
        out_.position = ((_e76 * _e77) * vec4(_e80, 0.0, 1.0));
        out_.colors_1_ = input_.colors_1_;
        out_.colors_2_ = input_.colors_2_;
        out_.colors_3_ = input_.colors_3_;
        out_.colors_4_ = input_.colors_4_;
        out_.offsets = input_.offsets;
        float _e99 = _group_0_binding_0_vs.scale;
        out_.direction = (input_.direction * _e99);
        vec2 _e102 = pos;
        vec2 _e103 = scale;
        out_.position_and_scale = vec4(_e102, _e103);
        out_.border_color = input_.border_color;
        vec4 _e108 = border_radius;
        float _e111 = _group_0_binding_0_vs.scale;
        out_.border_radius = (_e108 * _e111);
        float _e117 = _group_0_binding_0_vs.scale;
        out_.border_width = (input_.border_width * _e117);
        GradientVertexOutput _e119 = out_;
        gl_Position = _e119.position;
        _vs2fs_location1 = _e119.colors_1_;
        _vs2fs_location2 = _e119.colors_2_;
        _vs2fs_location3 = _e119.colors_3_;
        _vs2fs_location4 = _e119.colors_4_;
        _vs2fs_location5 = _e119.offsets;
        _vs2fs_location6 = _e119.direction;
        _vs2fs_location7 = _e119.position_and_scale;
        _vs2fs_location8 = _e119.border_color;
        _vs2fs_location9 = _e119.border_radius;
        _vs2fs_location10 = _e119.border_width;
        gl_Position.yz = vec2(-gl_Position.y, gl_Position.z * 2.0 - gl_Position.w);
        gl_PointSize = 1.0;
        return;
    }
    
    
[2024-07-27T06:21:52Z DEBUG wgpu_hal::gles::device] 	Compiled shader NativeShader(8)
[2024-07-27T06:21:52Z DEBUG wgpu_hal::gles::device] Naga generated shader:
    #version 320 es
    
    precision highp float;
    precision highp int;
    
    struct Globals {
        mat4x4 transform;
        float scale;
    };
    struct GradientVertexInput {
        uint vertex_index;
        uvec4 colors_1_;
        uvec4 colors_2_;
        uvec4 colors_3_;
        uvec4 colors_4_;
        uvec4 offsets;
        vec4 direction;
        vec4 position_and_scale;
        vec4 border_color;
        vec4 border_radius;
        float border_width;
    };
    struct GradientVertexOutput {
        vec4 position;
        uvec4 colors_1_;
        uvec4 colors_2_;
        uvec4 colors_3_;
        uvec4 colors_4_;
        uvec4 offsets;
        vec4 direction;
        vec4 position_and_scale;
        vec4 border_color;
        vec4 border_radius;
        float border_width;
    };
    const mat3x4 to_lms = mat3x4(vec4(0.4121656, 0.2118591, 0.088309795, 0.0), vec4(0.5362752, 0.68071896, 0.28184742, 0.0), vec4(0.051457565, 0.10740658, 0.63026136, 0.0));
    const mat3x4 to_rgb = mat3x4(vec4(4.0767245, -3.307217, 0.23075905, 0.0), vec4(-1.2681438, 2.6093323, -0.34113443, 0.0), vec4(-0.0041119885, -0.7034763, 1.7068626, 0.0));
    
    layout(location = 1) flat in uvec4 _vs2fs_location1;
    layout(location = 2) flat in uvec4 _vs2fs_location2;
    layout(location = 3) flat in uvec4 _vs2fs_location3;
    layout(location = 4) flat in uvec4 _vs2fs_location4;
    layout(location = 5) flat in uvec4 _vs2fs_location5;
    layout(location = 6) smooth in vec4 _vs2fs_location6;
    layout(location = 7) smooth in vec4 _vs2fs_location7;
    layout(location = 8) smooth in vec4 _vs2fs_location8;
    layout(location = 9) smooth in vec4 _vs2fs_location9;
    layout(location = 10) smooth in float _vs2fs_location10;
    layout(location = 0) out vec4 _fs2p_location0;
    
    float rounded_box_sdf(vec2 to_center, vec2 size, float radius) {
        return (length(max(((abs(to_center) - size) + vec2(radius, radius)), vec2(0.0, 0.0))) - radius);
    }
    
    float distance_alg(vec2 frag_coord, vec2 position, vec2 size_1, float radius_1) {
        vec2 inner_half_size = vec2(0.0);
        vec2 top_left = vec2(0.0);
        inner_half_size = ((size_1 - (vec2(radius_1, radius_1) * 2.0)) / vec2(2.0));
        top_left = (position + vec2(radius_1, radius_1));
        vec2 _e15 = top_left;
        vec2 _e17 = inner_half_size;
        vec2 _e19 = inner_half_size;
        float _e21 = rounded_box_sdf(((frag_coord - _e15) - _e17), _e19, 0.0);
        return _e21;
    }
    
    float select_border_radius(vec4 radi, vec2 position_1, vec2 center) {
        float rx = 0.0;
        float ry = 0.0;
        rx = radi.x;
        ry = radi.y;
        rx = ((position_1.x > center.x) ? radi.y : radi.x);
        ry = ((position_1.x > center.x) ? radi.z : radi.w);
        float _e19 = rx;
        float _e20 = ry;
        rx = ((position_1.y > center.y) ? _e20 : _e19);
        float _e25 = rx;
        return _e25;
    }
    
    vec2 vertex_position(uint vertex_index) {
        return vec2(lessThan(((uvec2(1u, 2u) + uvec2(vertex_index)) % uvec2(6u)), uvec2(3u)));
    }
    
    float random(vec2 coords) {
        return fract((sin(dot(coords, vec2(12.9898, 78.233))) * 43758.547));
    }
    
    vec4 interpolate_color(vec4 from, vec4 to, float factor) {
        vec4 color = vec4(0.0);
        vec3 lms_a = pow((from * to_lms), vec3(0.33333334, 0.33333334, 0.33333334));
        vec3 lms_b = pow((to * to_lms), vec3(0.33333334, 0.33333334, 0.33333334));
        vec3 mixed = mix(lms_a, lms_b, factor);
        color = (to_rgb * ((mixed * mixed) * mixed));
        color.w = mix(from.w, to.w, factor);
        vec4 _e27 = color;
        return _e27;
    }
    
    vec4 gradient(vec2 raw_position, vec4 direction, vec4 colors[8], float offsets_1[8], int last_index_1) {
        vec4 colors_arr[8] = vec4[8](vec4(0.0), vec4(0.0), vec4(0.0), vec4(0.0), vec4(0.0), vec4(0.0), vec4(0.0), vec4(0.0));
        float offsets_arr[8] = float[8](0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
        vec4 color_1 = vec4(0.0);
        int i_1 = 0;
        vec2 start = direction.xy;
        vec2 end = direction.zw;
        vec2 v1_ = (end - start);
        vec2 v2_ = (raw_position - start);
        vec2 unit = normalize(v1_);
        float coord_offset = (dot(unit, v2_) / length(v1_));
        colors_arr = colors;
        offsets_arr = offsets_1;
        bool loop_init = true;
        while(true) {
            if (!loop_init) {
                int _e53 = i_1;
                i_1 = (_e53 + 1);
            }
            loop_init = false;
            int _e19 = i_1;
            if ((_e19 < last_index_1)) {
            } else {
                break;
            }
            {
                int _e21 = i_1;
                float curr_offset = offsets_arr[_e21];
                int _e24 = i_1;
                float next_offset = offsets_arr[(_e24 + 1)];
                float _e30 = offsets_arr[0];
                if ((coord_offset <= _e30)) {
                    vec4 _e33 = colors_arr[0];
                    color_1 = _e33;
                }
                if (((curr_offset <= coord_offset) && (coord_offset <= next_offset))) {
                    int _e37 = i_1;
                    vec4 from_1 = colors_arr[_e37];
                    int _e40 = i_1;
                    vec4 to_1 = colors_arr[(_e40 + 1)];
                    float factor_1 = smoothstep(curr_offset, next_offset, coord_offset);
                    vec4 _e46 = interpolate_color(from_1, to_1, factor_1);
                    color_1 = _e46;
                }
                float _e48 = offsets_arr[last_index_1];
                if ((coord_offset >= _e48)) {
                    vec4 _e51 = colors_arr[last_index_1];
                    color_1 = _e51;
                }
            }
        }
        vec4 _e55 = color_1;
        float _e57 = random(raw_position);
        return (_e55 + vec4(mix(-(0.0011764705), 0.0011764705, _e57)));
    }
    
    vec4 unpack_u32_(uvec2 color_2) {
        vec2 rg = unpackHalf2x16(color_2.x);
        vec2 ba = unpackHalf2x16(color_2.y);
        return vec4(rg.y, rg.x, ba.y, ba.x);
    }
    
    void main() {
        GradientVertexOutput input_1 = GradientVertexOutput(gl_FragCoord, _vs2fs_location1, _vs2fs_location2, _vs2fs_location3, _vs2fs_location4, _vs2fs_location5, _vs2fs_location6, _vs2fs_location7, _vs2fs_location8, _vs2fs_location9, _vs2fs_location10);
        float offsets[8] = float[8](0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
        int last_index = 7;
        int i = 0;
        vec4 mixed_color = vec4(0.0);
        float border_radius_1 = 0.0;
        float internal_border = 0.0;
        float internal_distance = 0.0;
        float border_mix = 0.0;
        float dist = 0.0;
        float radius_alpha = 0.0;
        vec4 _e3 = unpack_u32_(input_1.colors_1_.xy);
        vec4 _e6 = unpack_u32_(input_1.colors_1_.zw);
        vec4 _e9 = unpack_u32_(input_1.colors_2_.xy);
        vec4 _e12 = unpack_u32_(input_1.colors_2_.zw);
        vec4 _e15 = unpack_u32_(input_1.colors_3_.xy);
        vec4 _e18 = unpack_u32_(input_1.colors_3_.zw);
        vec4 _e21 = unpack_u32_(input_1.colors_4_.xy);
        vec4 _e24 = unpack_u32_(input_1.colors_4_.zw);
        vec4 colors_1[8] = vec4[8](_e3, _e6, _e9, _e12, _e15, _e18, _e21, _e24);
        vec4 _e28 = unpack_u32_(input_1.offsets.xy);
        vec4 _e31 = unpack_u32_(input_1.offsets.zw);
        offsets = float[8](_e28.x, _e28.y, _e28.z, _e28.w, _e31.x, _e31.y, _e31.z, _e31.w);
        bool loop_init_1 = true;
        while(true) {
            if (!loop_init_1) {
                int _e58 = i;
                i = (_e58 + 1);
            }
            loop_init_1 = false;
            int _e46 = i;
            if ((_e46 <= 7)) {
            } else {
                break;
            }
            {
                int _e49 = i;
                float _e51 = offsets[_e49];
                if ((_e51 > 1.0)) {
                    int _e54 = i;
                    last_index = (_e54 - 1);
                    break;
                }
            }
        }
        float _e63[8] = offsets;
        int _e64 = last_index;
        vec4 _e65 = gradient(input_1.position.xy, input_1.direction, colors_1, _e63, _e64);
        mixed_color = _e65;
        vec2 pos_1 = input_1.position_and_scale.xy;
        vec2 scale_1 = input_1.position_and_scale.zw;
        float _e78 = select_border_radius(input_1.border_radius, input_1.position.xy, (pos_1 + (scale_1 * 0.5)).xy);
        border_radius_1 = _e78;
        if ((input_1.border_width > 0.0)) {
            float _e83 = border_radius_1;
            internal_border = max((_e83 - input_1.border_width), 0.0);
            float _e103 = internal_border;
            float _e104 = distance_alg(input_1.position.xy, (pos_1 + vec2(input_1.border_width, input_1.border_width)), (scale_1 - vec2((input_1.border_width * 2.0), (input_1.border_width * 2.0))), _e103);
            internal_distance = _e104;
            float _e106 = internal_border;
            float _e111 = internal_border;
            float _e114 = internal_distance;
            border_mix = smoothstep(max((_e106 - 0.5), 0.0), (_e111 + 0.5), _e114);
            vec4 _e117 = mixed_color;
            float _e119 = border_mix;
            float _e120 = border_mix;
            float _e121 = border_mix;
            float _e122 = border_mix;
            mixed_color = mix(_e117, input_1.border_color, vec4(_e119, _e120, _e121, _e122));
        }
        float _e127 = border_radius_1;
        float _e128 = distance_alg(input_1.position.xy, pos_1, scale_1, _e127);
        dist = _e128;
        float _e130 = border_radius_1;
        float _e135 = border_radius_1;
        float _e138 = dist;
        radius_alpha = (1.0 - smoothstep(max((_e130 - 0.5), 0.0), (_e135 + 0.5), _e138));
        float _e144 = mixed_color.x;
        float _e146 = mixed_color.y;
        float _e148 = mixed_color.z;
        float _e150 = mixed_color.w;
        float _e151 = radius_alpha;
        _fs2p_location0 = vec4(_e144, _e146, _e148, (_e150 * _e151));
        return;
    }
    
    
[2024-07-27T06:21:52Z DEBUG wgpu_hal::gles::device] 	Compiled shader NativeShader(9)
[2024-07-27T06:21:52Z DEBUG wgpu_hal::gles::device] 	Linked program NativeProgram(7)
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [1] = Literal(AbstractInt(0)) : Value(Scalar(Scalar { kind: AbstractInt, width: 8 }))
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [2] = Literal(I32(0)) : Value(Scalar(Scalar { kind: Sint, width: 4 }))
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [3] = Literal(AbstractInt(0)) : Value(Scalar(Scalar { kind: AbstractInt, width: 8 }))
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [4] = Literal(I32(0)) : Value(Scalar(Scalar { kind: Sint, width: 4 }))
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [5] = Literal(AbstractInt(0)) : Value(Scalar(Scalar { kind: AbstractInt, width: 8 }))
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [6] = Literal(I32(0)) : Value(Scalar(Scalar { kind: Sint, width: 4 }))
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [7] = Literal(AbstractInt(1)) : Value(Scalar(Scalar { kind: AbstractInt, width: 8 }))
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [8] = Literal(I32(1)) : Value(Scalar(Scalar { kind: Sint, width: 4 }))
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [9] = Literal(AbstractInt(0)) : Value(Scalar(Scalar { kind: AbstractInt, width: 8 }))
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [1] = FunctionArgument(0) : Handle([5])
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [2] = LocalVariable([1]) : Value(Pointer { base: [6], space: Function })
[2024-07-27T06:21:52Z DEBUG naga::proc::constant_evaluator] check: SubexpressionsAreNotConstant
[2024-07-27T06:21:52Z DEBUG naga::proc::constant_evaluator] check: SubexpressionsAreNotConstant
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [3] = AccessIndex { base: [2], index: 1 } : Value(Pointer { base: [4], space: Function })
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [4] = AccessIndex { base: [1], index: 1 } : Handle([4])
[2024-07-27T06:21:52Z DEBUG naga::proc::constant_evaluator] check: SubexpressionsAreNotConstant
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [5] = AccessIndex { base: [2], index: 0 } : Value(Pointer { base: [4], space: Function })
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [6] = GlobalVariable([1]) : Value(Pointer { base: [2], space: Uniform })
[2024-07-27T06:21:52Z DEBUG naga::proc::constant_evaluator] check: SubexpressionsAreNotConstant
[2024-07-27T06:21:52Z DEBUG naga::proc::constant_evaluator] check: SubexpressionsAreNotConstant
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [7] = AccessIndex { base: [6], index: 0 } : Value(Pointer { base: [1], space: Uniform })
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [8] = Load { pointer: [7] } : Handle([1])
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [9] = AccessIndex { base: [1], index: 0 } : Handle([3])
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [10] = Literal(AbstractFloat(0.0)) : Value(Scalar(Scalar { kind: AbstractFloat, width: 8 }))
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [11] = Literal(AbstractFloat(1.0)) : Value(Scalar(Scalar { kind: AbstractFloat, width: 8 }))
[2024-07-27T06:21:52Z DEBUG naga::proc::constant_evaluator] check: SubexpressionsAreNotConstant
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [12] = Literal(F32(0.0)) : Value(Scalar(Scalar { kind: Float, width: 4 }))
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [13] = Literal(F32(1.0)) : Value(Scalar(Scalar { kind: Float, width: 4 }))
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [14] = Compose { ty: [4], components: [[9], [12], [13]] } : Handle([4])
[2024-07-27T06:21:52Z DEBUG naga::front::wgsl::lower::conversion] wgsl automatic_conversion_consensus: ["mat4x4<f32>", "vec4<f32>"]
[2024-07-27T06:21:52Z DEBUG naga::front::wgsl::lower::conversion]     consensus: "f32"
[2024-07-27T06:21:52Z DEBUG naga::proc::constant_evaluator] check: SubexpressionsAreNotConstant
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [15] = Binary { op: Multiply, left: [8], right: [14] } : Value(Vector { size: Quad, scalar: Scalar { kind: Float, width: 4 } })
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [16] = Load { pointer: [2] } : Handle([6])
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [10] = Literal(I32(0)) : Value(Scalar(Scalar { kind: Sint, width: 4 }))
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [11] = Literal(AbstractInt(0)) : Value(Scalar(Scalar { kind: AbstractInt, width: 8 }))
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [1] = FunctionArgument(0) : Handle([6])
[2024-07-27T06:21:52Z DEBUG naga::proc::constant_evaluator] check: SubexpressionsAreNotConstant
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [2] = AccessIndex { base: [1], index: 1 } : Handle([4])
[2024-07-27T06:21:52Z DEBUG naga::valid::interface] var GlobalVariable { name: Some("globals"), space: Uniform, binding: Some(ResourceBinding { group: 0, binding: 0 }), ty: [2], init: None }
[2024-07-27T06:21:52Z DEBUG naga::valid::function] var LocalVariable { name: Some("out"), ty: [6], init: None }
[2024-07-27T06:21:52Z DEBUG wgpu_hal::gles::device] Naga generated shader:
    #version 320 es
    
    precision highp float;
    precision highp int;
    
    struct Globals {
        mat4x4 transform;
    };
    struct SolidVertexInput {
        vec2 position;
        vec4 color;
    };
    struct SolidVertexOutput {
        vec4 position;
        vec4 color;
    };
    layout(std140, binding = 0) uniform Globals_block_0Vertex { Globals _group_0_binding_0_vs; };
    
    layout(location = 0) in vec2 _p2vs_location0;
    layout(location = 1) in vec4 _p2vs_location1;
    layout(location = 0) smooth out vec4 _vs2fs_location0;
    
    void main() {
        SolidVertexInput input_ = SolidVertexInput(_p2vs_location0, _p2vs_location1);
        SolidVertexOutput out_ = SolidVertexOutput(vec4(0.0), vec4(0.0));
        out_.color = input_.color;
        mat4x4 _e7 = _group_0_binding_0_vs.transform;
        out_.position = (_e7 * vec4(input_.position, 0.0, 1.0));
        SolidVertexOutput _e13 = out_;
        gl_Position = _e13.position;
        _vs2fs_location0 = _e13.color;
        gl_Position.yz = vec2(-gl_Position.y, gl_Position.z * 2.0 - gl_Position.w);
        gl_PointSize = 1.0;
        return;
    }
    
    
[2024-07-27T06:21:52Z DEBUG wgpu_hal::gles::device] 	Compiled shader NativeShader(11)
[2024-07-27T06:21:52Z DEBUG wgpu_hal::gles::device] Naga generated shader:
    #version 320 es
    
    precision highp float;
    precision highp int;
    
    struct Globals {
        mat4x4 transform;
    };
    struct SolidVertexInput {
        vec2 position;
        vec4 color;
    };
    struct SolidVertexOutput {
        vec4 position;
        vec4 color;
    };
    layout(location = 0) smooth in vec4 _vs2fs_location0;
    layout(location = 0) out vec4 _fs2p_location0;
    
    void main() {
        SolidVertexOutput input_1 = SolidVertexOutput(gl_FragCoord, _vs2fs_location0);
        _fs2p_location0 = input_1.color;
        return;
    }
    
    
[2024-07-27T06:21:52Z DEBUG wgpu_hal::gles::device] 	Compiled shader NativeShader(12)
[2024-07-27T06:21:52Z DEBUG wgpu_hal::gles::device] 	Linked program NativeProgram(10)
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [1] = Literal(AbstractInt(0)) : Value(Scalar(Scalar { kind: AbstractInt, width: 8 }))
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [2] = Literal(I32(0)) : Value(Scalar(Scalar { kind: Sint, width: 4 }))
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [3] = Literal(AbstractInt(0)) : Value(Scalar(Scalar { kind: AbstractInt, width: 8 }))
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [4] = Literal(I32(0)) : Value(Scalar(Scalar { kind: Sint, width: 4 }))
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [5] = Literal(AbstractInt(0)) : Value(Scalar(Scalar { kind: AbstractInt, width: 8 }))
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [6] = Literal(I32(0)) : Value(Scalar(Scalar { kind: Sint, width: 4 }))
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [7] = Literal(AbstractInt(1)) : Value(Scalar(Scalar { kind: AbstractInt, width: 8 }))
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [8] = Literal(I32(1)) : Value(Scalar(Scalar { kind: Sint, width: 4 }))
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [9] = Literal(AbstractInt(2)) : Value(Scalar(Scalar { kind: AbstractInt, width: 8 }))
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [10] = Literal(I32(2)) : Value(Scalar(Scalar { kind: Sint, width: 4 }))
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [11] = Literal(AbstractInt(3)) : Value(Scalar(Scalar { kind: AbstractInt, width: 8 }))
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [12] = Literal(I32(3)) : Value(Scalar(Scalar { kind: Sint, width: 4 }))
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [13] = Literal(AbstractInt(4)) : Value(Scalar(Scalar { kind: AbstractInt, width: 8 }))
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [14] = Literal(I32(4)) : Value(Scalar(Scalar { kind: Sint, width: 4 }))
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [15] = Literal(AbstractInt(5)) : Value(Scalar(Scalar { kind: AbstractInt, width: 8 }))
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [16] = Literal(I32(5)) : Value(Scalar(Scalar { kind: Sint, width: 4 }))
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [17] = Literal(AbstractInt(6)) : Value(Scalar(Scalar { kind: AbstractInt, width: 8 }))
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [18] = Literal(I32(6)) : Value(Scalar(Scalar { kind: Sint, width: 4 }))
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [19] = Literal(AbstractInt(0)) : Value(Scalar(Scalar { kind: AbstractInt, width: 8 }))
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [20] = Literal(I32(0)) : Value(Scalar(Scalar { kind: Sint, width: 4 }))
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [21] = Literal(AbstractInt(1)) : Value(Scalar(Scalar { kind: AbstractInt, width: 8 }))
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [22] = Literal(I32(1)) : Value(Scalar(Scalar { kind: Sint, width: 4 }))
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [23] = Literal(AbstractInt(2)) : Value(Scalar(Scalar { kind: AbstractInt, width: 8 }))
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [24] = Literal(I32(2)) : Value(Scalar(Scalar { kind: Sint, width: 4 }))
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [25] = Literal(AbstractInt(3)) : Value(Scalar(Scalar { kind: AbstractInt, width: 8 }))
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [26] = Literal(I32(3)) : Value(Scalar(Scalar { kind: Sint, width: 4 }))
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [27] = Literal(AbstractInt(4)) : Value(Scalar(Scalar { kind: AbstractInt, width: 8 }))
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [28] = Literal(I32(4)) : Value(Scalar(Scalar { kind: Sint, width: 4 }))
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [29] = Literal(AbstractInt(5)) : Value(Scalar(Scalar { kind: AbstractInt, width: 8 }))
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [30] = Literal(I32(5)) : Value(Scalar(Scalar { kind: Sint, width: 4 }))
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [31] = Literal(AbstractInt(6)) : Value(Scalar(Scalar { kind: AbstractInt, width: 8 }))
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [1] = FunctionArgument(0) : Handle([6])
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [2] = LocalVariable([1]) : Value(Pointer { base: [7], space: Function })
[2024-07-27T06:21:52Z DEBUG naga::proc::constant_evaluator] check: SubexpressionsAreNotConstant
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [3] = AccessIndex { base: [2], index: 0 } : Value(Pointer { base: [5], space: Function })
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [4] = GlobalVariable([1]) : Value(Pointer { base: [2], space: Uniform })
[2024-07-27T06:21:52Z DEBUG naga::proc::constant_evaluator] check: SubexpressionsAreNotConstant
[2024-07-27T06:21:52Z DEBUG naga::proc::constant_evaluator] check: SubexpressionsAreNotConstant
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [5] = AccessIndex { base: [4], index: 0 } : Value(Pointer { base: [1], space: Uniform })
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [6] = Load { pointer: [5] } : Handle([1])
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [7] = AccessIndex { base: [1], index: 0 } : Handle([3])
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [8] = Literal(AbstractFloat(0.0)) : Value(Scalar(Scalar { kind: AbstractFloat, width: 8 }))
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [9] = Literal(AbstractFloat(1.0)) : Value(Scalar(Scalar { kind: AbstractFloat, width: 8 }))
[2024-07-27T06:21:52Z DEBUG naga::proc::constant_evaluator] check: SubexpressionsAreNotConstant
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [10] = Literal(F32(0.0)) : Value(Scalar(Scalar { kind: Float, width: 4 }))
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [11] = Literal(F32(1.0)) : Value(Scalar(Scalar { kind: Float, width: 4 }))
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [12] = Compose { ty: [5], components: [[7], [10], [11]] } : Handle([5])
[2024-07-27T06:21:52Z DEBUG naga::front::wgsl::lower::conversion] wgsl automatic_conversion_consensus: ["mat4x4<f32>", "vec4<f32>"]
[2024-07-27T06:21:52Z DEBUG naga::front::wgsl::lower::conversion]     consensus: "f32"
[2024-07-27T06:21:52Z DEBUG naga::proc::constant_evaluator] check: SubexpressionsAreNotConstant
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [13] = Binary { op: Multiply, left: [6], right: [12] } : Value(Vector { size: Quad, scalar: Scalar { kind: Float, width: 4 } })
[2024-07-27T06:21:52Z DEBUG naga::proc::constant_evaluator] check: SubexpressionsAreNotConstant
[2024-07-27T06:21:52Z DEBUG naga::proc::constant_evaluator] check: SubexpressionsAreNotConstant
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [14] = AccessIndex { base: [2], index: 1 } : Value(Pointer { base: [3], space: Function })
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [15] = AccessIndex { base: [1], index: 0 } : Handle([3])
[2024-07-27T06:21:52Z DEBUG naga::proc::constant_evaluator] check: SubexpressionsAreNotConstant
[2024-07-27T06:21:52Z DEBUG naga::proc::constant_evaluator] check: SubexpressionsAreNotConstant
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [16] = AccessIndex { base: [2], index: 2 } : Value(Pointer { base: [4], space: Function })
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [17] = AccessIndex { base: [1], index: 1 } : Handle([4])
[2024-07-27T06:21:52Z DEBUG naga::proc::constant_evaluator] check: SubexpressionsAreNotConstant
[2024-07-27T06:21:52Z DEBUG naga::proc::constant_evaluator] check: SubexpressionsAreNotConstant
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [18] = AccessIndex { base: [2], index: 3 } : Value(Pointer { base: [4], space: Function })
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [19] = AccessIndex { base: [1], index: 2 } : Handle([4])
[2024-07-27T06:21:52Z DEBUG naga::proc::constant_evaluator] check: SubexpressionsAreNotConstant
[2024-07-27T06:21:52Z DEBUG naga::proc::constant_evaluator] check: SubexpressionsAreNotConstant
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [20] = AccessIndex { base: [2], index: 4 } : Value(Pointer { base: [4], space: Function })
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [21] = AccessIndex { base: [1], index: 3 } : Handle([4])
[2024-07-27T06:21:52Z DEBUG naga::proc::constant_evaluator] check: SubexpressionsAreNotConstant
[2024-07-27T06:21:52Z DEBUG naga::proc::constant_evaluator] check: SubexpressionsAreNotConstant
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [22] = AccessIndex { base: [2], index: 5 } : Value(Pointer { base: [4], space: Function })
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [23] = AccessIndex { base: [1], index: 4 } : Handle([4])
[2024-07-27T06:21:52Z DEBUG naga::proc::constant_evaluator] check: SubexpressionsAreNotConstant
[2024-07-27T06:21:52Z DEBUG naga::proc::constant_evaluator] check: SubexpressionsAreNotConstant
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [24] = AccessIndex { base: [2], index: 6 } : Value(Pointer { base: [4], space: Function })
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [25] = AccessIndex { base: [1], index: 5 } : Handle([4])
[2024-07-27T06:21:52Z DEBUG naga::proc::constant_evaluator] check: SubexpressionsAreNotConstant
[2024-07-27T06:21:52Z DEBUG naga::proc::constant_evaluator] check: SubexpressionsAreNotConstant
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [26] = AccessIndex { base: [2], index: 7 } : Value(Pointer { base: [5], space: Function })
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [27] = AccessIndex { base: [1], index: 6 } : Handle([5])
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [28] = Load { pointer: [2] } : Handle([7])
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [32] = Literal(I32(6)) : Value(Scalar(Scalar { kind: Sint, width: 4 }))
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [33] = Literal(AbstractFloat(0.412165612)) : Value(Scalar(Scalar { kind: AbstractFloat, width: 8 }))
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [34] = Literal(AbstractFloat(0.211859107)) : Value(Scalar(Scalar { kind: AbstractFloat, width: 8 }))
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [35] = Literal(AbstractFloat(0.0883097947)) : Value(Scalar(Scalar { kind: AbstractFloat, width: 8 }))
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [36] = Literal(AbstractFloat(0.0)) : Value(Scalar(Scalar { kind: AbstractFloat, width: 8 }))
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [37] = Literal(F32(0.4121656)) : Value(Scalar(Scalar { kind: Float, width: 4 }))
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [38] = Literal(F32(0.2118591)) : Value(Scalar(Scalar { kind: Float, width: 4 }))
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [39] = Literal(F32(0.088309795)) : Value(Scalar(Scalar { kind: Float, width: 4 }))
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [40] = Literal(F32(0.0)) : Value(Scalar(Scalar { kind: Float, width: 4 }))
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [41] = Compose { ty: [5], components: [[37], [38], [39], [40]] } : Handle([5])
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [42] = Literal(AbstractFloat(0.536275208)) : Value(Scalar(Scalar { kind: AbstractFloat, width: 8 }))
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [43] = Literal(AbstractFloat(0.6807189584)) : Value(Scalar(Scalar { kind: AbstractFloat, width: 8 }))
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [44] = Literal(AbstractFloat(0.2818474174)) : Value(Scalar(Scalar { kind: AbstractFloat, width: 8 }))
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [45] = Literal(AbstractFloat(0.0)) : Value(Scalar(Scalar { kind: AbstractFloat, width: 8 }))
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [46] = Literal(F32(0.5362752)) : Value(Scalar(Scalar { kind: Float, width: 4 }))
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [47] = Literal(F32(0.68071896)) : Value(Scalar(Scalar { kind: Float, width: 4 }))
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [48] = Literal(F32(0.28184742)) : Value(Scalar(Scalar { kind: Float, width: 4 }))
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [49] = Literal(F32(0.0)) : Value(Scalar(Scalar { kind: Float, width: 4 }))
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [50] = Compose { ty: [5], components: [[46], [47], [48], [49]] } : Handle([5])
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [51] = Literal(AbstractFloat(0.0514575653)) : Value(Scalar(Scalar { kind: AbstractFloat, width: 8 }))
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [52] = Literal(AbstractFloat(0.107406579)) : Value(Scalar(Scalar { kind: AbstractFloat, width: 8 }))
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [53] = Literal(AbstractFloat(0.6302613616)) : Value(Scalar(Scalar { kind: AbstractFloat, width: 8 }))
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [54] = Literal(AbstractFloat(0.0)) : Value(Scalar(Scalar { kind: AbstractFloat, width: 8 }))
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [55] = Literal(F32(0.051457565)) : Value(Scalar(Scalar { kind: Float, width: 4 }))
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [56] = Literal(F32(0.10740658)) : Value(Scalar(Scalar { kind: Float, width: 4 }))
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [57] = Literal(F32(0.63026136)) : Value(Scalar(Scalar { kind: Float, width: 4 }))
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [58] = Literal(F32(0.0)) : Value(Scalar(Scalar { kind: Float, width: 4 }))
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [59] = Compose { ty: [5], components: [[55], [56], [57], [58]] } : Handle([5])
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [60] = Compose { ty: [8], components: [[41], [50], [59]] } : Handle([8])
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [61] = Literal(AbstractFloat(4.0767245293)) : Value(Scalar(Scalar { kind: AbstractFloat, width: 8 }))
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [62] = Literal(AbstractFloat(3.3072168827)) : Value(Scalar(Scalar { kind: AbstractFloat, width: 8 }))
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [63] = Literal(AbstractFloat(-3.3072168827)) : Value(Scalar(Scalar { kind: AbstractFloat, width: 8 }))
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [64] = Literal(AbstractFloat(0.2307590544)) : Value(Scalar(Scalar { kind: AbstractFloat, width: 8 }))
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [65] = Literal(AbstractFloat(0.0)) : Value(Scalar(Scalar { kind: AbstractFloat, width: 8 }))
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [66] = Literal(F32(4.0767245)) : Value(Scalar(Scalar { kind: Float, width: 4 }))
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [67] = Literal(F32(-3.307217)) : Value(Scalar(Scalar { kind: Float, width: 4 }))
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [68] = Literal(F32(0.23075905)) : Value(Scalar(Scalar { kind: Float, width: 4 }))
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [69] = Literal(F32(0.0)) : Value(Scalar(Scalar { kind: Float, width: 4 }))
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [70] = Compose { ty: [5], components: [[66], [67], [68], [69]] } : Handle([5])
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [71] = Literal(AbstractFloat(1.2681437731)) : Value(Scalar(Scalar { kind: AbstractFloat, width: 8 }))
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [72] = Literal(AbstractFloat(-1.2681437731)) : Value(Scalar(Scalar { kind: AbstractFloat, width: 8 }))
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [73] = Literal(AbstractFloat(2.6093323231)) : Value(Scalar(Scalar { kind: AbstractFloat, width: 8 }))
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [74] = Literal(AbstractFloat(0.341134429)) : Value(Scalar(Scalar { kind: AbstractFloat, width: 8 }))
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [75] = Literal(AbstractFloat(-0.341134429)) : Value(Scalar(Scalar { kind: AbstractFloat, width: 8 }))
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [76] = Literal(AbstractFloat(0.0)) : Value(Scalar(Scalar { kind: AbstractFloat, width: 8 }))
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [77] = Literal(F32(-1.2681438)) : Value(Scalar(Scalar { kind: Float, width: 4 }))
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [78] = Literal(F32(2.6093323)) : Value(Scalar(Scalar { kind: Float, width: 4 }))
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [79] = Literal(F32(-0.34113443)) : Value(Scalar(Scalar { kind: Float, width: 4 }))
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [80] = Literal(F32(0.0)) : Value(Scalar(Scalar { kind: Float, width: 4 }))
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [81] = Compose { ty: [5], components: [[77], [78], [79], [80]] } : Handle([5])
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [82] = Literal(AbstractFloat(0.0041119885)) : Value(Scalar(Scalar { kind: AbstractFloat, width: 8 }))
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [83] = Literal(AbstractFloat(-0.0041119885)) : Value(Scalar(Scalar { kind: AbstractFloat, width: 8 }))
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [84] = Literal(AbstractFloat(0.7034763098)) : Value(Scalar(Scalar { kind: AbstractFloat, width: 8 }))
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [85] = Literal(AbstractFloat(-0.7034763098)) : Value(Scalar(Scalar { kind: AbstractFloat, width: 8 }))
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [86] = Literal(AbstractFloat(1.7068625689)) : Value(Scalar(Scalar { kind: AbstractFloat, width: 8 }))
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [87] = Literal(AbstractFloat(0.0)) : Value(Scalar(Scalar { kind: AbstractFloat, width: 8 }))
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [88] = Literal(F32(-0.0041119885)) : Value(Scalar(Scalar { kind: Float, width: 4 }))
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [89] = Literal(F32(-0.7034763)) : Value(Scalar(Scalar { kind: Float, width: 4 }))
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [90] = Literal(F32(1.7068626)) : Value(Scalar(Scalar { kind: Float, width: 4 }))
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [91] = Literal(F32(0.0)) : Value(Scalar(Scalar { kind: Float, width: 4 }))
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [92] = Compose { ty: [5], components: [[88], [89], [90], [91]] } : Handle([5])
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [93] = Compose { ty: [8], components: [[70], [81], [92]] } : Handle([8])
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [1] = FunctionArgument(0) : Handle([5])
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [2] = FunctionArgument(1) : Handle([5])
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [3] = FunctionArgument(2) : Handle([9])
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [4] = Constant([1]) : Handle([8])
[2024-07-27T06:21:52Z DEBUG naga::front::wgsl::lower::conversion] wgsl automatic_conversion_consensus: ["vec4<f32>", "mat3x4<f32>"]
[2024-07-27T06:21:52Z DEBUG naga::front::wgsl::lower::conversion]     consensus: "f32"
[2024-07-27T06:21:52Z DEBUG naga::proc::constant_evaluator] check: SubexpressionsAreNotConstant
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [5] = Binary { op: Multiply, left: [1], right: [4] } : Value(Vector { size: Tri, scalar: Scalar { kind: Float, width: 4 } })
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [6] = Literal(AbstractFloat(1.0)) : Value(Scalar(Scalar { kind: AbstractFloat, width: 8 }))
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [7] = Literal(AbstractFloat(3.0)) : Value(Scalar(Scalar { kind: AbstractFloat, width: 8 }))
[2024-07-27T06:21:52Z DEBUG naga::front::wgsl::lower::conversion] wgsl automatic_conversion_consensus: ["{AbstractFloat}", "{AbstractFloat}"]
[2024-07-27T06:21:52Z DEBUG naga::front::wgsl::lower::conversion]     consensus: "{AbstractFloat}"
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [8] = Literal(AbstractFloat(0.3333333333333333)) : Value(Scalar(Scalar { kind: AbstractFloat, width: 8 }))
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [9] = Literal(AbstractFloat(1.0)) : Value(Scalar(Scalar { kind: AbstractFloat, width: 8 }))
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [10] = Literal(AbstractFloat(3.0)) : Value(Scalar(Scalar { kind: AbstractFloat, width: 8 }))
[2024-07-27T06:21:52Z DEBUG naga::front::wgsl::lower::conversion] wgsl automatic_conversion_consensus: ["{AbstractFloat}", "{AbstractFloat}"]
[2024-07-27T06:21:52Z DEBUG naga::front::wgsl::lower::conversion]     consensus: "{AbstractFloat}"
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [11] = Literal(AbstractFloat(0.3333333333333333)) : Value(Scalar(Scalar { kind: AbstractFloat, width: 8 }))
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [12] = Literal(AbstractFloat(1.0)) : Value(Scalar(Scalar { kind: AbstractFloat, width: 8 }))
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [13] = Literal(AbstractFloat(3.0)) : Value(Scalar(Scalar { kind: AbstractFloat, width: 8 }))
[2024-07-27T06:21:52Z DEBUG naga::front::wgsl::lower::conversion] wgsl automatic_conversion_consensus: ["{AbstractFloat}", "{AbstractFloat}"]
[2024-07-27T06:21:52Z DEBUG naga::front::wgsl::lower::conversion]     consensus: "{AbstractFloat}"
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [14] = Literal(AbstractFloat(0.3333333333333333)) : Value(Scalar(Scalar { kind: AbstractFloat, width: 8 }))
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [15] = Literal(F32(0.33333334)) : Value(Scalar(Scalar { kind: Float, width: 4 }))
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [16] = Literal(F32(0.33333334)) : Value(Scalar(Scalar { kind: Float, width: 4 }))
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [17] = Literal(F32(0.33333334)) : Value(Scalar(Scalar { kind: Float, width: 4 }))
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [18] = Compose { ty: [10], components: [[15], [16], [17]] } : Handle([10])
[2024-07-27T06:21:52Z DEBUG naga::proc::constant_evaluator] check: SubexpressionsAreNotConstant
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [19] = Math { fun: Pow, arg: [5], arg1: Some([18]), arg2: None, arg3: None } : Value(Vector { size: Tri, scalar: Scalar { kind: Float, width: 4 } })
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [20] = Constant([1]) : Handle([8])
[2024-07-27T06:21:52Z DEBUG naga::front::wgsl::lower::conversion] wgsl automatic_conversion_consensus: ["vec4<f32>", "mat3x4<f32>"]
[2024-07-27T06:21:52Z DEBUG naga::front::wgsl::lower::conversion]     consensus: "f32"
[2024-07-27T06:21:52Z DEBUG naga::proc::constant_evaluator] check: SubexpressionsAreNotConstant
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [21] = Binary { op: Multiply, left: [2], right: [20] } : Value(Vector { size: Tri, scalar: Scalar { kind: Float, width: 4 } })
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [22] = Literal(AbstractFloat(1.0)) : Value(Scalar(Scalar { kind: AbstractFloat, width: 8 }))
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [23] = Literal(AbstractFloat(3.0)) : Value(Scalar(Scalar { kind: AbstractFloat, width: 8 }))
[2024-07-27T06:21:52Z DEBUG naga::front::wgsl::lower::conversion] wgsl automatic_conversion_consensus: ["{AbstractFloat}", "{AbstractFloat}"]
[2024-07-27T06:21:52Z DEBUG naga::front::wgsl::lower::conversion]     consensus: "{AbstractFloat}"
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [24] = Literal(AbstractFloat(0.3333333333333333)) : Value(Scalar(Scalar { kind: AbstractFloat, width: 8 }))
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [25] = Literal(AbstractFloat(1.0)) : Value(Scalar(Scalar { kind: AbstractFloat, width: 8 }))
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [26] = Literal(AbstractFloat(3.0)) : Value(Scalar(Scalar { kind: AbstractFloat, width: 8 }))
[2024-07-27T06:21:52Z DEBUG naga::front::wgsl::lower::conversion] wgsl automatic_conversion_consensus: ["{AbstractFloat}", "{AbstractFloat}"]
[2024-07-27T06:21:52Z DEBUG naga::front::wgsl::lower::conversion]     consensus: "{AbstractFloat}"
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [27] = Literal(AbstractFloat(0.3333333333333333)) : Value(Scalar(Scalar { kind: AbstractFloat, width: 8 }))
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [28] = Literal(AbstractFloat(1.0)) : Value(Scalar(Scalar { kind: AbstractFloat, width: 8 }))
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [29] = Literal(AbstractFloat(3.0)) : Value(Scalar(Scalar { kind: AbstractFloat, width: 8 }))
[2024-07-27T06:21:52Z DEBUG naga::front::wgsl::lower::conversion] wgsl automatic_conversion_consensus: ["{AbstractFloat}", "{AbstractFloat}"]
[2024-07-27T06:21:52Z DEBUG naga::front::wgsl::lower::conversion]     consensus: "{AbstractFloat}"
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [30] = Literal(AbstractFloat(0.3333333333333333)) : Value(Scalar(Scalar { kind: AbstractFloat, width: 8 }))
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [31] = Literal(F32(0.33333334)) : Value(Scalar(Scalar { kind: Float, width: 4 }))
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [32] = Literal(F32(0.33333334)) : Value(Scalar(Scalar { kind: Float, width: 4 }))
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [33] = Literal(F32(0.33333334)) : Value(Scalar(Scalar { kind: Float, width: 4 }))
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [34] = Compose { ty: [10], components: [[31], [32], [33]] } : Handle([10])
[2024-07-27T06:21:52Z DEBUG naga::proc::constant_evaluator] check: SubexpressionsAreNotConstant
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [35] = Math { fun: Pow, arg: [21], arg1: Some([34]), arg2: None, arg3: None } : Value(Vector { size: Tri, scalar: Scalar { kind: Float, width: 4 } })
[2024-07-27T06:21:52Z DEBUG naga::proc::constant_evaluator] check: SubexpressionsAreNotConstant
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [36] = Math { fun: Mix, arg: [19], arg1: Some([35]), arg2: Some([3]), arg3: None } : Value(Vector { size: Tri, scalar: Scalar { kind: Float, width: 4 } })
[2024-07-27T06:21:52Z DEBUG naga::front::wgsl::lower::conversion] wgsl automatic_conversion_consensus: ["vec3<f32>", "vec3<f32>"]
[2024-07-27T06:21:52Z DEBUG naga::front::wgsl::lower::conversion]     consensus: "f32"
[2024-07-27T06:21:52Z DEBUG naga::proc::constant_evaluator] check: SubexpressionsAreNotConstant
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [37] = Constant([2]) : Handle([8])
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [38] = Binary { op: Multiply, left: [36], right: [36] } : Value(Vector { size: Tri, scalar: Scalar { kind: Float, width: 4 } })
[2024-07-27T06:21:52Z DEBUG naga::front::wgsl::lower::conversion] wgsl automatic_conversion_consensus: ["vec3<f32>", "vec3<f32>"]
[2024-07-27T06:21:52Z DEBUG naga::front::wgsl::lower::conversion]     consensus: "f32"
[2024-07-27T06:21:52Z DEBUG naga::proc::constant_evaluator] check: SubexpressionsAreNotConstant
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [39] = Binary { op: Multiply, left: [38], right: [36] } : Value(Vector { size: Tri, scalar: Scalar { kind: Float, width: 4 } })
[2024-07-27T06:21:52Z DEBUG naga::front::wgsl::lower::conversion] wgsl automatic_conversion_consensus: ["mat3x4<f32>", "vec3<f32>"]
[2024-07-27T06:21:52Z DEBUG naga::front::wgsl::lower::conversion]     consensus: "f32"
[2024-07-27T06:21:52Z DEBUG naga::proc::constant_evaluator] check: SubexpressionsAreNotConstant
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [40] = Literal(F32(4.0767245)) : Value(Scalar(Scalar { kind: Float, width: 4 }))
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [41] = Literal(F32(-3.307217)) : Value(Scalar(Scalar { kind: Float, width: 4 }))
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [42] = Literal(F32(0.23075905)) : Value(Scalar(Scalar { kind: Float, width: 4 }))
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [43] = Literal(F32(0.0)) : Value(Scalar(Scalar { kind: Float, width: 4 }))
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [44] = Compose { ty: [5], components: [[40], [41], [42], [43]] } : Handle([5])
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [45] = Literal(F32(-1.2681438)) : Value(Scalar(Scalar { kind: Float, width: 4 }))
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [46] = Literal(F32(2.6093323)) : Value(Scalar(Scalar { kind: Float, width: 4 }))
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [47] = Literal(F32(-0.34113443)) : Value(Scalar(Scalar { kind: Float, width: 4 }))
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [48] = Literal(F32(0.0)) : Value(Scalar(Scalar { kind: Float, width: 4 }))
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [49] = Compose { ty: [5], components: [[45], [46], [47], [48]] } : Handle([5])
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [50] = Literal(F32(-0.0041119885)) : Value(Scalar(Scalar { kind: Float, width: 4 }))
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [51] = Literal(F32(-0.7034763)) : Value(Scalar(Scalar { kind: Float, width: 4 }))
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [52] = Literal(F32(1.7068626)) : Value(Scalar(Scalar { kind: Float, width: 4 }))
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [53] = Literal(F32(0.0)) : Value(Scalar(Scalar { kind: Float, width: 4 }))
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [54] = Compose { ty: [5], components: [[50], [51], [52], [53]] } : Handle([5])
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [55] = Compose { ty: [8], components: [[44], [49], [54]] } : Handle([8])
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [56] = Binary { op: Multiply, left: [37], right: [39] } : Value(Vector { size: Quad, scalar: Scalar { kind: Float, width: 4 } })
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [57] = LocalVariable([1]) : Value(Pointer { base: [5], space: Function })
[2024-07-27T06:21:52Z DEBUG naga::proc::constant_evaluator] check: SubexpressionsAreNotConstant
[2024-07-27T06:21:52Z DEBUG naga::proc::constant_evaluator] check: SubexpressionsAreNotConstant
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [58] = AccessIndex { base: [57], index: 3 } : Value(ValuePointer { size: None, scalar: Scalar { kind: Float, width: 4 }, space: Function })
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [59] = AccessIndex { base: [1], index: 3 } : Value(Scalar(Scalar { kind: Float, width: 4 }))
[2024-07-27T06:21:52Z DEBUG naga::proc::constant_evaluator] check: SubexpressionsAreNotConstant
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [60] = AccessIndex { base: [2], index: 3 } : Value(Scalar(Scalar { kind: Float, width: 4 }))
[2024-07-27T06:21:52Z DEBUG naga::proc::constant_evaluator] check: SubexpressionsAreNotConstant
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [61] = Math { fun: Mix, arg: [59], arg1: Some([60]), arg2: Some([3]), arg3: None } : Value(Scalar(Scalar { kind: Float, width: 4 }))
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [62] = Load { pointer: [57] } : Handle([5])
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [1] = FunctionArgument(0) : Handle([3])
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [2] = Literal(AbstractFloat(12.9898)) : Value(Scalar(Scalar { kind: AbstractFloat, width: 8 }))
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [3] = Literal(AbstractFloat(78.233)) : Value(Scalar(Scalar { kind: AbstractFloat, width: 8 }))
[2024-07-27T06:21:52Z DEBUG naga::front::wgsl::lower::conversion] wgsl automatic_conversion_consensus: ["{AbstractFloat}", "{AbstractFloat}"]
[2024-07-27T06:21:52Z DEBUG naga::front::wgsl::lower::conversion]     consensus: "{AbstractFloat}"
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [4] = Compose { ty: [11], components: [[2], [3]] } : Handle([11])
[2024-07-27T06:21:52Z DEBUG naga::proc::constant_evaluator] check: SubexpressionsAreNotConstant
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [5] = Literal(F32(12.9898)) : Value(Scalar(Scalar { kind: Float, width: 4 }))
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [6] = Literal(F32(78.233)) : Value(Scalar(Scalar { kind: Float, width: 4 }))
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [7] = Compose { ty: [3], components: [[5], [6]] } : Handle([3])
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [8] = Math { fun: Dot, arg: [1], arg1: Some([7]), arg2: None, arg3: None } : Value(Scalar(Scalar { kind: Float, width: 4 }))
[2024-07-27T06:21:52Z DEBUG naga::proc::constant_evaluator] check: SubexpressionsAreNotConstant
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [9] = Math { fun: Sin, arg: [8], arg1: None, arg2: None, arg3: None } : Value(Scalar(Scalar { kind: Float, width: 4 }))
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [10] = Literal(AbstractFloat(43758.5453)) : Value(Scalar(Scalar { kind: AbstractFloat, width: 8 }))
[2024-07-27T06:21:52Z DEBUG naga::front::wgsl::lower::conversion] wgsl automatic_conversion_consensus: ["f32", "{AbstractFloat}"]
[2024-07-27T06:21:52Z DEBUG naga::front::wgsl::lower::conversion]     consensus: "f32"
[2024-07-27T06:21:52Z DEBUG naga::proc::constant_evaluator] check: SubexpressionsAreNotConstant
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [11] = Literal(F32(43758.547)) : Value(Scalar(Scalar { kind: Float, width: 4 }))
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [12] = Binary { op: Multiply, left: [9], right: [11] } : Value(Scalar(Scalar { kind: Float, width: 4 }))
[2024-07-27T06:21:52Z DEBUG naga::proc::constant_evaluator] check: SubexpressionsAreNotConstant
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [13] = Math { fun: Fract, arg: [12], arg1: None, arg2: None, arg3: None } : Value(Scalar(Scalar { kind: Float, width: 4 }))
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [94] = Literal(AbstractInt(8)) : Value(Scalar(Scalar { kind: AbstractInt, width: 8 }))
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [95] = Literal(I32(8)) : Value(Scalar(Scalar { kind: Sint, width: 4 }))
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [96] = Literal(AbstractInt(8)) : Value(Scalar(Scalar { kind: AbstractInt, width: 8 }))
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [1] = FunctionArgument(0) : Handle([3])
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [2] = FunctionArgument(1) : Handle([5])
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [3] = FunctionArgument(2) : Handle([12])
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [4] = FunctionArgument(3) : Handle([13])
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [5] = FunctionArgument(4) : Handle([14])
[2024-07-27T06:21:52Z DEBUG naga::proc::constant_evaluator] check: SubexpressionsAreNotConstant
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [6] = Swizzle { size: Bi, vector: [2], pattern: [X, Y, X, X] } : Value(Vector { size: Bi, scalar: Scalar { kind: Float, width: 4 } })
[2024-07-27T06:21:52Z DEBUG naga::proc::constant_evaluator] check: SubexpressionsAreNotConstant
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [7] = Swizzle { size: Bi, vector: [2], pattern: [Z, W, X, X] } : Value(Vector { size: Bi, scalar: Scalar { kind: Float, width: 4 } })
[2024-07-27T06:21:52Z DEBUG naga::front::wgsl::lower::conversion] wgsl automatic_conversion_consensus: ["vec2<f32>", "vec2<f32>"]
[2024-07-27T06:21:52Z DEBUG naga::front::wgsl::lower::conversion]     consensus: "f32"
[2024-07-27T06:21:52Z DEBUG naga::proc::constant_evaluator] check: SubexpressionsAreNotConstant
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [8] = Binary { op: Subtract, left: [7], right: [6] } : Value(Vector { size: Bi, scalar: Scalar { kind: Float, width: 4 } })
[2024-07-27T06:21:52Z DEBUG naga::front::wgsl::lower::conversion] wgsl automatic_conversion_consensus: ["vec2<f32>", "vec2<f32>"]
[2024-07-27T06:21:52Z DEBUG naga::front::wgsl::lower::conversion]     consensus: "f32"
[2024-07-27T06:21:52Z DEBUG naga::proc::constant_evaluator] check: SubexpressionsAreNotConstant
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [9] = Binary { op: Subtract, left: [1], right: [6] } : Handle([3])
[2024-07-27T06:21:52Z DEBUG naga::proc::constant_evaluator] check: SubexpressionsAreNotConstant
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [10] = Math { fun: Normalize, arg: [8], arg1: None, arg2: None, arg3: None } : Value(Vector { size: Bi, scalar: Scalar { kind: Float, width: 4 } })
[2024-07-27T06:21:52Z DEBUG naga::proc::constant_evaluator] check: SubexpressionsAreNotConstant
[2024-07-27T06:21:52Z DEBUG naga::proc::constant_evaluator] check: SubexpressionsAreNotConstant
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [11] = Math { fun: Dot, arg: [10], arg1: Some([9]), arg2: None, arg3: None } : Value(Scalar(Scalar { kind: Float, width: 4 }))
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [12] = Math { fun: Length, arg: [8], arg1: None, arg2: None, arg3: None } : Value(Scalar(Scalar { kind: Float, width: 4 }))
[2024-07-27T06:21:52Z DEBUG naga::front::wgsl::lower::conversion] wgsl automatic_conversion_consensus: ["f32", "f32"]
[2024-07-27T06:21:52Z DEBUG naga::front::wgsl::lower::conversion]     consensus: "f32"
[2024-07-27T06:21:52Z DEBUG naga::proc::constant_evaluator] check: SubexpressionsAreNotConstant
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [13] = Binary { op: Divide, left: [11], right: [12] } : Value(Scalar(Scalar { kind: Float, width: 4 }))
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [14] = LocalVariable([1]) : Value(Pointer { base: [12], space: Function })
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [15] = LocalVariable([2]) : Value(Pointer { base: [13], space: Function })
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [16] = LocalVariable([3]) : Value(Pointer { base: [5], space: Function })
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [17] = Literal(AbstractFloat(0.3)) : Value(Scalar(Scalar { kind: AbstractFloat, width: 8 }))
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [18] = Literal(AbstractFloat(255.0)) : Value(Scalar(Scalar { kind: AbstractFloat, width: 8 }))
[2024-07-27T06:21:52Z DEBUG naga::front::wgsl::lower::conversion] wgsl automatic_conversion_consensus: ["{AbstractFloat}", "{AbstractFloat}"]
[2024-07-27T06:21:52Z DEBUG naga::front::wgsl::lower::conversion]     consensus: "{AbstractFloat}"
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [19] = Literal(AbstractFloat(0.001176470588235294)) : Value(Scalar(Scalar { kind: AbstractFloat, width: 8 }))
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [20] = Literal(F32(0.0011764705)) : Value(Scalar(Scalar { kind: Float, width: 4 }))
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [21] = Literal(AbstractInt(0)) : Value(Scalar(Scalar { kind: AbstractInt, width: 8 }))
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [22] = Literal(I32(0)) : Value(Scalar(Scalar { kind: Sint, width: 4 }))
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [23] = LocalVariable([4]) : Value(Pointer { base: [14], space: Function })
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [24] = Load { pointer: [23] } : Handle([14])
[2024-07-27T06:21:52Z DEBUG naga::front::wgsl::lower::conversion] wgsl automatic_conversion_consensus: ["i32", "i32"]
[2024-07-27T06:21:52Z DEBUG naga::front::wgsl::lower::conversion]     consensus: "i32"
[2024-07-27T06:21:52Z DEBUG naga::proc::constant_evaluator] check: SubexpressionsAreNotConstant
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [25] = Binary { op: Less, left: [24], right: [5] } : Value(Scalar(Scalar { kind: Bool, width: 1 }))
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [26] = Load { pointer: [23] } : Handle([14])
[2024-07-27T06:21:52Z DEBUG naga::proc::constant_evaluator] check: SubexpressionsAreNotConstant
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [27] = Access { base: [15], index: [26] } : Value(Pointer { base: [9], space: Function })
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [28] = Load { pointer: [27] } : Handle([9])
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [29] = Load { pointer: [23] } : Handle([14])
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [30] = Literal(AbstractInt(1)) : Value(Scalar(Scalar { kind: AbstractInt, width: 8 }))
[2024-07-27T06:21:52Z DEBUG naga::front::wgsl::lower::conversion] wgsl automatic_conversion_consensus: ["i32", "{AbstractInt}"]
[2024-07-27T06:21:52Z DEBUG naga::front::wgsl::lower::conversion]     consensus: "i32"
[2024-07-27T06:21:52Z DEBUG naga::proc::constant_evaluator] check: SubexpressionsAreNotConstant
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [31] = Literal(I32(1)) : Value(Scalar(Scalar { kind: Sint, width: 4 }))
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [32] = Binary { op: Add, left: [29], right: [31] } : Handle([14])
[2024-07-27T06:21:52Z DEBUG naga::proc::constant_evaluator] check: SubexpressionsAreNotConstant
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [33] = Access { base: [15], index: [32] } : Value(Pointer { base: [9], space: Function })
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [34] = Load { pointer: [33] } : Handle([9])
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [35] = Literal(AbstractInt(0)) : Value(Scalar(Scalar { kind: AbstractInt, width: 8 }))
[2024-07-27T06:21:52Z DEBUG naga::proc::constant_evaluator] check: SubexpressionsAreNotConstant
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [36] = Literal(I32(0)) : Value(Scalar(Scalar { kind: Sint, width: 4 }))
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [37] = AccessIndex { base: [15], index: 0 } : Value(Pointer { base: [9], space: Function })
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [38] = Load { pointer: [37] } : Handle([9])
[2024-07-27T06:21:52Z DEBUG naga::front::wgsl::lower::conversion] wgsl automatic_conversion_consensus: ["f32", "f32"]
[2024-07-27T06:21:52Z DEBUG naga::front::wgsl::lower::conversion]     consensus: "f32"
[2024-07-27T06:21:52Z DEBUG naga::proc::constant_evaluator] check: SubexpressionsAreNotConstant
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [39] = Binary { op: LessEqual, left: [13], right: [38] } : Value(Scalar(Scalar { kind: Bool, width: 1 }))
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [40] = Literal(AbstractInt(0)) : Value(Scalar(Scalar { kind: AbstractInt, width: 8 }))
[2024-07-27T06:21:52Z DEBUG naga::proc::constant_evaluator] check: SubexpressionsAreNotConstant
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [41] = Literal(I32(0)) : Value(Scalar(Scalar { kind: Sint, width: 4 }))
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [42] = AccessIndex { base: [14], index: 0 } : Value(Pointer { base: [5], space: Function })
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [43] = Load { pointer: [42] } : Handle([5])
[2024-07-27T06:21:52Z DEBUG naga::front::wgsl::lower::conversion] wgsl automatic_conversion_consensus: ["f32", "f32"]
[2024-07-27T06:21:52Z DEBUG naga::front::wgsl::lower::conversion]     consensus: "f32"
[2024-07-27T06:21:52Z DEBUG naga::proc::constant_evaluator] check: SubexpressionsAreNotConstant
[2024-07-27T06:21:52Z DEBUG naga::front::wgsl::lower::conversion] wgsl automatic_conversion_consensus: ["f32", "f32"]
[2024-07-27T06:21:52Z DEBUG naga::front::wgsl::lower::conversion]     consensus: "f32"
[2024-07-27T06:21:52Z DEBUG naga::proc::constant_evaluator] check: SubexpressionsAreNotConstant
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [44] = Binary { op: LessEqual, left: [28], right: [13] } : Value(Scalar(Scalar { kind: Bool, width: 1 }))
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [45] = Binary { op: LessEqual, left: [13], right: [34] } : Value(Scalar(Scalar { kind: Bool, width: 1 }))
[2024-07-27T06:21:52Z DEBUG naga::front::wgsl::lower::conversion] wgsl automatic_conversion_consensus: ["bool", "bool"]
[2024-07-27T06:21:52Z DEBUG naga::front::wgsl::lower::conversion]     consensus: "bool"
[2024-07-27T06:21:52Z DEBUG naga::proc::constant_evaluator] check: SubexpressionsAreNotConstant
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [46] = Binary { op: LogicalAnd, left: [44], right: [45] } : Value(Scalar(Scalar { kind: Bool, width: 1 }))
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [47] = Load { pointer: [23] } : Handle([14])
[2024-07-27T06:21:52Z DEBUG naga::proc::constant_evaluator] check: SubexpressionsAreNotConstant
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [48] = Access { base: [14], index: [47] } : Value(Pointer { base: [5], space: Function })
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [49] = Load { pointer: [48] } : Handle([5])
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [50] = Load { pointer: [23] } : Handle([14])
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [51] = Literal(AbstractInt(1)) : Value(Scalar(Scalar { kind: AbstractInt, width: 8 }))
[2024-07-27T06:21:52Z DEBUG naga::front::wgsl::lower::conversion] wgsl automatic_conversion_consensus: ["i32", "{AbstractInt}"]
[2024-07-27T06:21:52Z DEBUG naga::front::wgsl::lower::conversion]     consensus: "i32"
[2024-07-27T06:21:52Z DEBUG naga::proc::constant_evaluator] check: SubexpressionsAreNotConstant
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [52] = Literal(I32(1)) : Value(Scalar(Scalar { kind: Sint, width: 4 }))
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [53] = Binary { op: Add, left: [50], right: [52] } : Handle([14])
[2024-07-27T06:21:52Z DEBUG naga::proc::constant_evaluator] check: SubexpressionsAreNotConstant
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [54] = Access { base: [14], index: [53] } : Value(Pointer { base: [5], space: Function })
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [55] = Load { pointer: [54] } : Handle([5])
[2024-07-27T06:21:52Z DEBUG naga::proc::constant_evaluator] check: SubexpressionsAreNotConstant
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [56] = Math { fun: SmoothStep, arg: [28], arg1: Some([34]), arg2: Some([13]), arg3: None } : Handle([9])
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [57] = CallResult([1]) : Handle([5])
[2024-07-27T06:21:52Z DEBUG naga::proc::constant_evaluator] check: SubexpressionsAreNotConstant
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [58] = Access { base: [15], index: [5] } : Value(Pointer { base: [9], space: Function })
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [59] = Load { pointer: [58] } : Handle([9])
[2024-07-27T06:21:52Z DEBUG naga::front::wgsl::lower::conversion] wgsl automatic_conversion_consensus: ["f32", "f32"]
[2024-07-27T06:21:52Z DEBUG naga::front::wgsl::lower::conversion]     consensus: "f32"
[2024-07-27T06:21:52Z DEBUG naga::proc::constant_evaluator] check: SubexpressionsAreNotConstant
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [60] = Binary { op: GreaterEqual, left: [13], right: [59] } : Value(Scalar(Scalar { kind: Bool, width: 1 }))
[2024-07-27T06:21:52Z DEBUG naga::proc::constant_evaluator] check: SubexpressionsAreNotConstant
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [61] = Access { base: [14], index: [5] } : Value(Pointer { base: [5], space: Function })
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [62] = Load { pointer: [61] } : Handle([5])
[2024-07-27T06:21:52Z DEBUG naga::proc::constant_evaluator] check: SubexpressionsAreNotConstant
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [63] = Literal(I32(1)) : Value(Scalar(Scalar { kind: Sint, width: 4 }))
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [64] = Load { pointer: [23] } : Handle([14])
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [65] = Binary { op: Add, left: [64], right: [63] } : Handle([14])
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [66] = Load { pointer: [16] } : Handle([5])
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [67] = Unary { op: Negate, expr: [20] } : Value(Scalar(Scalar { kind: Float, width: 4 }))
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [68] = CallResult([2]) : Handle([9])
[2024-07-27T06:21:52Z DEBUG naga::proc::constant_evaluator] check: SubexpressionsAreNotConstant
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [69] = Math { fun: Mix, arg: [67], arg1: Some([20]), arg2: Some([68]), arg3: None } : Value(Scalar(Scalar { kind: Float, width: 4 }))
[2024-07-27T06:21:52Z DEBUG naga::proc::constant_evaluator] check: SubexpressionsAreNotConstant
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [70] = Splat { size: Quad, value: [69] } : Value(Vector { size: Quad, scalar: Scalar { kind: Float, width: 4 } })
[2024-07-27T06:21:52Z DEBUG naga::front::wgsl::lower::conversion] wgsl automatic_conversion_consensus: ["vec4<f32>", "vec4<f32>"]
[2024-07-27T06:21:52Z DEBUG naga::front::wgsl::lower::conversion]     consensus: "f32"
[2024-07-27T06:21:52Z DEBUG naga::proc::constant_evaluator] check: SubexpressionsAreNotConstant
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [71] = Binary { op: Add, left: [66], right: [70] } : Handle([5])
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [1] = FunctionArgument(0) : Handle([15])
[2024-07-27T06:21:52Z DEBUG naga::proc::constant_evaluator] check: SubexpressionsAreNotConstant
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [2] = AccessIndex { base: [1], index: 0 } : Value(Scalar(Scalar { kind: Uint, width: 4 }))
[2024-07-27T06:21:52Z DEBUG naga::proc::constant_evaluator] check: SubexpressionsAreNotConstant
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [3] = Math { fun: Unpack2x16float, arg: [2], arg1: None, arg2: None, arg3: None } : Value(Vector { size: Bi, scalar: Scalar { kind: Float, width: 4 } })
[2024-07-27T06:21:52Z DEBUG naga::proc::constant_evaluator] check: SubexpressionsAreNotConstant
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [4] = AccessIndex { base: [1], index: 1 } : Value(Scalar(Scalar { kind: Uint, width: 4 }))
[2024-07-27T06:21:52Z DEBUG naga::proc::constant_evaluator] check: SubexpressionsAreNotConstant
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [5] = Math { fun: Unpack2x16float, arg: [4], arg1: None, arg2: None, arg3: None } : Value(Vector { size: Bi, scalar: Scalar { kind: Float, width: 4 } })
[2024-07-27T06:21:52Z DEBUG naga::proc::constant_evaluator] check: SubexpressionsAreNotConstant
[2024-07-27T06:21:52Z DEBUG naga::proc::constant_evaluator] check: SubexpressionsAreNotConstant
[2024-07-27T06:21:52Z DEBUG naga::proc::constant_evaluator] check: SubexpressionsAreNotConstant
[2024-07-27T06:21:52Z DEBUG naga::proc::constant_evaluator] check: SubexpressionsAreNotConstant
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [6] = AccessIndex { base: [3], index: 1 } : Value(Scalar(Scalar { kind: Float, width: 4 }))
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [7] = AccessIndex { base: [3], index: 0 } : Value(Scalar(Scalar { kind: Float, width: 4 }))
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [8] = AccessIndex { base: [5], index: 1 } : Value(Scalar(Scalar { kind: Float, width: 4 }))
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [9] = AccessIndex { base: [5], index: 0 } : Value(Scalar(Scalar { kind: Float, width: 4 }))
[2024-07-27T06:21:52Z DEBUG naga::proc::constant_evaluator] check: SubexpressionsAreNotConstant
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [10] = Compose { ty: [5], components: [[6], [7], [8], [9]] } : Handle([5])
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [97] = Literal(I32(8)) : Value(Scalar(Scalar { kind: Sint, width: 4 }))
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [98] = Literal(AbstractInt(0)) : Value(Scalar(Scalar { kind: AbstractInt, width: 8 }))
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [99] = Literal(I32(0)) : Value(Scalar(Scalar { kind: Sint, width: 4 }))
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [100] = Literal(AbstractInt(8)) : Value(Scalar(Scalar { kind: AbstractInt, width: 8 }))
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [1] = FunctionArgument(0) : Handle([7])
[2024-07-27T06:21:52Z DEBUG naga::proc::constant_evaluator] check: SubexpressionsAreNotConstant
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [2] = AccessIndex { base: [1], index: 2 } : Handle([4])
[2024-07-27T06:21:52Z DEBUG naga::proc::constant_evaluator] check: SubexpressionsAreNotConstant
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [3] = Swizzle { size: Bi, vector: [2], pattern: [X, Y, X, X] } : Value(Vector { size: Bi, scalar: Scalar { kind: Uint, width: 4 } })
[2024-07-27T06:21:52Z DEBUG naga::proc::constant_evaluator] check: SubexpressionsAreNotConstant
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [4] = CallResult([4]) : Handle([5])
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [5] = AccessIndex { base: [1], index: 2 } : Handle([4])
[2024-07-27T06:21:52Z DEBUG naga::proc::constant_evaluator] check: SubexpressionsAreNotConstant
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [6] = Swizzle { size: Bi, vector: [5], pattern: [Z, W, X, X] } : Value(Vector { size: Bi, scalar: Scalar { kind: Uint, width: 4 } })
[2024-07-27T06:21:52Z DEBUG naga::proc::constant_evaluator] check: SubexpressionsAreNotConstant
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [7] = CallResult([4]) : Handle([5])
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [8] = AccessIndex { base: [1], index: 3 } : Handle([4])
[2024-07-27T06:21:52Z DEBUG naga::proc::constant_evaluator] check: SubexpressionsAreNotConstant
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [9] = Swizzle { size: Bi, vector: [8], pattern: [X, Y, X, X] } : Value(Vector { size: Bi, scalar: Scalar { kind: Uint, width: 4 } })
[2024-07-27T06:21:52Z DEBUG naga::proc::constant_evaluator] check: SubexpressionsAreNotConstant
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [10] = CallResult([4]) : Handle([5])
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [11] = AccessIndex { base: [1], index: 3 } : Handle([4])
[2024-07-27T06:21:52Z DEBUG naga::proc::constant_evaluator] check: SubexpressionsAreNotConstant
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [12] = Swizzle { size: Bi, vector: [11], pattern: [Z, W, X, X] } : Value(Vector { size: Bi, scalar: Scalar { kind: Uint, width: 4 } })
[2024-07-27T06:21:52Z DEBUG naga::proc::constant_evaluator] check: SubexpressionsAreNotConstant
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [13] = CallResult([4]) : Handle([5])
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [14] = AccessIndex { base: [1], index: 4 } : Handle([4])
[2024-07-27T06:21:52Z DEBUG naga::proc::constant_evaluator] check: SubexpressionsAreNotConstant
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [15] = Swizzle { size: Bi, vector: [14], pattern: [X, Y, X, X] } : Value(Vector { size: Bi, scalar: Scalar { kind: Uint, width: 4 } })
[2024-07-27T06:21:52Z DEBUG naga::proc::constant_evaluator] check: SubexpressionsAreNotConstant
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [16] = CallResult([4]) : Handle([5])
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [17] = AccessIndex { base: [1], index: 4 } : Handle([4])
[2024-07-27T06:21:52Z DEBUG naga::proc::constant_evaluator] check: SubexpressionsAreNotConstant
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [18] = Swizzle { size: Bi, vector: [17], pattern: [Z, W, X, X] } : Value(Vector { size: Bi, scalar: Scalar { kind: Uint, width: 4 } })
[2024-07-27T06:21:52Z DEBUG naga::proc::constant_evaluator] check: SubexpressionsAreNotConstant
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [19] = CallResult([4]) : Handle([5])
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [20] = AccessIndex { base: [1], index: 5 } : Handle([4])
[2024-07-27T06:21:52Z DEBUG naga::proc::constant_evaluator] check: SubexpressionsAreNotConstant
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [21] = Swizzle { size: Bi, vector: [20], pattern: [X, Y, X, X] } : Value(Vector { size: Bi, scalar: Scalar { kind: Uint, width: 4 } })
[2024-07-27T06:21:52Z DEBUG naga::proc::constant_evaluator] check: SubexpressionsAreNotConstant
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [22] = CallResult([4]) : Handle([5])
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [23] = AccessIndex { base: [1], index: 5 } : Handle([4])
[2024-07-27T06:21:52Z DEBUG naga::proc::constant_evaluator] check: SubexpressionsAreNotConstant
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [24] = Swizzle { size: Bi, vector: [23], pattern: [Z, W, X, X] } : Value(Vector { size: Bi, scalar: Scalar { kind: Uint, width: 4 } })
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [25] = CallResult([4]) : Handle([5])
[2024-07-27T06:21:52Z DEBUG naga::proc::constant_evaluator] check: SubexpressionsAreNotConstant
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [26] = Compose { ty: [12], components: [[4], [7], [10], [13], [16], [19], [22], [25]] } : Handle([12])
[2024-07-27T06:21:52Z DEBUG naga::proc::constant_evaluator] check: SubexpressionsAreNotConstant
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [27] = AccessIndex { base: [1], index: 6 } : Handle([4])
[2024-07-27T06:21:52Z DEBUG naga::proc::constant_evaluator] check: SubexpressionsAreNotConstant
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [28] = Swizzle { size: Bi, vector: [27], pattern: [X, Y, X, X] } : Value(Vector { size: Bi, scalar: Scalar { kind: Uint, width: 4 } })
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [29] = CallResult([4]) : Handle([5])
[2024-07-27T06:21:52Z DEBUG naga::proc::constant_evaluator] check: SubexpressionsAreNotConstant
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [30] = AccessIndex { base: [1], index: 6 } : Handle([4])
[2024-07-27T06:21:52Z DEBUG naga::proc::constant_evaluator] check: SubexpressionsAreNotConstant
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [31] = Swizzle { size: Bi, vector: [30], pattern: [Z, W, X, X] } : Value(Vector { size: Bi, scalar: Scalar { kind: Uint, width: 4 } })
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [32] = CallResult([4]) : Handle([5])
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [101] = Literal(I32(8)) : Value(Scalar(Scalar { kind: Sint, width: 4 }))
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [102] = Literal(AbstractInt(8)) : Value(Scalar(Scalar { kind: AbstractInt, width: 8 }))
[2024-07-27T06:21:52Z DEBUG naga::proc::constant_evaluator] check: SubexpressionsAreNotConstant
[2024-07-27T06:21:52Z DEBUG naga::proc::constant_evaluator] check: SubexpressionsAreNotConstant
[2024-07-27T06:21:52Z DEBUG naga::proc::constant_evaluator] check: SubexpressionsAreNotConstant
[2024-07-27T06:21:52Z DEBUG naga::proc::constant_evaluator] check: SubexpressionsAreNotConstant
[2024-07-27T06:21:52Z DEBUG naga::proc::constant_evaluator] check: SubexpressionsAreNotConstant
[2024-07-27T06:21:52Z DEBUG naga::proc::constant_evaluator] check: SubexpressionsAreNotConstant
[2024-07-27T06:21:52Z DEBUG naga::proc::constant_evaluator] check: SubexpressionsAreNotConstant
[2024-07-27T06:21:52Z DEBUG naga::proc::constant_evaluator] check: SubexpressionsAreNotConstant
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [33] = AccessIndex { base: [29], index: 0 } : Value(Scalar(Scalar { kind: Float, width: 4 }))
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [34] = AccessIndex { base: [29], index: 1 } : Value(Scalar(Scalar { kind: Float, width: 4 }))
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [35] = AccessIndex { base: [29], index: 2 } : Value(Scalar(Scalar { kind: Float, width: 4 }))
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [36] = AccessIndex { base: [29], index: 3 } : Value(Scalar(Scalar { kind: Float, width: 4 }))
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [37] = AccessIndex { base: [32], index: 0 } : Value(Scalar(Scalar { kind: Float, width: 4 }))
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [38] = AccessIndex { base: [32], index: 1 } : Value(Scalar(Scalar { kind: Float, width: 4 }))
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [39] = AccessIndex { base: [32], index: 2 } : Value(Scalar(Scalar { kind: Float, width: 4 }))
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [40] = AccessIndex { base: [32], index: 3 } : Value(Scalar(Scalar { kind: Float, width: 4 }))
[2024-07-27T06:21:52Z DEBUG naga::proc::constant_evaluator] check: SubexpressionsAreNotConstant
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [41] = Compose { ty: [13], components: [[33], [34], [35], [36], [37], [38], [39], [40]] } : Handle([13])
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [42] = LocalVariable([1]) : Value(Pointer { base: [13], space: Function })
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [43] = Literal(AbstractInt(7)) : Value(Scalar(Scalar { kind: AbstractInt, width: 8 }))
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [44] = Literal(I32(7)) : Value(Scalar(Scalar { kind: Sint, width: 4 }))
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [45] = LocalVariable([2]) : Value(Pointer { base: [14], space: Function })
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [46] = Literal(AbstractInt(0)) : Value(Scalar(Scalar { kind: AbstractInt, width: 8 }))
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [47] = Literal(I32(0)) : Value(Scalar(Scalar { kind: Sint, width: 4 }))
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [48] = LocalVariable([3]) : Value(Pointer { base: [14], space: Function })
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [49] = Load { pointer: [48] } : Handle([14])
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [50] = Literal(AbstractInt(7)) : Value(Scalar(Scalar { kind: AbstractInt, width: 8 }))
[2024-07-27T06:21:52Z DEBUG naga::front::wgsl::lower::conversion] wgsl automatic_conversion_consensus: ["i32", "{AbstractInt}"]
[2024-07-27T06:21:52Z DEBUG naga::front::wgsl::lower::conversion]     consensus: "i32"
[2024-07-27T06:21:52Z DEBUG naga::proc::constant_evaluator] check: SubexpressionsAreNotConstant
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [51] = Literal(I32(7)) : Value(Scalar(Scalar { kind: Sint, width: 4 }))
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [52] = Binary { op: LessEqual, left: [49], right: [51] } : Value(Scalar(Scalar { kind: Bool, width: 1 }))
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [53] = Load { pointer: [48] } : Handle([14])
[2024-07-27T06:21:52Z DEBUG naga::proc::constant_evaluator] check: SubexpressionsAreNotConstant
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [54] = Access { base: [42], index: [53] } : Value(Pointer { base: [9], space: Function })
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [55] = Load { pointer: [54] } : Handle([9])
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [56] = Literal(AbstractFloat(1.0)) : Value(Scalar(Scalar { kind: AbstractFloat, width: 8 }))
[2024-07-27T06:21:52Z DEBUG naga::front::wgsl::lower::conversion] wgsl automatic_conversion_consensus: ["f32", "{AbstractFloat}"]
[2024-07-27T06:21:52Z DEBUG naga::front::wgsl::lower::conversion]     consensus: "f32"
[2024-07-27T06:21:52Z DEBUG naga::proc::constant_evaluator] check: SubexpressionsAreNotConstant
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [57] = Literal(F32(1.0)) : Value(Scalar(Scalar { kind: Float, width: 4 }))
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [58] = Binary { op: GreaterEqual, left: [55], right: [57] } : Value(Scalar(Scalar { kind: Bool, width: 1 }))
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [59] = Load { pointer: [48] } : Handle([14])
[2024-07-27T06:21:52Z DEBUG naga::proc::constant_evaluator] check: SubexpressionsAreNotConstant
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [60] = Literal(I32(1)) : Value(Scalar(Scalar { kind: Sint, width: 4 }))
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [61] = Load { pointer: [48] } : Handle([14])
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [62] = Binary { op: Add, left: [61], right: [60] } : Handle([14])
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [63] = AccessIndex { base: [1], index: 1 } : Handle([3])
[2024-07-27T06:21:52Z DEBUG naga::proc::constant_evaluator] check: SubexpressionsAreNotConstant
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [64] = AccessIndex { base: [1], index: 7 } : Handle([5])
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [65] = Load { pointer: [42] } : Handle([13])
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [66] = Load { pointer: [45] } : Handle([14])
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [67] = CallResult([3]) : Handle([5])
[2024-07-27T06:21:52Z DEBUG naga::valid::interface] var GlobalVariable { name: Some("globals"), space: Uniform, binding: Some(ResourceBinding { group: 0, binding: 0 }), ty: [2], init: None }
[2024-07-27T06:21:52Z DEBUG naga::valid::function] var LocalVariable { name: Some("color"), ty: [5], init: None }
[2024-07-27T06:21:52Z DEBUG naga::valid::function] var LocalVariable { name: Some("colors_arr"), ty: [11], init: None }
[2024-07-27T06:21:52Z DEBUG naga::valid::function] var LocalVariable { name: Some("offsets_arr"), ty: [12], init: None }
[2024-07-27T06:21:52Z DEBUG naga::valid::function] var LocalVariable { name: Some("color"), ty: [5], init: None }
[2024-07-27T06:21:52Z DEBUG naga::valid::function] var LocalVariable { name: Some("i"), ty: [13], init: Some([18]) }
[2024-07-27T06:21:52Z DEBUG naga::valid::function] var LocalVariable { name: Some("output"), ty: [7], init: None }
[2024-07-27T06:21:52Z DEBUG naga::valid::function] var LocalVariable { name: Some("offsets"), ty: [12], init: None }
[2024-07-27T06:21:52Z DEBUG naga::valid::function] var LocalVariable { name: Some("last_index"), ty: [13], init: Some([43]) }
[2024-07-27T06:21:52Z DEBUG naga::valid::function] var LocalVariable { name: Some("i"), ty: [13], init: Some([45]) }
[2024-07-27T06:21:52Z DEBUG wgpu_hal::gles::device] Naga generated shader:
    #version 320 es
    
    precision highp float;
    precision highp int;
    
    struct Globals {
        mat4x4 transform;
    };
    struct GradientVertexInput {
        vec2 v_pos;
        uvec4 colors_1_;
        uvec4 colors_2_;
        uvec4 colors_3_;
        uvec4 colors_4_;
        uvec4 offsets;
        vec4 direction;
    };
    struct GradientVertexOutput {
        vec4 position;
        vec2 raw_position;
        uvec4 colors_1_;
        uvec4 colors_2_;
        uvec4 colors_3_;
        uvec4 colors_4_;
        uvec4 offsets;
        vec4 direction;
    };
    const mat3x4 to_lms = mat3x4(vec4(0.4121656, 0.2118591, 0.088309795, 0.0), vec4(0.5362752, 0.68071896, 0.28184742, 0.0), vec4(0.051457565, 0.10740658, 0.63026136, 0.0));
    const mat3x4 to_rgb = mat3x4(vec4(4.0767245, -3.307217, 0.23075905, 0.0), vec4(-1.2681438, 2.6093323, -0.34113443, 0.0), vec4(-0.0041119885, -0.7034763, 1.7068626, 0.0));
    
    layout(std140, binding = 0) uniform Globals_block_0Vertex { Globals _group_0_binding_0_vs; };
    
    layout(location = 0) in vec2 _p2vs_location0;
    layout(location = 1) in uvec4 _p2vs_location1;
    layout(location = 2) in uvec4 _p2vs_location2;
    layout(location = 3) in uvec4 _p2vs_location3;
    layout(location = 4) in uvec4 _p2vs_location4;
    layout(location = 5) in uvec4 _p2vs_location5;
    layout(location = 6) in vec4 _p2vs_location6;
    layout(location = 0) smooth out vec2 _vs2fs_location0;
    layout(location = 1) flat out uvec4 _vs2fs_location1;
    layout(location = 2) flat out uvec4 _vs2fs_location2;
    layout(location = 3) flat out uvec4 _vs2fs_location3;
    layout(location = 4) flat out uvec4 _vs2fs_location4;
    layout(location = 5) flat out uvec4 _vs2fs_location5;
    layout(location = 6) smooth out vec4 _vs2fs_location6;
    
    vec4 interpolate_color(vec4 from, vec4 to, float factor) {
        vec4 color = vec4(0.0);
        vec3 lms_a = pow((from * to_lms), vec3(0.33333334, 0.33333334, 0.33333334));
        vec3 lms_b = pow((to * to_lms), vec3(0.33333334, 0.33333334, 0.33333334));
        vec3 mixed = mix(lms_a, lms_b, factor);
        color = (to_rgb * ((mixed * mixed) * mixed));
        color.w = mix(from.w, to.w, factor);
        vec4 _e27 = color;
        return _e27;
    }
    
    float random(vec2 coords) {
        return fract((sin(dot(coords, vec2(12.9898, 78.233))) * 43758.547));
    }
    
    vec4 gradient(vec2 raw_position, vec4 direction, vec4 colors[8], float offsets_1[8], int last_index_1) {
        vec4 colors_arr[8] = vec4[8](vec4(0.0), vec4(0.0), vec4(0.0), vec4(0.0), vec4(0.0), vec4(0.0), vec4(0.0), vec4(0.0));
        float offsets_arr[8] = float[8](0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
        vec4 color_1 = vec4(0.0);
        int i_1 = 0;
        vec2 start = direction.xy;
        vec2 end = direction.zw;
        vec2 v1_ = (end - start);
        vec2 v2_ = (raw_position - start);
        vec2 unit = normalize(v1_);
        float coord_offset = (dot(unit, v2_) / length(v1_));
        colors_arr = colors;
        offsets_arr = offsets_1;
        bool loop_init = true;
        while(true) {
            if (!loop_init) {
                int _e53 = i_1;
                i_1 = (_e53 + 1);
            }
            loop_init = false;
            int _e19 = i_1;
            if ((_e19 < last_index_1)) {
            } else {
                break;
            }
            {
                int _e21 = i_1;
                float curr_offset = offsets_arr[_e21];
                int _e24 = i_1;
                float next_offset = offsets_arr[(_e24 + 1)];
                float _e30 = offsets_arr[0];
                if ((coord_offset <= _e30)) {
                    vec4 _e33 = colors_arr[0];
                    color_1 = _e33;
                }
                if (((curr_offset <= coord_offset) && (coord_offset <= next_offset))) {
                    int _e37 = i_1;
                    vec4 from_1 = colors_arr[_e37];
                    int _e40 = i_1;
                    vec4 to_1 = colors_arr[(_e40 + 1)];
                    float factor_1 = smoothstep(curr_offset, next_offset, coord_offset);
                    vec4 _e46 = interpolate_color(from_1, to_1, factor_1);
                    color_1 = _e46;
                }
                float _e48 = offsets_arr[last_index_1];
                if ((coord_offset >= _e48)) {
                    vec4 _e51 = colors_arr[last_index_1];
                    color_1 = _e51;
                }
            }
        }
        vec4 _e55 = color_1;
        float _e57 = random(raw_position);
        return (_e55 + vec4(mix(-(0.0011764705), 0.0011764705, _e57)));
    }
    
    vec4 unpack_u32_(uvec2 color_2) {
        vec2 rg = unpackHalf2x16(color_2.x);
        vec2 ba = unpackHalf2x16(color_2.y);
        return vec4(rg.y, rg.x, ba.y, ba.x);
    }
    
    void main() {
        GradientVertexInput input_ = GradientVertexInput(_p2vs_location0, _p2vs_location1, _p2vs_location2, _p2vs_location3, _p2vs_location4, _p2vs_location5, _p2vs_location6);
        GradientVertexOutput output_ = GradientVertexOutput(vec4(0.0), vec2(0.0), uvec4(0u), uvec4(0u), uvec4(0u), uvec4(0u), uvec4(0u), vec4(0.0));
        mat4x4 _e5 = _group_0_binding_0_vs.transform;
        output_.position = (_e5 * vec4(input_.v_pos, 0.0, 1.0));
        output_.raw_position = input_.v_pos;
        output_.colors_1_ = input_.colors_1_;
        output_.colors_2_ = input_.colors_2_;
        output_.colors_3_ = input_.colors_3_;
        output_.colors_4_ = input_.colors_4_;
        output_.offsets = input_.offsets;
        output_.direction = input_.direction;
        GradientVertexOutput _e25 = output_;
        gl_Position = _e25.position;
        _vs2fs_location0 = _e25.raw_position;
        _vs2fs_location1 = _e25.colors_1_;
        _vs2fs_location2 = _e25.colors_2_;
        _vs2fs_location3 = _e25.colors_3_;
        _vs2fs_location4 = _e25.colors_4_;
        _vs2fs_location5 = _e25.offsets;
        _vs2fs_location6 = _e25.direction;
        gl_Position.yz = vec2(-gl_Position.y, gl_Position.z * 2.0 - gl_Position.w);
        gl_PointSize = 1.0;
        return;
    }
    
    
[2024-07-27T06:21:52Z DEBUG wgpu_hal::gles::device] 	Compiled shader NativeShader(14)
[2024-07-27T06:21:52Z DEBUG wgpu_hal::gles::device] Naga generated shader:
    #version 320 es
    
    precision highp float;
    precision highp int;
    
    struct Globals {
        mat4x4 transform;
    };
    struct GradientVertexInput {
        vec2 v_pos;
        uvec4 colors_1_;
        uvec4 colors_2_;
        uvec4 colors_3_;
        uvec4 colors_4_;
        uvec4 offsets;
        vec4 direction;
    };
    struct GradientVertexOutput {
        vec4 position;
        vec2 raw_position;
        uvec4 colors_1_;
        uvec4 colors_2_;
        uvec4 colors_3_;
        uvec4 colors_4_;
        uvec4 offsets;
        vec4 direction;
    };
    const mat3x4 to_lms = mat3x4(vec4(0.4121656, 0.2118591, 0.088309795, 0.0), vec4(0.5362752, 0.68071896, 0.28184742, 0.0), vec4(0.051457565, 0.10740658, 0.63026136, 0.0));
    const mat3x4 to_rgb = mat3x4(vec4(4.0767245, -3.307217, 0.23075905, 0.0), vec4(-1.2681438, 2.6093323, -0.34113443, 0.0), vec4(-0.0041119885, -0.7034763, 1.7068626, 0.0));
    
    layout(location = 0) smooth in vec2 _vs2fs_location0;
    layout(location = 1) flat in uvec4 _vs2fs_location1;
    layout(location = 2) flat in uvec4 _vs2fs_location2;
    layout(location = 3) flat in uvec4 _vs2fs_location3;
    layout(location = 4) flat in uvec4 _vs2fs_location4;
    layout(location = 5) flat in uvec4 _vs2fs_location5;
    layout(location = 6) smooth in vec4 _vs2fs_location6;
    layout(location = 0) out vec4 _fs2p_location0;
    
    vec4 interpolate_color(vec4 from, vec4 to, float factor) {
        vec4 color = vec4(0.0);
        vec3 lms_a = pow((from * to_lms), vec3(0.33333334, 0.33333334, 0.33333334));
        vec3 lms_b = pow((to * to_lms), vec3(0.33333334, 0.33333334, 0.33333334));
        vec3 mixed = mix(lms_a, lms_b, factor);
        color = (to_rgb * ((mixed * mixed) * mixed));
        color.w = mix(from.w, to.w, factor);
        vec4 _e27 = color;
        return _e27;
    }
    
    float random(vec2 coords) {
        return fract((sin(dot(coords, vec2(12.9898, 78.233))) * 43758.547));
    }
    
    vec4 gradient(vec2 raw_position, vec4 direction, vec4 colors[8], float offsets_1[8], int last_index_1) {
        vec4 colors_arr[8] = vec4[8](vec4(0.0), vec4(0.0), vec4(0.0), vec4(0.0), vec4(0.0), vec4(0.0), vec4(0.0), vec4(0.0));
        float offsets_arr[8] = float[8](0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
        vec4 color_1 = vec4(0.0);
        int i_1 = 0;
        vec2 start = direction.xy;
        vec2 end = direction.zw;
        vec2 v1_ = (end - start);
        vec2 v2_ = (raw_position - start);
        vec2 unit = normalize(v1_);
        float coord_offset = (dot(unit, v2_) / length(v1_));
        colors_arr = colors;
        offsets_arr = offsets_1;
        bool loop_init = true;
        while(true) {
            if (!loop_init) {
                int _e53 = i_1;
                i_1 = (_e53 + 1);
            }
            loop_init = false;
            int _e19 = i_1;
            if ((_e19 < last_index_1)) {
            } else {
                break;
            }
            {
                int _e21 = i_1;
                float curr_offset = offsets_arr[_e21];
                int _e24 = i_1;
                float next_offset = offsets_arr[(_e24 + 1)];
                float _e30 = offsets_arr[0];
                if ((coord_offset <= _e30)) {
                    vec4 _e33 = colors_arr[0];
                    color_1 = _e33;
                }
                if (((curr_offset <= coord_offset) && (coord_offset <= next_offset))) {
                    int _e37 = i_1;
                    vec4 from_1 = colors_arr[_e37];
                    int _e40 = i_1;
                    vec4 to_1 = colors_arr[(_e40 + 1)];
                    float factor_1 = smoothstep(curr_offset, next_offset, coord_offset);
                    vec4 _e46 = interpolate_color(from_1, to_1, factor_1);
                    color_1 = _e46;
                }
                float _e48 = offsets_arr[last_index_1];
                if ((coord_offset >= _e48)) {
                    vec4 _e51 = colors_arr[last_index_1];
                    color_1 = _e51;
                }
            }
        }
        vec4 _e55 = color_1;
        float _e57 = random(raw_position);
        return (_e55 + vec4(mix(-(0.0011764705), 0.0011764705, _e57)));
    }
    
    vec4 unpack_u32_(uvec2 color_2) {
        vec2 rg = unpackHalf2x16(color_2.x);
        vec2 ba = unpackHalf2x16(color_2.y);
        return vec4(rg.y, rg.x, ba.y, ba.x);
    }
    
    void main() {
        GradientVertexOutput input_1 = GradientVertexOutput(gl_FragCoord, _vs2fs_location0, _vs2fs_location1, _vs2fs_location2, _vs2fs_location3, _vs2fs_location4, _vs2fs_location5, _vs2fs_location6);
        float offsets[8] = float[8](0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
        int last_index = 7;
        int i = 0;
        vec4 _e3 = unpack_u32_(input_1.colors_1_.xy);
        vec4 _e6 = unpack_u32_(input_1.colors_1_.zw);
        vec4 _e9 = unpack_u32_(input_1.colors_2_.xy);
        vec4 _e12 = unpack_u32_(input_1.colors_2_.zw);
        vec4 _e15 = unpack_u32_(input_1.colors_3_.xy);
        vec4 _e18 = unpack_u32_(input_1.colors_3_.zw);
        vec4 _e21 = unpack_u32_(input_1.colors_4_.xy);
        vec4 _e24 = unpack_u32_(input_1.colors_4_.zw);
        vec4 colors_1[8] = vec4[8](_e3, _e6, _e9, _e12, _e15, _e18, _e21, _e24);
        vec4 _e28 = unpack_u32_(input_1.offsets.xy);
        vec4 _e31 = unpack_u32_(input_1.offsets.zw);
        offsets = float[8](_e28.x, _e28.y, _e28.z, _e28.w, _e31.x, _e31.y, _e31.z, _e31.w);
        bool loop_init_1 = true;
        while(true) {
            if (!loop_init_1) {
                int _e56 = i;
                i = (_e56 + 1);
            }
            loop_init_1 = false;
            int _e46 = i;
            if ((_e46 <= 7)) {
            } else {
                break;
            }
            {
                int _e49 = i;
                float _e51 = offsets[_e49];
                if ((_e51 >= 1.0)) {
                    int _e54 = i;
                    last_index = _e54;
                    break;
                }
            }
        }
        float _e60[8] = offsets;
        int _e61 = last_index;
        vec4 _e62 = gradient(input_1.raw_position, input_1.direction, colors_1, _e60, _e61);
        _fs2p_location0 = _e62;
        return;
    }
    
    
[2024-07-27T06:21:52Z DEBUG wgpu_hal::gles::device] 	Compiled shader NativeShader(15)
[2024-07-27T06:21:52Z DEBUG wgpu_hal::gles::device] 	Linked program NativeProgram(13)
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [1] = FunctionArgument(0) : Handle([1])
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [2] = Literal(U32(1)) : Value(Scalar(Scalar { kind: Uint, width: 4 }))
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [3] = Literal(U32(2)) : Value(Scalar(Scalar { kind: Uint, width: 4 }))
[2024-07-27T06:21:52Z DEBUG naga::front::wgsl::lower::conversion] wgsl automatic_conversion_consensus: ["u32", "u32"]
[2024-07-27T06:21:52Z DEBUG naga::front::wgsl::lower::conversion]     consensus: "u32"
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [4] = Compose { ty: [3], components: [[2], [3]] } : Handle([3])
[2024-07-27T06:21:52Z DEBUG naga::proc::constant_evaluator] check: SubexpressionsAreNotConstant
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [5] = Splat { size: Bi, value: [1] } : Value(Vector { size: Bi, scalar: Scalar { kind: Uint, width: 4 } })
[2024-07-27T06:21:52Z DEBUG naga::front::wgsl::lower::conversion] wgsl automatic_conversion_consensus: ["vec2<u32>", "vec2<u32>"]
[2024-07-27T06:21:52Z DEBUG naga::front::wgsl::lower::conversion]     consensus: "u32"
[2024-07-27T06:21:52Z DEBUG naga::proc::constant_evaluator] check: SubexpressionsAreNotConstant
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [6] = Binary { op: Add, left: [4], right: [5] } : Handle([3])
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [7] = Literal(U32(6)) : Value(Scalar(Scalar { kind: Uint, width: 4 }))
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [8] = Splat { size: Bi, value: [7] } : Value(Vector { size: Bi, scalar: Scalar { kind: Uint, width: 4 } })
[2024-07-27T06:21:52Z DEBUG naga::front::wgsl::lower::conversion] wgsl automatic_conversion_consensus: ["vec2<u32>", "vec2<u32>"]
[2024-07-27T06:21:52Z DEBUG naga::front::wgsl::lower::conversion]     consensus: "u32"
[2024-07-27T06:21:52Z DEBUG naga::proc::constant_evaluator] check: SubexpressionsAreNotConstant
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [9] = Binary { op: Modulo, left: [6], right: [8] } : Handle([3])
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [10] = Literal(U32(3)) : Value(Scalar(Scalar { kind: Uint, width: 4 }))
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [11] = Splat { size: Bi, value: [10] } : Value(Vector { size: Bi, scalar: Scalar { kind: Uint, width: 4 } })
[2024-07-27T06:21:52Z DEBUG naga::front::wgsl::lower::conversion] wgsl automatic_conversion_consensus: ["vec2<u32>", "vec2<u32>"]
[2024-07-27T06:21:52Z DEBUG naga::front::wgsl::lower::conversion]     consensus: "u32"
[2024-07-27T06:21:52Z DEBUG naga::proc::constant_evaluator] check: SubexpressionsAreNotConstant
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [12] = Binary { op: Less, left: [9], right: [11] } : Value(Vector { size: Bi, scalar: Scalar { kind: Bool, width: 1 } })
[2024-07-27T06:21:52Z DEBUG naga::proc::constant_evaluator] check: SubexpressionsAreNotConstant
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [13] = As { expr: [12], kind: Float, convert: Some(4) } : Value(Vector { size: Bi, scalar: Scalar { kind: Float, width: 4 } })
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [1] = Literal(AbstractInt(0)) : Value(Scalar(Scalar { kind: AbstractInt, width: 8 }))
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [2] = Literal(I32(0)) : Value(Scalar(Scalar { kind: Sint, width: 4 }))
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [3] = Literal(AbstractInt(0)) : Value(Scalar(Scalar { kind: AbstractInt, width: 8 }))
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [4] = Literal(I32(0)) : Value(Scalar(Scalar { kind: Sint, width: 4 }))
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [5] = Literal(AbstractInt(0)) : Value(Scalar(Scalar { kind: AbstractInt, width: 8 }))
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [6] = Literal(I32(0)) : Value(Scalar(Scalar { kind: Sint, width: 4 }))
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [7] = Literal(AbstractInt(1)) : Value(Scalar(Scalar { kind: AbstractInt, width: 8 }))
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [8] = Literal(I32(1)) : Value(Scalar(Scalar { kind: Sint, width: 4 }))
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [9] = Literal(AbstractInt(1)) : Value(Scalar(Scalar { kind: AbstractInt, width: 8 }))
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [10] = Literal(I32(1)) : Value(Scalar(Scalar { kind: Sint, width: 4 }))
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [11] = Literal(AbstractInt(0)) : Value(Scalar(Scalar { kind: AbstractInt, width: 8 }))
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [12] = Literal(I32(0)) : Value(Scalar(Scalar { kind: Sint, width: 4 }))
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [13] = Literal(AbstractInt(0)) : Value(Scalar(Scalar { kind: AbstractInt, width: 8 }))
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [14] = Literal(I32(0)) : Value(Scalar(Scalar { kind: Sint, width: 4 }))
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [15] = Literal(AbstractInt(1)) : Value(Scalar(Scalar { kind: AbstractInt, width: 8 }))
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [16] = Literal(I32(1)) : Value(Scalar(Scalar { kind: Sint, width: 4 }))
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [17] = Literal(AbstractInt(2)) : Value(Scalar(Scalar { kind: AbstractInt, width: 8 }))
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [18] = Literal(I32(2)) : Value(Scalar(Scalar { kind: Sint, width: 4 }))
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [19] = Literal(AbstractInt(3)) : Value(Scalar(Scalar { kind: AbstractInt, width: 8 }))
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [20] = Literal(I32(3)) : Value(Scalar(Scalar { kind: Sint, width: 4 }))
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [21] = Literal(AbstractInt(4)) : Value(Scalar(Scalar { kind: AbstractInt, width: 8 }))
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [22] = Literal(I32(4)) : Value(Scalar(Scalar { kind: Sint, width: 4 }))
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [23] = Literal(AbstractInt(5)) : Value(Scalar(Scalar { kind: AbstractInt, width: 8 }))
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [24] = Literal(I32(5)) : Value(Scalar(Scalar { kind: Sint, width: 4 }))
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [25] = Literal(AbstractInt(6)) : Value(Scalar(Scalar { kind: AbstractInt, width: 8 }))
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [26] = Literal(I32(6)) : Value(Scalar(Scalar { kind: Sint, width: 4 }))
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [27] = Literal(AbstractInt(7)) : Value(Scalar(Scalar { kind: AbstractInt, width: 8 }))
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [28] = Literal(I32(7)) : Value(Scalar(Scalar { kind: Sint, width: 4 }))
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [29] = Literal(AbstractInt(0)) : Value(Scalar(Scalar { kind: AbstractInt, width: 8 }))
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [30] = Literal(I32(0)) : Value(Scalar(Scalar { kind: Sint, width: 4 }))
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [31] = Literal(AbstractInt(1)) : Value(Scalar(Scalar { kind: AbstractInt, width: 8 }))
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [32] = Literal(I32(1)) : Value(Scalar(Scalar { kind: Sint, width: 4 }))
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [33] = Literal(AbstractInt(2)) : Value(Scalar(Scalar { kind: AbstractInt, width: 8 }))
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [1] = FunctionArgument(0) : Handle([10])
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [2] = LocalVariable([1]) : Value(Pointer { base: [12], space: Function })
[2024-07-27T06:21:52Z DEBUG naga::proc::constant_evaluator] check: SubexpressionsAreNotConstant
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [3] = AccessIndex { base: [1], index: 0 } : Handle([1])
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [4] = CallResult([1]) : Handle([2])
[2024-07-27T06:21:52Z DEBUG naga::proc::constant_evaluator] check: SubexpressionsAreNotConstant
[2024-07-27T06:21:52Z DEBUG naga::proc::constant_evaluator] check: SubexpressionsAreNotConstant
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [5] = LocalVariable([2]) : Value(Pointer { base: [2], space: Function })
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [6] = AccessIndex { base: [2], index: 1 } : Value(Pointer { base: [2], space: Function })
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [7] = Load { pointer: [5] } : Handle([2])
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [8] = AccessIndex { base: [1], index: 7 } : Handle([2])
[2024-07-27T06:21:52Z DEBUG naga::front::wgsl::lower::conversion] wgsl automatic_conversion_consensus: ["vec2<f32>", "vec2<f32>"]
[2024-07-27T06:21:52Z DEBUG naga::front::wgsl::lower::conversion]     consensus: "f32"
[2024-07-27T06:21:52Z DEBUG naga::proc::constant_evaluator] check: SubexpressionsAreNotConstant
[2024-07-27T06:21:52Z DEBUG naga::proc::constant_evaluator] check: SubexpressionsAreNotConstant
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [9] = Binary { op: Multiply, left: [7], right: [8] } : Handle([2])
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [10] = AccessIndex { base: [1], index: 6 } : Handle([2])
[2024-07-27T06:21:52Z DEBUG naga::front::wgsl::lower::conversion] wgsl automatic_conversion_consensus: ["vec2<f32>", "vec2<f32>"]
[2024-07-27T06:21:52Z DEBUG naga::front::wgsl::lower::conversion]     consensus: "f32"
[2024-07-27T06:21:52Z DEBUG naga::proc::constant_evaluator] check: SubexpressionsAreNotConstant
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [11] = Binary { op: Add, left: [9], right: [10] } : Handle([2])
[2024-07-27T06:21:52Z DEBUG naga::proc::constant_evaluator] check: SubexpressionsAreNotConstant
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [12] = As { expr: [11], kind: Float, convert: Some(4) } : Value(Vector { size: Bi, scalar: Scalar { kind: Float, width: 4 } })
[2024-07-27T06:21:52Z DEBUG naga::proc::constant_evaluator] check: SubexpressionsAreNotConstant
[2024-07-27T06:21:52Z DEBUG naga::proc::constant_evaluator] check: SubexpressionsAreNotConstant
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [13] = AccessIndex { base: [2], index: 2 } : Value(Pointer { base: [8], space: Function })
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [14] = AccessIndex { base: [1], index: 8 } : Handle([9])
[2024-07-27T06:21:52Z DEBUG naga::proc::constant_evaluator] check: SubexpressionsAreNotConstant
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [15] = As { expr: [14], kind: Float, convert: Some(4) } : Value(Scalar(Scalar { kind: Float, width: 4 }))
[2024-07-27T06:21:52Z DEBUG naga::proc::constant_evaluator] check: SubexpressionsAreNotConstant
[2024-07-27T06:21:52Z DEBUG naga::proc::constant_evaluator] check: SubexpressionsAreNotConstant
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [16] = AccessIndex { base: [2], index: 3 } : Value(Pointer { base: [8], space: Function })
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [17] = AccessIndex { base: [1], index: 5 } : Handle([8])
[2024-07-27T06:21:52Z DEBUG naga::proc::constant_evaluator] check: SubexpressionsAreNotConstant
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [18] = AccessIndex { base: [1], index: 1 } : Handle([2])
[2024-07-27T06:21:52Z DEBUG naga::proc::constant_evaluator] check: SubexpressionsAreNotConstant
[2024-07-27T06:21:52Z DEBUG naga::proc::constant_evaluator] check: SubexpressionsAreNotConstant
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [19] = Math { fun: Round, arg: [18], arg1: None, arg2: None, arg3: None } : Handle([2])
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [20] = Load { pointer: [5] } : Handle([2])
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [21] = AccessIndex { base: [1], index: 3 } : Handle([2])
[2024-07-27T06:21:52Z DEBUG naga::front::wgsl::lower::conversion] wgsl automatic_conversion_consensus: ["vec2<f32>", "vec2<f32>"]
[2024-07-27T06:21:52Z DEBUG naga::front::wgsl::lower::conversion]     consensus: "f32"
[2024-07-27T06:21:52Z DEBUG naga::proc::constant_evaluator] check: SubexpressionsAreNotConstant
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [22] = Binary { op: Multiply, left: [20], right: [21] } : Handle([2])
[2024-07-27T06:21:52Z DEBUG naga::front::wgsl::lower::conversion] wgsl automatic_conversion_consensus: ["vec2<f32>", "vec2<f32>"]
[2024-07-27T06:21:52Z DEBUG naga::front::wgsl::lower::conversion]     consensus: "f32"
[2024-07-27T06:21:52Z DEBUG naga::proc::constant_evaluator] check: SubexpressionsAreNotConstant
[2024-07-27T06:21:52Z DEBUG naga::proc::constant_evaluator] check: SubexpressionsAreNotConstant
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [23] = Binary { op: Add, left: [19], right: [22] } : Handle([2])
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [24] = AccessIndex { base: [1], index: 2 } : Handle([2])
[2024-07-27T06:21:52Z DEBUG naga::front::wgsl::lower::conversion] wgsl automatic_conversion_consensus: ["vec2<f32>", "vec2<f32>"]
[2024-07-27T06:21:52Z DEBUG naga::front::wgsl::lower::conversion]     consensus: "f32"
[2024-07-27T06:21:52Z DEBUG naga::proc::constant_evaluator] check: SubexpressionsAreNotConstant
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [25] = Binary { op: Subtract, left: [23], right: [24] } : Handle([2])
[2024-07-27T06:21:52Z DEBUG naga::proc::constant_evaluator] check: SubexpressionsAreNotConstant
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [26] = AccessIndex { base: [1], index: 4 } : Handle([8])
[2024-07-27T06:21:52Z DEBUG naga::proc::constant_evaluator] check: SubexpressionsAreNotConstant
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [27] = Math { fun: Cos, arg: [26], arg1: None, arg2: None, arg3: None } : Handle([8])
[2024-07-27T06:21:52Z DEBUG naga::proc::constant_evaluator] check: SubexpressionsAreNotConstant
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [28] = AccessIndex { base: [1], index: 4 } : Handle([8])
[2024-07-27T06:21:52Z DEBUG naga::proc::constant_evaluator] check: SubexpressionsAreNotConstant
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [29] = Math { fun: Sin, arg: [28], arg1: None, arg2: None, arg3: None } : Handle([8])
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [30] = Literal(AbstractFloat(0.0)) : Value(Scalar(Scalar { kind: AbstractFloat, width: 8 }))
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [31] = Literal(AbstractFloat(0.0)) : Value(Scalar(Scalar { kind: AbstractFloat, width: 8 }))
[2024-07-27T06:21:52Z DEBUG naga::proc::constant_evaluator] check: SubexpressionsAreNotConstant
[2024-07-27T06:21:52Z DEBUG naga::proc::constant_evaluator] check: SubexpressionsAreNotConstant
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [32] = Literal(F32(0.0)) : Value(Scalar(Scalar { kind: Float, width: 4 }))
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [33] = Literal(F32(0.0)) : Value(Scalar(Scalar { kind: Float, width: 4 }))
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [34] = Compose { ty: [11], components: [[27], [29], [32], [33]] } : Handle([11])
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [35] = Unary { op: Negate, expr: [29] } : Handle([8])
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [36] = Literal(AbstractFloat(0.0)) : Value(Scalar(Scalar { kind: AbstractFloat, width: 8 }))
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [37] = Literal(AbstractFloat(0.0)) : Value(Scalar(Scalar { kind: AbstractFloat, width: 8 }))
[2024-07-27T06:21:52Z DEBUG naga::proc::constant_evaluator] check: SubexpressionsAreNotConstant
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [38] = Literal(F32(0.0)) : Value(Scalar(Scalar { kind: Float, width: 4 }))
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [39] = Literal(F32(0.0)) : Value(Scalar(Scalar { kind: Float, width: 4 }))
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [40] = Compose { ty: [11], components: [[35], [27], [38], [39]] } : Handle([11])
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [41] = Literal(AbstractFloat(0.0)) : Value(Scalar(Scalar { kind: AbstractFloat, width: 8 }))
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [42] = Literal(AbstractFloat(0.0)) : Value(Scalar(Scalar { kind: AbstractFloat, width: 8 }))
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [43] = Literal(AbstractFloat(1.0)) : Value(Scalar(Scalar { kind: AbstractFloat, width: 8 }))
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [44] = Literal(AbstractFloat(0.0)) : Value(Scalar(Scalar { kind: AbstractFloat, width: 8 }))
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [45] = Literal(F32(0.0)) : Value(Scalar(Scalar { kind: Float, width: 4 }))
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [46] = Literal(F32(0.0)) : Value(Scalar(Scalar { kind: Float, width: 4 }))
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [47] = Literal(F32(1.0)) : Value(Scalar(Scalar { kind: Float, width: 4 }))
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [48] = Literal(F32(0.0)) : Value(Scalar(Scalar { kind: Float, width: 4 }))
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [49] = Compose { ty: [11], components: [[45], [46], [47], [48]] } : Handle([11])
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [50] = Literal(AbstractFloat(0.0)) : Value(Scalar(Scalar { kind: AbstractFloat, width: 8 }))
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [51] = Literal(AbstractFloat(0.0)) : Value(Scalar(Scalar { kind: AbstractFloat, width: 8 }))
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [52] = Literal(AbstractFloat(0.0)) : Value(Scalar(Scalar { kind: AbstractFloat, width: 8 }))
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [53] = Literal(AbstractFloat(1.0)) : Value(Scalar(Scalar { kind: AbstractFloat, width: 8 }))
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [54] = Literal(F32(0.0)) : Value(Scalar(Scalar { kind: Float, width: 4 }))
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [55] = Literal(F32(0.0)) : Value(Scalar(Scalar { kind: Float, width: 4 }))
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [56] = Literal(F32(0.0)) : Value(Scalar(Scalar { kind: Float, width: 4 }))
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [57] = Literal(F32(1.0)) : Value(Scalar(Scalar { kind: Float, width: 4 }))
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [58] = Compose { ty: [11], components: [[54], [55], [56], [57]] } : Handle([11])
[2024-07-27T06:21:52Z DEBUG naga::proc::constant_evaluator] check: SubexpressionsAreNotConstant
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [59] = Compose { ty: [4], components: [[34], [40], [49], [58]] } : Handle([4])
[2024-07-27T06:21:52Z DEBUG naga::proc::constant_evaluator] check: SubexpressionsAreNotConstant
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [60] = AccessIndex { base: [2], index: 0 } : Value(Pointer { base: [11], space: Function })
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [61] = GlobalVariable([1]) : Value(Pointer { base: [5], space: Uniform })
[2024-07-27T06:21:52Z DEBUG naga::proc::constant_evaluator] check: SubexpressionsAreNotConstant
[2024-07-27T06:21:52Z DEBUG naga::proc::constant_evaluator] check: SubexpressionsAreNotConstant
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [62] = AccessIndex { base: [61], index: 0 } : Value(Pointer { base: [4], space: Uniform })
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [63] = Load { pointer: [62] } : Handle([4])
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [64] = AccessIndex { base: [1], index: 2 } : Handle([2])
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [65] = Literal(AbstractFloat(0.0)) : Value(Scalar(Scalar { kind: AbstractFloat, width: 8 }))
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [66] = Literal(AbstractFloat(0.0)) : Value(Scalar(Scalar { kind: AbstractFloat, width: 8 }))
[2024-07-27T06:21:52Z DEBUG naga::proc::constant_evaluator] check: SubexpressionsAreNotConstant
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [67] = Literal(F32(0.0)) : Value(Scalar(Scalar { kind: Float, width: 4 }))
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [68] = Literal(F32(0.0)) : Value(Scalar(Scalar { kind: Float, width: 4 }))
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [69] = Compose { ty: [11], components: [[64], [67], [68]] } : Handle([11])
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [70] = Load { pointer: [5] } : Handle([2])
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [71] = Literal(AbstractFloat(0.0)) : Value(Scalar(Scalar { kind: AbstractFloat, width: 8 }))
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [72] = Literal(AbstractFloat(1.0)) : Value(Scalar(Scalar { kind: AbstractFloat, width: 8 }))
[2024-07-27T06:21:52Z DEBUG naga::proc::constant_evaluator] check: SubexpressionsAreNotConstant
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [73] = Literal(F32(0.0)) : Value(Scalar(Scalar { kind: Float, width: 4 }))
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [74] = Literal(F32(1.0)) : Value(Scalar(Scalar { kind: Float, width: 4 }))
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [75] = Compose { ty: [11], components: [[70], [73], [74]] } : Handle([11])
[2024-07-27T06:21:52Z DEBUG naga::front::wgsl::lower::conversion] wgsl automatic_conversion_consensus: ["mat4x4<f32>", "vec4<f32>"]
[2024-07-27T06:21:52Z DEBUG naga::front::wgsl::lower::conversion]     consensus: "f32"
[2024-07-27T06:21:52Z DEBUG naga::proc::constant_evaluator] check: SubexpressionsAreNotConstant
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [76] = Binary { op: Multiply, left: [59], right: [75] } : Value(Vector { size: Quad, scalar: Scalar { kind: Float, width: 4 } })
[2024-07-27T06:21:52Z DEBUG naga::front::wgsl::lower::conversion] wgsl automatic_conversion_consensus: ["vec4<f32>", "vec4<f32>"]
[2024-07-27T06:21:52Z DEBUG naga::front::wgsl::lower::conversion]     consensus: "f32"
[2024-07-27T06:21:52Z DEBUG naga::proc::constant_evaluator] check: SubexpressionsAreNotConstant
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [77] = Binary { op: Add, left: [69], right: [76] } : Handle([11])
[2024-07-27T06:21:52Z DEBUG naga::front::wgsl::lower::conversion] wgsl automatic_conversion_consensus: ["mat4x4<f32>", "vec4<f32>"]
[2024-07-27T06:21:52Z DEBUG naga::front::wgsl::lower::conversion]     consensus: "f32"
[2024-07-27T06:21:52Z DEBUG naga::proc::constant_evaluator] check: SubexpressionsAreNotConstant
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [78] = Binary { op: Multiply, left: [63], right: [77] } : Value(Vector { size: Quad, scalar: Scalar { kind: Float, width: 4 } })
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [79] = Load { pointer: [2] } : Handle([12])
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [34] = Literal(I32(2)) : Value(Scalar(Scalar { kind: Sint, width: 4 }))
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [35] = Literal(AbstractInt(0)) : Value(Scalar(Scalar { kind: AbstractInt, width: 8 }))
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [1] = FunctionArgument(0) : Handle([12])
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [2] = GlobalVariable([3]) : Handle([7])
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [3] = GlobalVariable([2]) : Handle([6])
[2024-07-27T06:21:52Z DEBUG naga::proc::constant_evaluator] check: SubexpressionsAreNotConstant
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [4] = AccessIndex { base: [1], index: 1 } : Handle([2])
[2024-07-27T06:21:52Z DEBUG naga::proc::constant_evaluator] check: SubexpressionsAreNotConstant
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [5] = AccessIndex { base: [1], index: 2 } : Handle([8])
[2024-07-27T06:21:52Z DEBUG naga::proc::constant_evaluator] check: SubexpressionsAreNotConstant
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [6] = As { expr: [5], kind: Sint, convert: Some(4) } : Value(Scalar(Scalar { kind: Sint, width: 4 }))
[2024-07-27T06:21:52Z DEBUG naga::proc::constant_evaluator] check: SubexpressionsAreNotConstant
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [7] = ImageSample { image: [2], sampler: [3], gather: None, coordinate: [4], array_index: Some([6]), offset: None, level: Auto, depth_ref: None } : Value(Vector { size: Quad, scalar: Scalar { kind: Float, width: 4 } })
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [8] = Literal(AbstractFloat(1.0)) : Value(Scalar(Scalar { kind: AbstractFloat, width: 8 }))
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [9] = Literal(AbstractFloat(1.0)) : Value(Scalar(Scalar { kind: AbstractFloat, width: 8 }))
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [10] = Literal(AbstractFloat(1.0)) : Value(Scalar(Scalar { kind: AbstractFloat, width: 8 }))
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [11] = AccessIndex { base: [1], index: 3 } : Handle([8])
[2024-07-27T06:21:52Z DEBUG naga::proc::constant_evaluator] check: SubexpressionsAreNotConstant
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [12] = Literal(F32(1.0)) : Value(Scalar(Scalar { kind: Float, width: 4 }))
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [13] = Literal(F32(1.0)) : Value(Scalar(Scalar { kind: Float, width: 4 }))
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [14] = Literal(F32(1.0)) : Value(Scalar(Scalar { kind: Float, width: 4 }))
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [15] = Compose { ty: [11], components: [[12], [13], [14], [11]] } : Handle([11])
[2024-07-27T06:21:52Z DEBUG naga::front::wgsl::lower::conversion] wgsl automatic_conversion_consensus: ["vec4<f32>", "vec4<f32>"]
[2024-07-27T06:21:52Z DEBUG naga::front::wgsl::lower::conversion]     consensus: "f32"
[2024-07-27T06:21:52Z DEBUG naga::proc::constant_evaluator] check: SubexpressionsAreNotConstant
[2024-07-27T06:21:52Z DEBUG naga::front] Resolving [16] = Binary { op: Multiply, left: [7], right: [15] } : Value(Vector { size: Quad, scalar: Scalar { kind: Float, width: 4 } })
[2024-07-27T06:21:52Z DEBUG naga::valid::interface] var GlobalVariable { name: Some("globals"), space: Uniform, binding: Some(ResourceBinding { group: 0, binding: 0 }), ty: [5], init: None }
[2024-07-27T06:21:52Z DEBUG naga::valid::interface] var GlobalVariable { name: Some("u_sampler"), space: Handle, binding: Some(ResourceBinding { group: 0, binding: 1 }), ty: [6], init: None }
[2024-07-27T06:21:52Z DEBUG naga::valid::interface] var GlobalVariable { name: Some("u_texture"), space: Handle, binding: Some(ResourceBinding { group: 1, binding: 0 }), ty: [7], init: None }
[2024-07-27T06:21:52Z DEBUG naga::valid::function] var LocalVariable { name: Some("out"), ty: [12], init: None }
[2024-07-27T06:21:52Z DEBUG naga::valid::function] var LocalVariable { name: Some("v_pos"), ty: [2], init: None }
[2024-07-27T06:21:52Z DEBUG wgpu_hal::gles::device] Naga generated shader:
    #version 320 es
    
    precision highp float;
    precision highp int;
    
    struct Globals {
        mat4x4 transform;
    };
    struct VertexInput {
        uint vertex_index;
        vec2 pos;
        vec2 center;
        vec2 scale;
        float rotation;
        float opacity;
        vec2 atlas_pos;
        vec2 atlas_scale;
        int layer;
    };
    struct VertexOutput {
        vec4 position;
        vec2 uv;
        float layer;
        float opacity;
    };
    layout(std140, binding = 0) uniform Globals_block_0Vertex { Globals _group_0_binding_0_vs; };
    
    layout(location = 0) in vec2 _p2vs_location0;
    layout(location = 1) in vec2 _p2vs_location1;
    layout(location = 2) in vec2 _p2vs_location2;
    layout(location = 3) in float _p2vs_location3;
    layout(location = 4) in float _p2vs_location4;
    layout(location = 5) in vec2 _p2vs_location5;
    layout(location = 6) in vec2 _p2vs_location6;
    layout(location = 7) in int _p2vs_location7;
    layout(location = 0) smooth out vec2 _vs2fs_location0;
    layout(location = 1) smooth out float _vs2fs_location1;
    layout(location = 2) smooth out float _vs2fs_location2;
    
    vec2 vertex_position(uint vertex_index) {
        return vec2(lessThan(((uvec2(1u, 2u) + uvec2(vertex_index)) % uvec2(6u)), uvec2(3u)));
    }
    
    void main() {
        VertexInput input_ = VertexInput(uint(gl_VertexID), _p2vs_location0, _p2vs_location1, _p2vs_location2, _p2vs_location3, _p2vs_location4, _p2vs_location5, _p2vs_location6, _p2vs_location7);
        VertexOutput out_ = VertexOutput(vec4(0.0), vec2(0.0), 0.0, 0.0);
        vec2 v_pos = vec2(0.0);
        vec2 _e3 = vertex_position(input_.vertex_index);
        v_pos = _e3;
        vec2 _e6 = v_pos;
        out_.uv = vec2(((_e6 * input_.atlas_scale) + input_.atlas_pos));
        out_.layer = float(input_.layer);
        out_.opacity = input_.opacity;
        vec2 _e19 = v_pos;
        v_pos = ((roundEven(input_.pos) + (_e19 * input_.scale)) - input_.center);
        float cos_rot = cos(input_.rotation);
        float sin_rot = sin(input_.rotation);
        mat4x4 rotate = mat4x4(vec4(cos_rot, sin_rot, 0.0, 0.0), vec4(-(sin_rot), cos_rot, 0.0, 0.0), vec4(0.0, 0.0, 1.0, 0.0), vec4(0.0, 0.0, 0.0, 1.0));
        mat4x4 _e50 = _group_0_binding_0_vs.transform;
        vec2 _e55 = v_pos;
        out_.position = (_e50 * (vec4(input_.center, 0.0, 0.0) + (rotate * vec4(_e55, 0.0, 1.0))));
        VertexOutput _e62 = out_;
        gl_Position = _e62.position;
        _vs2fs_location0 = _e62.uv;
        _vs2fs_location1 = _e62.layer;
        _vs2fs_location2 = _e62.opacity;
        gl_Position.yz = vec2(-gl_Position.y, gl_Position.z * 2.0 - gl_Position.w);
        gl_PointSize = 1.0;
        return;
    }
    
    
[2024-07-27T06:21:52Z DEBUG wgpu_hal::gles::device] 	Compiled shader NativeShader(17)
[2024-07-27T06:21:52Z DEBUG wgpu_hal::gles::device] Naga generated shader:
    #version 320 es
    
    precision highp float;
    precision highp int;
    
    struct Globals {
        mat4x4 transform;
    };
    struct VertexInput {
        uint vertex_index;
        vec2 pos;
        vec2 center;
        vec2 scale;
        float rotation;
        float opacity;
        vec2 atlas_pos;
        vec2 atlas_scale;
        int layer;
    };
    struct VertexOutput {
        vec4 position;
        vec2 uv;
        float layer;
        float opacity;
    };
    layout(binding = 0) uniform highp sampler2DArray _group_1_binding_0_fs;
    
    layout(location = 0) smooth in vec2 _vs2fs_location0;
    layout(location = 1) smooth in float _vs2fs_location1;
    layout(location = 2) smooth in float _vs2fs_location2;
    layout(location = 0) out vec4 _fs2p_location0;
    
    vec2 vertex_position(uint vertex_index) {
        return vec2(lessThan(((uvec2(1u, 2u) + uvec2(vertex_index)) % uvec2(6u)), uvec2(3u)));
    }
    
    void main() {
        VertexOutput input_1 = VertexOutput(gl_FragCoord, _vs2fs_location0, _vs2fs_location1, _vs2fs_location2);
        vec4 _e6 = texture(_group_1_binding_0_fs, vec3(input_1.uv, int(input_1.layer)));
        _fs2p_location0 = (_e6 * vec4(1.0, 1.0, 1.0, input_1.opacity));
        return;
    }
    
    
[2024-07-27T06:21:52Z DEBUG wgpu_hal::gles::device] 	Compiled shader NativeShader(18)
[2024-07-27T06:21:52Z DEBUG wgpu_hal::gles::device] 	Linked program NativeProgram(16)
[2024-07-27T06:21:52Z DEBUG cosmic_text::font::system] Locale: en-US
[2024-07-27T06:21:52Z DEBUG cosmic_text::font::system] Parsed 357 font faces in 8ms.
[2024-07-27T06:21:52Z DEBUG wgpu_core::device::global] configuring surface with SurfaceConfiguration { usage: TextureUsages(RENDER_ATTACHMENT), format: Rgba8UnormSrgb, width: 1480, height: 320, present_mode: AutoVsync, desired_maximum_frame_latency: 1, alpha_mode: Auto, view_formats: [] }
[2024-07-27T06:21:52Z DEBUG wgpu_core::device::resource] Create view for texture Id(2,1,gl) filters usages to TextureUses(RESOURCE)
[2024-07-27T06:21:52Z DEBUG cosmic_text::buffer] relayout: 100ns
[2024-07-27T06:21:52Z DEBUG cosmic_text::font::system] font matches for Attrs { color_opt: None, family: Name("Noto Sans"), stretch: Normal, style: Normal, weight: Weight(700), metadata: 0, cache_key_flags: CacheKeyFlags(0x0), metrics_opt: None } in 9.61µs
[2024-07-27T06:21:52Z DEBUG cosmic_text::buffer] relayout: 100ns
[2024-07-27T06:21:52Z DEBUG cosmic_text::font::system] font matches for Attrs { color_opt: None, family: Name("Noto Sans"), stretch: Normal, style: Normal, weight: Weight(500), metadata: 0, cache_key_flags: CacheKeyFlags(0x0), metrics_opt: None } in 9.359µs
[2024-07-27T06:21:52Z DEBUG cosmic_text::buffer] relayout: 30ns
[2024-07-27T06:21:52Z DEBUG cosmic_text::buffer] relayout: 40ns
[2024-07-27T06:21:52Z DEBUG cosmic_text::buffer] relayout: 40ns
[2024-07-27T06:21:52Z DEBUG cosmic_text::buffer] relayout: 40ns
[2024-07-27T06:21:52Z DEBUG cosmic_text::buffer] relayout: 40ns
[2024-07-27T06:21:52Z DEBUG cosmic_text::buffer] relayout: 40ns
[2024-07-27T06:21:52Z DEBUG cosmic_text::buffer] relayout: 40ns
[2024-07-27T06:21:52Z DEBUG wgpu_core::present] Created CURRENT Surface Texture Id(3,1,gl)
[2024-07-27T06:21:52Z DEBUG wgpu_core::device::resource] Create view for texture Id(3,1,gl) filters usages to TextureUses(COLOR_TARGET)
[2024-07-27T06:21:52Z DEBUG wgpu_hal::gles::device] Naga generated shader:
    #version 320 es
    
    precision highp float;
    precision highp int;
    
    struct VertexInput {
        uint vertex_idx;
        ivec2 pos;
        uint dim;
        uint uv;
        uint color;
        uint content_type_with_srgb;
        float depth;
    };
    struct VertexOutput {
        vec4 position;
        vec4 color;
        vec2 uv;
        uint content_type;
    };
    struct Params {
        uvec2 screen_resolution;
        uvec2 _pad;
    };
    layout(binding = 0) uniform highp sampler2D _group_0_binding_0_vs;
    
    layout(binding = 1) uniform highp sampler2D _group_0_binding_1_vs;
    
    layout(std140, binding = 0) uniform Params_block_0Vertex { Params _group_1_binding_0_vs; };
    
    layout(location = 0) in ivec2 _p2vs_location0;
    layout(location = 1) in uint _p2vs_location1;
    layout(location = 2) in uint _p2vs_location2;
    layout(location = 3) in uint _p2vs_location3;
    layout(location = 4) in uint _p2vs_location4;
    layout(location = 5) in float _p2vs_location5;
    invariant gl_Position;
    layout(location = 0) smooth out vec4 _vs2fs_location0;
    layout(location = 1) smooth out vec2 _vs2fs_location1;
    layout(location = 2) flat out uint _vs2fs_location2;
    
    float srgb_to_linear(float c) {
        if ((c <= 0.04045)) {
            return (c / 12.92);
        } else {
            return pow(((c + 0.055) / 1.055), 2.4);
        }
    }
    
    void main() {
        VertexInput in_vert = VertexInput(uint(gl_VertexID), _p2vs_location0, _p2vs_location1, _p2vs_location2, _p2vs_location3, _p2vs_location4, _p2vs_location5);
        ivec2 pos = ivec2(0);
        uvec2 uv = uvec2(0u);
        VertexOutput vert_output = VertexOutput(vec4(0.0), vec4(0.0), vec2(0.0), 0u);
        uvec2 dim = uvec2(0u);
        pos = in_vert.pos;
        uint width = (in_vert.dim & 65535u);
        uint height = ((in_vert.dim & 4294901760u) >> 16u);
        uint color = in_vert.color;
        uv = uvec2((in_vert.uv & 65535u), ((in_vert.uv & 4294901760u) >> 16u));
        uint v = in_vert.vertex_idx;
        uvec2 corner_position = uvec2((in_vert.vertex_idx & 1u), ((in_vert.vertex_idx >> 1u) & 1u));
        uvec2 corner_offset = (uvec2(width, height) * corner_position);
        uvec2 _e34 = uv;
        uv = (_e34 + corner_offset);
        ivec2 _e36 = pos;
        pos = (_e36 + ivec2(corner_offset));
        ivec2 _e41 = pos;
        uvec2 _e47 = _group_1_binding_0_vs.screen_resolution;
        vert_output.position = vec4((((2.0 * vec2(_e41)) / vec2(_e47)) - vec2(1.0)), in_vert.depth, 1.0);
        float _e59 = vert_output.position.y;
        vert_output.position.y = (_e59 * -1.0);
        uint content_type = (in_vert.content_type_with_srgb & 65535u);
        uint srgb = ((in_vert.content_type_with_srgb & 4294901760u) >> 16u);
        switch(srgb) {
            case 0u: {
                vert_output.color = vec4((float(((color & 16711680u) >> 16u)) / 255.0), (float(((color & 65280u) >> 8u)) / 255.0), (float((color & 255u)) / 255.0), (float(((color & 4278190080u) >> 24u)) / 255.0));
                break;
            }
            case 1u: {
                float _e105 = srgb_to_linear((float(((color & 16711680u) >> 16u)) / 255.0));
                float _e113 = srgb_to_linear((float(((color & 65280u) >> 8u)) / 255.0));
                float _e119 = srgb_to_linear((float((color & 255u)) / 255.0));
                vert_output.color = vec4(_e105, _e113, _e119, (float(((color & 4278190080u) >> 24u)) / 255.0));
                break;
            }
            default: {
                break;
            }
        }
        switch(content_type) {
            case 0u: {
                dim = uvec2(textureSize(_group_0_binding_0_vs, 0).xy);
                break;
            }
            case 1u: {
                dim = uvec2(textureSize(_group_0_binding_1_vs, 0).xy);
                break;
            }
            default: {
                break;
            }
        }
        vert_output.content_type = content_type;
        uvec2 _e137 = uv;
        uvec2 _e139 = dim;
        vert_output.uv = (vec2(_e137) / vec2(_e139));
        VertexOutput _e142 = vert_output;
        gl_Position = _e142.position;
        _vs2fs_location0 = _e142.color;
        _vs2fs_location1 = _e142.uv;
        _vs2fs_location2 = _e142.content_type;
        gl_Position.yz = vec2(-gl_Position.y, gl_Position.z * 2.0 - gl_Position.w);
        gl_PointSize = 1.0;
        return;
    }
    
    
[2024-07-27T06:21:52Z DEBUG wgpu_hal::gles::device] 	Compiled shader NativeShader(20)
[2024-07-27T06:21:52Z DEBUG wgpu_hal::gles::device] Naga generated shader:
    #version 320 es
    
    precision highp float;
    precision highp int;
    
    struct VertexInput {
        uint vertex_idx;
        ivec2 pos;
        uint dim;
        uint uv;
        uint color;
        uint content_type_with_srgb;
        float depth;
    };
    struct VertexOutput {
        vec4 position;
        vec4 color;
        vec2 uv;
        uint content_type;
    };
    struct Params {
        uvec2 screen_resolution;
        uvec2 _pad;
    };
    layout(binding = 0) uniform highp sampler2D _group_0_binding_0_fs;
    
    layout(binding = 1) uniform highp sampler2D _group_0_binding_1_fs;
    
    invariant gl_FragCoord;
    layout(location = 0) smooth in vec4 _vs2fs_location0;
    layout(location = 1) smooth in vec2 _vs2fs_location1;
    layout(location = 2) flat in uint _vs2fs_location2;
    layout(location = 0) out vec4 _fs2p_location0;
    
    float srgb_to_linear(float c) {
        if ((c <= 0.04045)) {
            return (c / 12.92);
        } else {
            return pow(((c + 0.055) / 1.055), 2.4);
        }
    }
    
    void main() {
        VertexOutput in_frag = VertexOutput(gl_FragCoord, _vs2fs_location0, _vs2fs_location1, _vs2fs_location2);
        switch(in_frag.content_type) {
            case 0u: {
                vec4 _e6 = textureLod(_group_0_binding_0_fs, vec2(in_frag.uv), 0.0);
                _fs2p_location0 = _e6;
                return;
            }
            case 1u: {
                vec4 _e15 = textureLod(_group_0_binding_1_fs, vec2(in_frag.uv), 0.0);
                _fs2p_location0 = vec4(in_frag.color.xyz, (in_frag.color.w * _e15.x));
                return;
            }
            default: {
                _fs2p_location0 = vec4(0.0);
                return;
            }
        }
    }
    
    
[2024-07-27T06:21:52Z DEBUG wgpu_hal::gles::device] 	Compiled shader NativeShader(21)
[2024-07-27T06:21:52Z DEBUG wgpu_hal::gles::device] 	Linked program NativeProgram(19)
[2024-07-27T06:21:52Z DEBUG wgpu_core::resource] Buffer Id(6,1,gl) map state -> Idle
[2024-07-27T06:21:52Z DEBUG iced_wgpu::image::atlas] Allocated atlas entry: Contiguous(Partial { layer: 0, region: Region { id: AllocId(2), rectangle: Box2D((0, 0), (180, 180)) } })
[2024-07-27T06:21:52Z DEBUG wgpu_core::resource] Buffer Id(7,1,gl) map state -> Idle
[2024-07-27T06:21:52Z DEBUG wgpu_core::resource] Buffer Id(7,1,gl) map state -> Idle
[2024-07-27T06:21:52Z DEBUG iced_wgpu::image::atlas] Atlas layers: 2 (busy: 1, allocations: 1)
[2024-07-27T06:21:52Z DEBUG iced_wgpu::image::vector] allocating 4002915459808569141 180x180
[2024-07-27T06:21:52Z DEBUG wgpu_core::resource] Buffer Id(4,1,gl) map state -> Idle
[2024-07-27T06:21:52Z DEBUG wgpu_core::present] Removing swapchain texture Id(3,1,gl) from the device tracker
[2024-07-27T06:21:52Z DEBUG wgpu_core::present] Presented. End of Frame
[2024-07-27T06:21:52Z DEBUG wgpu_core::device::global] configuring surface with SurfaceConfiguration { usage: TextureUsages(RENDER_ATTACHMENT), format: Rgba8UnormSrgb, width: 1480, height: 320, present_mode: AutoVsync, desired_maximum_frame_latency: 1, alpha_mode: Auto, view_formats: [] }
[2024-07-27T06:21:52Z DEBUG wgpu_core::device::life] Active submission 1 is done
[2024-07-27T06:21:52Z DEBUG wgpu_core::device::life] Buffer Id(4,1,gl) map state -> Active
[2024-07-27T06:21:52Z DEBUG wgpu_core::present] Created CURRENT Surface Texture Id(3,2,gl)
[2024-07-27T06:21:52Z DEBUG wgpu_core::device::resource] Create view for texture Id(3,2,gl) filters usages to TextureUses(COLOR_TARGET)
[2024-07-27T06:21:52Z DEBUG wgpu_core::resource] Buffer Id(7,2,gl) map state -> Idle
[2024-07-27T06:21:52Z DEBUG wgpu_core::resource] Buffer Id(4,1,gl) map state -> Idle
[2024-07-27T06:21:52Z DEBUG wgpu_core::device::life] Buffer Id(6,1,gl) map state -> Active
[2024-07-27T06:21:52Z DEBUG wgpu_core::present] Removing swapchain texture Id(3,2,gl) from the device tracker
[2024-07-27T06:21:52Z DEBUG wgpu_core::present] Presented. End of Frame
[2024-07-27T06:21:52Z DEBUG wgpu_core::present] Created CURRENT Surface Texture Id(4,1,gl)
[2024-07-27T06:21:52Z DEBUG wgpu_core::device::resource] Create view for texture Id(4,1,gl) filters usages to TextureUses(COLOR_TARGET)
[2024-07-27T06:21:52Z DEBUG wgpu_core::resource] Buffer Id(6,1,gl) map state -> Idle
[2024-07-27T06:21:52Z DEBUG wgpu_core::resource] Buffer Id(8,2,gl) map state -> Idle
[2024-07-27T06:21:52Z DEBUG wgpu_core::device::life] Active submission 2 is done
[2024-07-27T06:21:52Z DEBUG wgpu_core::device::life] Buffer Id(4,1,gl) map state -> Active
[2024-07-27T06:21:52Z DEBUG wgpu_core::device::life] Buffer Id(7,2,gl) map state -> Active
[2024-07-27T06:21:52Z DEBUG wgpu_core::present] Removing swapchain texture Id(4,1,gl) from the device tracker
[2024-07-27T06:21:52Z DEBUG wgpu_core::present] Presented. End of Frame
[2024-07-27T06:21:53Z DEBUG wgpu_core::present] Created CURRENT Surface Texture Id(3,3,gl)
[2024-07-27T06:21:53Z DEBUG wgpu_core::device::resource] Create view for texture Id(3,3,gl) filters usages to TextureUses(COLOR_TARGET)
[2024-07-27T06:21:53Z DEBUG wgpu_core::resource] Buffer Id(7,2,gl) map state -> Idle
[2024-07-27T06:21:53Z DEBUG wgpu_core::resource] Buffer Id(4,1,gl) map state -> Idle
[2024-07-27T06:21:53Z DEBUG wgpu_core::device::life] Active submission 3 is done
[2024-07-27T06:21:53Z DEBUG wgpu_core::device::life] Buffer Id(8,2,gl) map state -> Active
[2024-07-27T06:21:53Z DEBUG wgpu_core::device::life] Buffer Id(6,1,gl) map state -> Active
[2024-07-27T06:21:53Z DEBUG wgpu_core::present] Removing swapchain texture Id(3,3,gl) from the device tracker
[2024-07-27T06:21:53Z DEBUG wgpu_core::present] Presented. End of Frame
[2024-07-27T06:21:53Z DEBUG wgpu_core::present] Created CURRENT Surface Texture Id(4,2,gl)
[2024-07-27T06:21:53Z DEBUG wgpu_core::device::resource] Create view for texture Id(4,2,gl) filters usages to TextureUses(COLOR_TARGET)
[2024-07-27T06:21:53Z DEBUG wgpu_core::resource] Buffer Id(6,1,gl) map state -> Idle
[2024-07-27T06:21:53Z DEBUG wgpu_core::resource] Buffer Id(8,2,gl) map state -> Idle
[2024-07-27T06:21:53Z DEBUG wgpu_core::device::life] Active submission 4 is done
[2024-07-27T06:21:53Z DEBUG wgpu_core::device::life] Buffer Id(4,1,gl) map state -> Active
[2024-07-27T06:21:53Z DEBUG wgpu_core::device::life] Buffer Id(7,2,gl) map state -> Active
[2024-07-27T06:21:53Z DEBUG wgpu_core::present] Removing swapchain texture Id(4,2,gl) from the device tracker
[2024-07-27T06:21:53Z DEBUG wgpu_core::present] Presented. End of Frame
[2024-07-27T06:21:53Z DEBUG wgpu_core::present] Created CURRENT Surface Texture Id(3,4,gl)
[2024-07-27T06:21:53Z DEBUG wgpu_core::device::resource] Create view for texture Id(3,4,gl) filters usages to TextureUses(COLOR_TARGET)
[2024-07-27T06:21:53Z DEBUG wgpu_core::resource] Buffer Id(7,2,gl) map state -> Idle
[2024-07-27T06:21:53Z DEBUG wgpu_core::resource] Buffer Id(4,1,gl) map state -> Idle
[2024-07-27T06:21:53Z DEBUG wgpu_core::device::life] Active submission 5 is done
[2024-07-27T06:21:53Z DEBUG wgpu_core::device::life] Buffer Id(8,2,gl) map state -> Active
[2024-07-27T06:21:53Z DEBUG wgpu_core::device::life] Buffer Id(6,1,gl) map state -> Active
[2024-07-27T06:21:53Z DEBUG wgpu_core::present] Removing swapchain texture Id(3,4,gl) from the device tracker
[2024-07-27T06:21:53Z DEBUG wgpu_core::present] Presented. End of Frame
[2024-07-27T06:21:53Z DEBUG wgpu_core::present] Created CURRENT Surface Texture Id(4,3,gl)
[2024-07-27T06:21:53Z DEBUG wgpu_core::device::resource] Create view for texture Id(4,3,gl) filters usages to TextureUses(COLOR_TARGET)
[2024-07-27T06:21:53Z DEBUG wgpu_core::resource] Buffer Id(6,1,gl) map state -> Idle
[2024-07-27T06:21:53Z DEBUG wgpu_core::resource] Buffer Id(8,2,gl) map state -> Idle
[2024-07-27T06:21:53Z DEBUG wgpu_core::present] Removing swapchain texture Id(4,3,gl) from the device tracker
[2024-07-27T06:21:53Z DEBUG wgpu_core::present] Presented. End of Frame
